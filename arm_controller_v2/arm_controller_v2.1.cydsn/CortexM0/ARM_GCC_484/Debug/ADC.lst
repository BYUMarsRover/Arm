ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"ADC.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	ADC_initVar
  18              		.bss
  19              		.type	ADC_initVar, %object
  20              		.size	ADC_initVar, 1
  21              	ADC_initVar:
  22 0000 00       		.space	1
  23              		.comm	ADC_offset,4,4
  24              		.comm	ADC_countsPer10Volt,8,4
  25              		.section	.rodata
  26              		.align	2
  27              		.type	ADC_channelsConfig, %object
  28              		.size	ADC_channelsConfig, 8
  29              	ADC_channelsConfig:
  30 0000 02000000 		.word	2
  31 0004 02000000 		.word	2
  32              		.section	.text.ADC_Start,"ax",%progbits
  33              		.align	2
  34              		.global	ADC_Start
  35              		.code	16
  36              		.thumb_func
  37              		.type	ADC_Start, %function
  38              	ADC_Start:
  39              	.LFB0:
  40              		.file 1 ".\\Generated_Source\\PSoC4\\ADC.c"
   1:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/ADC.c **** * File Name: ADC.c
   3:.\Generated_Source\PSoC4/ADC.c **** * Version 2.0
   4:.\Generated_Source\PSoC4/ADC.c **** *
   5:.\Generated_Source\PSoC4/ADC.c **** * Description:
   6:.\Generated_Source\PSoC4/ADC.c **** *  This file provides the source code to the API for the Sequencing Successive
   7:.\Generated_Source\PSoC4/ADC.c **** *  Approximation ADC Component Component.
   8:.\Generated_Source\PSoC4/ADC.c **** *
   9:.\Generated_Source\PSoC4/ADC.c **** * Note:
  10:.\Generated_Source\PSoC4/ADC.c **** *
  11:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  12:.\Generated_Source\PSoC4/ADC.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  13:.\Generated_Source\PSoC4/ADC.c **** * You may use this file only in accordance with the license, terms, conditions,
  14:.\Generated_Source\PSoC4/ADC.c **** * disclaimers, and limitations in the end user license agreement accompanying
  15:.\Generated_Source\PSoC4/ADC.c **** * the software package with which this file was provided.
  16:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  17:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 2


  18:.\Generated_Source\PSoC4/ADC.c **** #include "ADC.h"
  19:.\Generated_Source\PSoC4/ADC.c **** 
  20:.\Generated_Source\PSoC4/ADC.c **** 
  21:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  22:.\Generated_Source\PSoC4/ADC.c **** * Global data allocation
  23:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  24:.\Generated_Source\PSoC4/ADC.c **** uint8 ADC_initVar = 0u;
  25:.\Generated_Source\PSoC4/ADC.c **** volatile int16 ADC_offset[ADC_TOTAL_CHANNELS_NUM];
  26:.\Generated_Source\PSoC4/ADC.c **** volatile int32 ADC_countsPer10Volt[ADC_TOTAL_CHANNELS_NUM];   /* Gain compensation */
  27:.\Generated_Source\PSoC4/ADC.c **** 
  28:.\Generated_Source\PSoC4/ADC.c **** 
  29:.\Generated_Source\PSoC4/ADC.c **** /***************************************
  30:.\Generated_Source\PSoC4/ADC.c **** * Local data allocation
  31:.\Generated_Source\PSoC4/ADC.c **** ***************************************/
  32:.\Generated_Source\PSoC4/ADC.c **** /* Channels configuration generated by customiser */
  33:.\Generated_Source\PSoC4/ADC.c **** static const uint32 CYCODE ADC_channelsConfig[] = { 0x00000002u, 0x00000002u };
  34:.\Generated_Source\PSoC4/ADC.c **** 
  35:.\Generated_Source\PSoC4/ADC.c **** 
  36:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  37:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Start
  38:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  39:.\Generated_Source\PSoC4/ADC.c **** *
  40:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  41:.\Generated_Source\PSoC4/ADC.c **** *  Performs all required initialization for this component
  42:.\Generated_Source\PSoC4/ADC.c **** *  and enables the power. The power will be set to the appropriate
  43:.\Generated_Source\PSoC4/ADC.c **** *  power based on the clock frequency.
  44:.\Generated_Source\PSoC4/ADC.c **** *
  45:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  46:.\Generated_Source\PSoC4/ADC.c **** *  None.
  47:.\Generated_Source\PSoC4/ADC.c **** *
  48:.\Generated_Source\PSoC4/ADC.c **** * Return:
  49:.\Generated_Source\PSoC4/ADC.c **** *  None.
  50:.\Generated_Source\PSoC4/ADC.c **** *
  51:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
  52:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_initVar variable is used to indicate when/if initial
  53:.\Generated_Source\PSoC4/ADC.c **** *  configuration of this component has happened. The variable is initialized to
  54:.\Generated_Source\PSoC4/ADC.c **** *  zero and set to 1 the first time ADC_Start() is called. This allows for
  55:.\Generated_Source\PSoC4/ADC.c **** *  component Re-Start without re-initialization in all subsequent calls to the
  56:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  57:.\Generated_Source\PSoC4/ADC.c **** *  If re-initialization of the component is required the variable should be set
  58:.\Generated_Source\PSoC4/ADC.c **** *  to zero before call of ADC_Start() routine, or the user may call
  59:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Init() and ADC_Enable() as done in the
  60:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start() routine.
  61:.\Generated_Source\PSoC4/ADC.c **** *
  62:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  63:.\Generated_Source\PSoC4/ADC.c **** void ADC_Start(void)
  64:.\Generated_Source\PSoC4/ADC.c **** {
  41              		.loc 1 64 0
  42              		.cfi_startproc
  43 0000 80B5     		push	{r7, lr}
  44              		.cfi_def_cfa_offset 8
  45              		.cfi_offset 7, -8
  46              		.cfi_offset 14, -4
  47 0002 00AF     		add	r7, sp, #0
  48              		.cfi_def_cfa_register 7
  65:.\Generated_Source\PSoC4/ADC.c ****     /* If not Initialized then initialize all required hardware and software */
  66:.\Generated_Source\PSoC4/ADC.c ****     if(ADC_initVar == 0u)
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 3


  49              		.loc 1 66 0
  50 0004 064B     		ldr	r3, .L3
  51 0006 1B78     		ldrb	r3, [r3]
  52 0008 002B     		cmp	r3, #0
  53 000a 04D1     		bne	.L2
  67:.\Generated_Source\PSoC4/ADC.c ****     {
  68:.\Generated_Source\PSoC4/ADC.c ****         ADC_Init();
  54              		.loc 1 68 0
  55 000c FFF7FEFF 		bl	ADC_Init
  69:.\Generated_Source\PSoC4/ADC.c ****         ADC_initVar = 1u;
  56              		.loc 1 69 0
  57 0010 034B     		ldr	r3, .L3
  58 0012 0122     		mov	r2, #1
  59 0014 1A70     		strb	r2, [r3]
  60              	.L2:
  70:.\Generated_Source\PSoC4/ADC.c ****     }
  71:.\Generated_Source\PSoC4/ADC.c ****     ADC_Enable();
  61              		.loc 1 71 0
  62 0016 FFF7FEFF 		bl	ADC_Enable
  72:.\Generated_Source\PSoC4/ADC.c **** }
  63              		.loc 1 72 0
  64 001a BD46     		mov	sp, r7
  65              		@ sp needed
  66 001c 80BD     		pop	{r7, pc}
  67              	.L4:
  68 001e C046     		.align	2
  69              	.L3:
  70 0020 00000000 		.word	ADC_initVar
  71              		.cfi_endproc
  72              	.LFE0:
  73              		.size	ADC_Start, .-ADC_Start
  74              		.section	.text.ADC_Init,"ax",%progbits
  75              		.align	2
  76              		.global	ADC_Init
  77              		.code	16
  78              		.thumb_func
  79              		.type	ADC_Init, %function
  80              	ADC_Init:
  81              	.LFB1:
  73:.\Generated_Source\PSoC4/ADC.c **** 
  74:.\Generated_Source\PSoC4/ADC.c **** 
  75:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
  76:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Init
  77:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
  78:.\Generated_Source\PSoC4/ADC.c **** *
  79:.\Generated_Source\PSoC4/ADC.c **** * Summary:
  80:.\Generated_Source\PSoC4/ADC.c **** *  Initialize component's parameters to the parameters set by user in the
  81:.\Generated_Source\PSoC4/ADC.c **** *  customizer of the component placed onto schematic. Usually called in
  82:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Start().
  83:.\Generated_Source\PSoC4/ADC.c **** *
  84:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
  85:.\Generated_Source\PSoC4/ADC.c **** *  None.
  86:.\Generated_Source\PSoC4/ADC.c **** *
  87:.\Generated_Source\PSoC4/ADC.c **** * Return:
  88:.\Generated_Source\PSoC4/ADC.c **** *  None.
  89:.\Generated_Source\PSoC4/ADC.c **** *
  90:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 4


  91:.\Generated_Source\PSoC4/ADC.c **** *  The ADC_offset variable is initialized.
  92:.\Generated_Source\PSoC4/ADC.c **** *
  93:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
  94:.\Generated_Source\PSoC4/ADC.c **** void ADC_Init(void)
  95:.\Generated_Source\PSoC4/ADC.c **** {
  82              		.loc 1 95 0
  83              		.cfi_startproc
  84 0000 90B5     		push	{r4, r7, lr}
  85              		.cfi_def_cfa_offset 12
  86              		.cfi_offset 4, -12
  87              		.cfi_offset 7, -8
  88              		.cfi_offset 14, -4
  89 0002 85B0     		sub	sp, sp, #20
  90              		.cfi_def_cfa_offset 32
  91 0004 00AF     		add	r7, sp, #0
  92              		.cfi_def_cfa_register 7
  96:.\Generated_Source\PSoC4/ADC.c ****     uint32 chNum;
  97:.\Generated_Source\PSoC4/ADC.c ****     uint32 tmpRegVal;
  98:.\Generated_Source\PSoC4/ADC.c ****     int32 counts;
  99:.\Generated_Source\PSoC4/ADC.c **** 
 100:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 101:.\Generated_Source\PSoC4/ADC.c ****         static const uint8 CYCODE ADC_InputsPlacement[] =
 102:.\Generated_Source\PSoC4/ADC.c ****         {
 103:.\Generated_Source\PSoC4/ADC.c ****             (uint8)(ADC_cy_psoc4_sarmux_8__CH_0_PORT << 4u) |
 104:.\Generated_Source\PSoC4/ADC.c ****             (uint8)ADC_cy_psoc4_sarmux_8__CH_0_PIN
 105:.\Generated_Source\PSoC4/ADC.c ****             ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_1_PORT << 4u) |
 106:.\Generated_Source\PSoC4/ADC.c ****              (uint8)ADC_cy_psoc4_sarmux_8__CH_1_PIN
 107:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 2u)
 108:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_2_PORT << 4u) |
 109:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_2_PIN
 110:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 2u */
 111:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 3u)
 112:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_3_PORT << 4u) |
 113:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_3_PIN
 114:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 3u */
 115:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 4u)
 116:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_4_PORT << 4u) |
 117:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_4_PIN
 118:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 4u */
 119:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 5u)
 120:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_5_PORT << 4u) |
 121:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_5_PIN
 122:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 5u */
 123:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 6u)
 124:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_6_PORT << 4u) |
 125:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_6_PIN
 126:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 6u */
 127:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 7u)
 128:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_7_PORT << 4u) |
 129:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_7_PIN
 130:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 7u */
 131:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_TOTAL_CHANNELS_NUM > 8u)
 132:.\Generated_Source\PSoC4/ADC.c ****                 ,(uint8)(ADC_cy_psoc4_sarmux_8__CH_8_PORT << 4u) |
 133:.\Generated_Source\PSoC4/ADC.c ****                  (uint8)ADC_cy_psoc4_sarmux_8__CH_8_PIN
 134:.\Generated_Source\PSoC4/ADC.c ****             #endif /* End ADC_TOTAL_CHANNELS_NUM > 8u */
 135:.\Generated_Source\PSoC4/ADC.c ****         };
 136:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 5


 137:.\Generated_Source\PSoC4/ADC.c **** 
 138:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_IRQ_REMOVE == 0u)
 139:.\Generated_Source\PSoC4/ADC.c ****         /* Start and set interrupt vector */
 140:.\Generated_Source\PSoC4/ADC.c ****         CyIntSetPriority(ADC_INTC_NUMBER, ADC_INTC_PRIOR_NUMBER);
  93              		.loc 1 140 0
  94 0006 0E20     		mov	r0, #14
  95 0008 0321     		mov	r1, #3
  96 000a FFF7FEFF 		bl	CyIntSetPriority
 141:.\Generated_Source\PSoC4/ADC.c ****         (void)CyIntSetVector(ADC_INTC_NUMBER, &ADC_ISR);
  97              		.loc 1 141 0
  98 000e 604B     		ldr	r3, .L16
  99 0010 0E20     		mov	r0, #14
 100 0012 191C     		mov	r1, r3
 101 0014 FFF7FEFF 		bl	CyIntSetVector
 142:.\Generated_Source\PSoC4/ADC.c ****     #endif   /* End ADC_IRQ_REMOVE */
 143:.\Generated_Source\PSoC4/ADC.c **** 
 144:.\Generated_Source\PSoC4/ADC.c ****     /* Init SAR and MUX registers */
 145:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = ADC_DEFAULT_EN_CHANNELS;
 102              		.loc 1 145 0
 103 0018 5E4B     		ldr	r3, .L16+4
 104 001a 0322     		mov	r2, #3
 105 001c 1A60     		str	r2, [r3]
 146:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG = ADC_DEFAULT_CTRL_REG_CFG;
 106              		.loc 1 146 0
 107 001e 5E4B     		ldr	r3, .L16+8
 108 0020 5E4A     		ldr	r2, .L16+12
 109 0022 1A60     		str	r2, [r3]
 147:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_CTRL_REG = ADC_DEFAULT_SAMPLE_CTRL_REG_CFG;
 110              		.loc 1 147 0
 111 0024 5E4B     		ldr	r3, .L16+16
 112 0026 5F4A     		ldr	r2, .L16+20
 113 0028 1A60     		str	r2, [r3]
 148:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG = ADC_DEFAULT_RANGE_THRES_REG_CFG;
 114              		.loc 1 148 0
 115 002a 5F4B     		ldr	r3, .L16+24
 116 002c 5F4A     		ldr	r2, .L16+28
 117 002e 1A60     		str	r2, [r3]
 149:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_COND_REG  = ADC_COMPARE_MODE;
 118              		.loc 1 149 0
 119 0030 5F4B     		ldr	r3, .L16+32
 120 0032 8022     		mov	r2, #128
 121 0034 D205     		lsl	r2, r2, #23
 122 0036 1A60     		str	r2, [r3]
 150:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME01_REG = ADC_DEFAULT_SAMPLE_TIME01_REG_CFG;
 123              		.loc 1 150 0
 124 0038 5E4B     		ldr	r3, .L16+36
 125 003a 5F4A     		ldr	r2, .L16+40
 126 003c 1A60     		str	r2, [r3]
 151:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SAMPLE_TIME23_REG = ADC_DEFAULT_SAMPLE_TIME23_REG_CFG;
 127              		.loc 1 151 0
 128 003e 5F4B     		ldr	r3, .L16+44
 129 0040 5D4A     		ldr	r2, .L16+40
 130 0042 1A60     		str	r2, [r3]
 152:.\Generated_Source\PSoC4/ADC.c ****     
 153:.\Generated_Source\PSoC4/ADC.c ****     /* Connect Vm to VSSA when even one channel is single-ended or multiple channels configured */
 154:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_MUX_SWITCH0 != 0u)
 155:.\Generated_Source\PSoC4/ADC.c ****         ADC_MUX_SWITCH0_REG |= ADC_DEFAULT_MUX_SWITCH0;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 6


 131              		.loc 1 155 0
 132 0044 5E4B     		ldr	r3, .L16+48
 133 0046 5E4A     		ldr	r2, .L16+48
 134 0048 1268     		ldr	r2, [r2]
 135 004a 8021     		mov	r1, #128
 136 004c 4902     		lsl	r1, r1, #9
 137 004e 0A43     		orr	r2, r1
 138 0050 1A60     		str	r2, [r3]
 156:.\Generated_Source\PSoC4/ADC.c ****         /* Set MUX_HW_CTRL_VSSA in MUX_SWITCH_HW_CTRL when multiple channels enabled */
 157:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 158:.\Generated_Source\PSoC4/ADC.c ****             ADC_MUX_SWITCH_HW_CTRL_REG |= ADC_DEFAULT_MUX_SWITCH0;
 139              		.loc 1 158 0
 140 0052 5C4B     		ldr	r3, .L16+52
 141 0054 5B4A     		ldr	r2, .L16+52
 142 0056 1268     		ldr	r2, [r2]
 143 0058 8021     		mov	r1, #128
 144 005a 4902     		lsl	r1, r1, #9
 145 005c 0A43     		orr	r2, r1
 146 005e 1A60     		str	r2, [r3]
 159:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_TOTAL_CHANNELS_NUM > 1u */
 160:.\Generated_Source\PSoC4/ADC.c ****     #endif /*ADC_CHANNELS_MODE !=0 */
 161:.\Generated_Source\PSoC4/ADC.c **** 
 162:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = 0u;
 147              		.loc 1 162 0
 148 0060 594B     		ldr	r3, .L16+56
 149 0062 0022     		mov	r2, #0
 150 0064 1A60     		str	r2, [r3]
 163:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = 0u;
 151              		.loc 1 163 0
 152 0066 594B     		ldr	r3, .L16+60
 153 0068 0022     		mov	r2, #0
 154 006a 1A60     		str	r2, [r3]
 164:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_INTR_MASK_REG = ADC_SAR_INTR_MASK;
 155              		.loc 1 164 0
 156 006c 584B     		ldr	r3, .L16+64
 157 006e 0122     		mov	r2, #1
 158 0070 1A60     		str	r2, [r3]
 165:.\Generated_Source\PSoC4/ADC.c **** 
 166:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4)
 167:.\Generated_Source\PSoC4/ADC.c ****         ADC_ANA_TRIM_REG = ADC_TRIM_COEF;
 159              		.loc 1 167 0
 160 0072 584B     		ldr	r3, .L16+68
 161 0074 0222     		mov	r2, #2
 162 0076 1A60     		str	r2, [r3]
 168:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4) */
 169:.\Generated_Source\PSoC4/ADC.c **** 
 170:.\Generated_Source\PSoC4/ADC.c ****     /* Read and modify default configuration based on characterization */
 171:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal = ADC_SAR_DFT_CTRL_REG;
 163              		.loc 1 171 0
 164 0078 574B     		ldr	r3, .L16+72
 165 007a 1B68     		ldr	r3, [r3]
 166 007c 7B60     		str	r3, [r7, #4]
 172:.\Generated_Source\PSoC4/ADC.c ****     tmpRegVal &= (uint32)~ADC_DCEN;
 167              		.loc 1 172 0
 168 007e 7A68     		ldr	r2, [r7, #4]
 169 0080 564B     		ldr	r3, .L16+76
 170 0082 1340     		and	r3, r2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 7


 171 0084 7B60     		str	r3, [r7, #4]
 173:.\Generated_Source\PSoC4/ADC.c ****     
 174:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4)
 175:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_NOMINAL_CLOCK_FREQ > (ADC_MAX_FREQUENCY / 2))
 176:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_SEL_CSEL_DFT_CHAR;
 177:.\Generated_Source\PSoC4/ADC.c ****         #else  /* clock speed < 9 Mhz */
 178:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 172              		.loc 1 178 0
 173 0086 7B68     		ldr	r3, [r7, #4]
 174 0088 0122     		mov	r2, #1
 175 008a 1343     		orr	r3, r2
 176 008c 7B60     		str	r3, [r7, #4]
 179:.\Generated_Source\PSoC4/ADC.c ****         #endif /* clock speed > 9 Mhz */
 180:.\Generated_Source\PSoC4/ADC.c ****     #else
 181:.\Generated_Source\PSoC4/ADC.c ****         #if ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 182:.\Generated_Source\PSoC4/ADC.c ****              (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF))
 183:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DLY_INC;
 184:.\Generated_Source\PSoC4/ADC.c ****         #else
 185:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_DCEN;
 186:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)~ADC_DLY_INC;
 187:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ((ADC_DEFAULT_VREF_SEL == ADC__INTERNAL1024) || \
 188:.\Generated_Source\PSoC4/ADC.c ****                    (ADC_DEFAULT_VREF_SEL == ADC__INTERNALVREF)) */
 189:.\Generated_Source\PSoC4/ADC.c ****     #endif /* (ADC_CY_SAR_IP_VER == ADC_CY_SAR_IP_PSOC4) */
 190:.\Generated_Source\PSoC4/ADC.c ****     
 191:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_DFT_CTRL_REG = tmpRegVal;
 177              		.loc 1 191 0
 178 008e 524B     		ldr	r3, .L16+72
 179 0090 7A68     		ldr	r2, [r7, #4]
 180 0092 1A60     		str	r2, [r3]
 192:.\Generated_Source\PSoC4/ADC.c **** 
 193:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_MAX_RESOLUTION != ADC_RESOLUTION_12)
 194:.\Generated_Source\PSoC4/ADC.c ****         ADC_WOUNDING_REG = ADC_ALT_WOUNDING;
 195:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 196:.\Generated_Source\PSoC4/ADC.c **** 
 197:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 181              		.loc 1 197 0
 182 0094 0023     		mov	r3, #0
 183 0096 FB60     		str	r3, [r7, #12]
 184 0098 73E0     		b	.L6
 185              	.L15:
 198:.\Generated_Source\PSoC4/ADC.c ****     {
 199:.\Generated_Source\PSoC4/ADC.c ****         tmpRegVal = (ADC_channelsConfig[chNum] & ADC_CHANNEL_CONFIG_MASK);
 186              		.loc 1 199 0
 187 009a 514B     		ldr	r3, .L16+80
 188 009c FA68     		ldr	r2, [r7, #12]
 189 009e 9200     		lsl	r2, r2, #2
 190 00a0 D258     		ldr	r2, [r2, r3]
 191 00a2 DC23     		mov	r3, #220
 192 00a4 9B01     		lsl	r3, r3, #6
 193 00a6 1340     		and	r3, r2
 194 00a8 7B60     		str	r3, [r7, #4]
 200:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_TOTAL_CHANNELS_NUM > 1u)
 201:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal |= ADC_InputsPlacement[chNum];
 195              		.loc 1 201 0
 196 00aa 4E4A     		ldr	r2, .L16+84
 197 00ac FB68     		ldr	r3, [r7, #12]
 198 00ae D318     		add	r3, r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 8


 199 00b0 1B78     		ldrb	r3, [r3]
 200 00b2 7A68     		ldr	r2, [r7, #4]
 201 00b4 1343     		orr	r3, r2
 202 00b6 7B60     		str	r3, [r7, #4]
 202:.\Generated_Source\PSoC4/ADC.c ****         #endif /* End ADC_TOTAL_CHANNELS_NUM > 1u */
 203:.\Generated_Source\PSoC4/ADC.c ****         
 204:.\Generated_Source\PSoC4/ADC.c ****         
 205:.\Generated_Source\PSoC4/ADC.c ****         /* When the part is limited to 10-bit then the SUB_RESOLUTION bit
 206:.\Generated_Source\PSoC4/ADC.c ****         *  will be ignored and the RESOLUTION bit selects between 10-bit
 207:.\Generated_Source\PSoC4/ADC.c ****         *  (0) and 8-bit (1) resolution.
 208:.\Generated_Source\PSoC4/ADC.c ****         */
 209:.\Generated_Source\PSoC4/ADC.c ****         #if((ADC_MAX_RESOLUTION != ADC_RESOLUTION_12) && \
 210:.\Generated_Source\PSoC4/ADC.c ****             (ADC_ALT_WOUNDING == ADC_WOUNDING_10BIT))
 211:.\Generated_Source\PSoC4/ADC.c ****             tmpRegVal &= (uint32)(~ADC_ALT_RESOLUTION_ON);
 212:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_MAX_RESOLUTION != ADC_RESOLUTION_12 */
 213:.\Generated_Source\PSoC4/ADC.c **** 
 214:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 215:.\Generated_Source\PSoC4/ADC.c ****         if(chNum < ADC_SEQUENCED_CHANNELS_NUM)
 216:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 217:.\Generated_Source\PSoC4/ADC.c ****         {
 218:.\Generated_Source\PSoC4/ADC.c ****             CY_SET_REG32((reg32 *)(ADC_SAR_CHAN_CONFIG_IND + (uint32)(chNum << 2)), tmpRegVal);
 203              		.loc 1 218 0
 204 00b8 FB68     		ldr	r3, [r7, #12]
 205 00ba 9B00     		lsl	r3, r3, #2
 206 00bc 4A4A     		ldr	r2, .L16+88
 207 00be 9B18     		add	r3, r3, r2
 208 00c0 7A68     		ldr	r2, [r7, #4]
 209 00c2 1A60     		str	r2, [r3]
 219:.\Generated_Source\PSoC4/ADC.c **** 
 220:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 210              		.loc 1 220 0
 211 00c4 464B     		ldr	r3, .L16+80
 212 00c6 FA68     		ldr	r2, [r7, #12]
 213 00c8 9200     		lsl	r2, r2, #2
 214 00ca D258     		ldr	r2, [r2, r3]
 215 00cc 0123     		mov	r3, #1
 216 00ce 1340     		and	r3, r2
 217 00d0 0AD0     		beq	.L7
 221:.\Generated_Source\PSoC4/ADC.c ****             {
 222:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_SATURATE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 218              		.loc 1 222 0
 219 00d2 3D4B     		ldr	r3, .L16+56
 220 00d4 3C4A     		ldr	r2, .L16+56
 221 00d6 1168     		ldr	r1, [r2]
 222 00d8 FA68     		ldr	r2, [r7, #12]
 223 00da 0120     		mov	r0, #1
 224 00dc 041C     		mov	r4, r0
 225 00de 9440     		lsl	r4, r4, r2
 226 00e0 221C     		mov	r2, r4
 227 00e2 92B2     		uxth	r2, r2
 228 00e4 0A43     		orr	r2, r1
 229 00e6 1A60     		str	r2, [r3]
 230              	.L7:
 223:.\Generated_Source\PSoC4/ADC.c ****             }
 224:.\Generated_Source\PSoC4/ADC.c **** 
 225:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 231              		.loc 1 225 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 9


 232 00e8 3D4B     		ldr	r3, .L16+80
 233 00ea FA68     		ldr	r2, [r7, #12]
 234 00ec 9200     		lsl	r2, r2, #2
 235 00ee D258     		ldr	r2, [r2, r3]
 236 00f0 0223     		mov	r3, #2
 237 00f2 1340     		and	r3, r2
 238 00f4 0AD0     		beq	.L8
 226:.\Generated_Source\PSoC4/ADC.c ****             {
 227:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_RANGE_INTR_MASK_REG |= (uint16)((uint16)1 << chNum);
 239              		.loc 1 227 0
 240 00f6 354B     		ldr	r3, .L16+60
 241 00f8 344A     		ldr	r2, .L16+60
 242 00fa 1168     		ldr	r1, [r2]
 243 00fc FA68     		ldr	r2, [r7, #12]
 244 00fe 0120     		mov	r0, #1
 245 0100 041C     		mov	r4, r0
 246 0102 9440     		lsl	r4, r4, r2
 247 0104 221C     		mov	r2, r4
 248 0106 92B2     		uxth	r2, r2
 249 0108 0A43     		orr	r2, r1
 250 010a 1A60     		str	r2, [r3]
 251              	.L8:
 228:.\Generated_Source\PSoC4/ADC.c ****             }
 229:.\Generated_Source\PSoC4/ADC.c ****         }
 230:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 231:.\Generated_Source\PSoC4/ADC.c ****             else
 232:.\Generated_Source\PSoC4/ADC.c ****             {
 233:.\Generated_Source\PSoC4/ADC.c ****                 CY_SET_REG32(ADC_SAR_INJ_CHAN_CONFIG_PTR, tmpRegVal | ADC_INJ_TAILGATING);
 234:.\Generated_Source\PSoC4/ADC.c **** 
 235:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_SATURATE_EN_MASK) != 0u)
 236:.\Generated_Source\PSoC4/ADC.c ****                 {
 237:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_SATURATE_MASK;
 238:.\Generated_Source\PSoC4/ADC.c ****                 }
 239:.\Generated_Source\PSoC4/ADC.c **** 
 240:.\Generated_Source\PSoC4/ADC.c ****                 if((ADC_channelsConfig[chNum] & ADC_IS_RANGE_CTRL_EN_MASK) != 0u)
 241:.\Generated_Source\PSoC4/ADC.c ****                 {
 242:.\Generated_Source\PSoC4/ADC.c ****                     ADC_SAR_INTR_MASK_REG |= ADC_INJ_RANGE_MASK;
 243:.\Generated_Source\PSoC4/ADC.c ****                 }
 244:.\Generated_Source\PSoC4/ADC.c ****             }
 245:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 246:.\Generated_Source\PSoC4/ADC.c **** 
 247:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_ALT_RESOLUTION_ON) != 0u)
 252              		.loc 1 247 0
 253 010c 344B     		ldr	r3, .L16+80
 254 010e FA68     		ldr	r2, [r7, #12]
 255 0110 9200     		lsl	r2, r2, #2
 256 0112 D258     		ldr	r2, [r2, r3]
 257 0114 8023     		mov	r3, #128
 258 0116 9B00     		lsl	r3, r3, #2
 259 0118 1340     		and	r3, r2
 260 011a 03D0     		beq	.L9
 248:.\Generated_Source\PSoC4/ADC.c ****         {
 249:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_DEFAULT_MAX_WRK_ALT;
 261              		.loc 1 249 0
 262 011c 8023     		mov	r3, #128
 263 011e 5B00     		lsl	r3, r3, #1
 264 0120 BB60     		str	r3, [r7, #8]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 10


 265 0122 02E0     		b	.L10
 266              	.L9:
 250:.\Generated_Source\PSoC4/ADC.c ****         }
 251:.\Generated_Source\PSoC4/ADC.c ****         else
 252:.\Generated_Source\PSoC4/ADC.c ****         {
 253:.\Generated_Source\PSoC4/ADC.c ****                counts = (int32)ADC_SAR_WRK_MAX_12BIT;
 267              		.loc 1 253 0
 268 0124 8023     		mov	r3, #128
 269 0126 5B01     		lsl	r3, r3, #5
 270 0128 BB60     		str	r3, [r7, #8]
 271              	.L10:
 254:.\Generated_Source\PSoC4/ADC.c ****         }
 255:.\Generated_Source\PSoC4/ADC.c **** 
 256:.\Generated_Source\PSoC4/ADC.c ****         if((ADC_channelsConfig[chNum] & ADC_DIFFERENTIAL_EN) == 0u)
 272              		.loc 1 256 0
 273 012a 2D4B     		ldr	r3, .L16+80
 274 012c FA68     		ldr	r2, [r7, #12]
 275 012e 9200     		lsl	r2, r2, #2
 276 0130 D258     		ldr	r2, [r2, r3]
 277 0132 8023     		mov	r3, #128
 278 0134 5B00     		lsl	r3, r3, #1
 279 0136 1340     		and	r3, r2
 280 0138 05D1     		bne	.L11
 257:.\Generated_Source\PSoC4/ADC.c ****         {
 258:.\Generated_Source\PSoC4/ADC.c ****             #if((ADC_DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED) && \
 259:.\Generated_Source\PSoC4/ADC.c ****                 (ADC_DEFAULT_NEG_INPUT_SEL == ADC__VREF))
 260:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the minus half scale to convert results to unsigned format */
 261:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / -2);
 262:.\Generated_Source\PSoC4/ADC.c ****             #else
 263:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 281              		.loc 1 263 0
 282 013a 2C4B     		ldr	r3, .L16+92
 283 013c FA68     		ldr	r2, [r7, #12]
 284 013e 5200     		lsl	r2, r2, #1
 285 0140 0021     		mov	r1, #0
 286 0142 D152     		strh	r1, [r2, r3]
 287 0144 09E0     		b	.L12
 288              	.L11:
 264:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end DEFAULT_SE_RESULT_FORMAT_SEL == ADC__FSIGNED */
 265:.\Generated_Source\PSoC4/ADC.c ****         }
 266:.\Generated_Source\PSoC4/ADC.c ****         else    /* Differential channel */
 267:.\Generated_Source\PSoC4/ADC.c ****         {
 268:.\Generated_Source\PSoC4/ADC.c ****             #if(ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED)
 269:.\Generated_Source\PSoC4/ADC.c ****                 /* Set offset to the half scale to convert results to signed format */
 270:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = (int16)(counts / 2);
 289              		.loc 1 270 0
 290 0146 BB68     		ldr	r3, [r7, #8]
 291 0148 002B     		cmp	r3, #0
 292 014a 00DA     		bge	.L13
 293 014c 0133     		add	r3, r3, #1
 294              	.L13:
 295 014e 5B10     		asr	r3, r3, #1
 296 0150 99B2     		uxth	r1, r3
 297 0152 264B     		ldr	r3, .L16+92
 298 0154 FA68     		ldr	r2, [r7, #12]
 299 0156 5200     		lsl	r2, r2, #1
 300 0158 D152     		strh	r1, [r2, r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 11


 301              	.L12:
 271:.\Generated_Source\PSoC4/ADC.c ****             #else
 272:.\Generated_Source\PSoC4/ADC.c ****                 ADC_offset[chNum] = 0;
 273:.\Generated_Source\PSoC4/ADC.c ****             #endif /* end ADC_DEFAULT_DIFF_RESULT_FORMAT_SEL == ADC__FUNSIGNED */
 274:.\Generated_Source\PSoC4/ADC.c ****         }
 275:.\Generated_Source\PSoC4/ADC.c ****         /* Calculate gain in counts per 10 volts with rounding */
 276:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 302              		.loc 1 276 0
 303 015a BB68     		ldr	r3, [r7, #8]
 304 015c 244A     		ldr	r2, .L16+96
 305 015e 5343     		mul	r3, r2
 306 0160 8022     		mov	r2, #128
 307 0162 D200     		lsl	r2, r2, #3
 308 0164 9B18     		add	r3, r3, r2
 277:.\Generated_Source\PSoC4/ADC.c ****                             ADC_DEFAULT_VREF_MV_VALUE) / (ADC_DEFAULT_VREF_MV_VALUE * 2));
 309              		.loc 1 277 0
 310 0166 002B     		cmp	r3, #0
 311 0168 01DA     		bge	.L14
 312 016a 224C     		ldr	r4, .L16+100
 313 016c 1B19     		add	r3, r3, r4
 314              	.L14:
 315 016e DB12     		asr	r3, r3, #11
 276:.\Generated_Source\PSoC4/ADC.c ****         ADC_countsPer10Volt[chNum] = (int16)(((counts * ADC_10MV_COUNTS) +
 316              		.loc 1 276 0
 317 0170 9BB2     		uxth	r3, r3
 318 0172 19B2     		sxth	r1, r3
 319 0174 204B     		ldr	r3, .L16+104
 320 0176 FA68     		ldr	r2, [r7, #12]
 321 0178 9200     		lsl	r2, r2, #2
 322 017a D150     		str	r1, [r2, r3]
 197:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 323              		.loc 1 197 0
 324 017c FB68     		ldr	r3, [r7, #12]
 325 017e 0133     		add	r3, r3, #1
 326 0180 FB60     		str	r3, [r7, #12]
 327              	.L6:
 197:.\Generated_Source\PSoC4/ADC.c ****     for(chNum = 0u; chNum < ADC_TOTAL_CHANNELS_NUM; chNum++)
 328              		.loc 1 197 0 is_stmt 0 discriminator 1
 329 0182 FB68     		ldr	r3, [r7, #12]
 330 0184 012B     		cmp	r3, #1
 331 0186 88D9     		bls	.L15
 278:.\Generated_Source\PSoC4/ADC.c ****     }
 279:.\Generated_Source\PSoC4/ADC.c **** }
 332              		.loc 1 279 0 is_stmt 1
 333 0188 BD46     		mov	sp, r7
 334 018a 05B0     		add	sp, sp, #20
 335              		@ sp needed
 336 018c 90BD     		pop	{r4, r7, pc}
 337              	.L17:
 338 018e C046     		.align	2
 339              	.L16:
 340 0190 00000000 		.word	ADC_ISR
 341 0194 20001A40 		.word	1075445792
 342 0198 00001A40 		.word	1075445760
 343 019c 40200013 		.word	318775360
 344 01a0 04001A40 		.word	1075445764
 345 01a4 84000080 		.word	-2147483516
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 12


 346 01a8 18001A40 		.word	1075445784
 347 01ac 0000FF07 		.word	134152192
 348 01b0 1C001A40 		.word	1075445788
 349 01b4 10001A40 		.word	1075445776
 350 01b8 02000200 		.word	131074
 351 01bc 14001A40 		.word	1075445780
 352 01c0 00031A40 		.word	1075446528
 353 01c4 40031A40 		.word	1075446592
 354 01c8 28021A40 		.word	1075446312
 355 01cc 38021A40 		.word	1075446328
 356 01d0 18021A40 		.word	1075446296
 357 01d4 000F1A40 		.word	1075449600
 358 01d8 30001A40 		.word	1075445808
 359 01dc FFFFFFDF 		.word	-536870913
 360 01e0 00000000 		.word	ADC_channelsConfig
 361 01e4 08000000 		.word	ADC_InputsPlacement.4717
 362 01e8 80001A40 		.word	1075445888
 363 01ec 00000000 		.word	ADC_offset
 364 01f0 10270000 		.word	10000
 365 01f4 FF070000 		.word	2047
 366 01f8 00000000 		.word	ADC_countsPer10Volt
 367              		.cfi_endproc
 368              	.LFE1:
 369              		.size	ADC_Init, .-ADC_Init
 370              		.section	.text.ADC_Enable,"ax",%progbits
 371              		.align	2
 372              		.global	ADC_Enable
 373              		.code	16
 374              		.thumb_func
 375              		.type	ADC_Enable, %function
 376              	ADC_Enable:
 377              	.LFB2:
 280:.\Generated_Source\PSoC4/ADC.c **** 
 281:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 282:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SAR_1_Enable
 283:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 284:.\Generated_Source\PSoC4/ADC.c **** *
 285:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 286:.\Generated_Source\PSoC4/ADC.c **** *  Enables the clock and analog power for SAR ADC.
 287:.\Generated_Source\PSoC4/ADC.c **** *
 288:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 289:.\Generated_Source\PSoC4/ADC.c **** *  None.
 290:.\Generated_Source\PSoC4/ADC.c **** *
 291:.\Generated_Source\PSoC4/ADC.c **** * Return:
 292:.\Generated_Source\PSoC4/ADC.c **** *  None.
 293:.\Generated_Source\PSoC4/ADC.c **** *
 294:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 295:.\Generated_Source\PSoC4/ADC.c **** void ADC_Enable(void)
 296:.\Generated_Source\PSoC4/ADC.c **** {
 378              		.loc 1 296 0
 379              		.cfi_startproc
 380 0000 80B5     		push	{r7, lr}
 381              		.cfi_def_cfa_offset 8
 382              		.cfi_offset 7, -8
 383              		.cfi_offset 14, -4
 384 0002 00AF     		add	r7, sp, #0
 385              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 13


 297:.\Generated_Source\PSoC4/ADC.c ****     if (0u == (ADC_SAR_CTRL_REG & ADC_ENABLE))
 386              		.loc 1 297 0
 387 0004 074B     		ldr	r3, .L20
 388 0006 1B68     		ldr	r3, [r3]
 389 0008 002B     		cmp	r3, #0
 390 000a 09DB     		blt	.L18
 298:.\Generated_Source\PSoC4/ADC.c ****     {
 299:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_PSOC4)
 300:.\Generated_Source\PSoC4/ADC.c **** 
 301:.\Generated_Source\PSoC4/ADC.c ****             while (0u != (ADC_SAR_STATUS_REG & ADC_STATUS_BUSY))
 302:.\Generated_Source\PSoC4/ADC.c ****             {
 303:.\Generated_Source\PSoC4/ADC.c ****                 /* wait for SAR to go idle for to avoid deadlock */
 304:.\Generated_Source\PSoC4/ADC.c ****             }
 305:.\Generated_Source\PSoC4/ADC.c ****         #endif /* (ADC_CY_SAR_IP_VER != ADC_CY_SAR_IP_PSOC4) */
 306:.\Generated_Source\PSoC4/ADC.c ****         
 307:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_CTRL_REG |= ADC_ENABLE;
 391              		.loc 1 307 0
 392 000c 054B     		ldr	r3, .L20
 393 000e 054A     		ldr	r2, .L20
 394 0010 1268     		ldr	r2, [r2]
 395 0012 8021     		mov	r1, #128
 396 0014 0906     		lsl	r1, r1, #24
 397 0016 0A43     		orr	r2, r1
 398 0018 1A60     		str	r2, [r3]
 308:.\Generated_Source\PSoC4/ADC.c ****         
 309:.\Generated_Source\PSoC4/ADC.c ****         /* The block is ready to use 10 us after the enable signal is set high. */
 310:.\Generated_Source\PSoC4/ADC.c ****         CyDelayUs(ADC_10US_DELAY);         
 399              		.loc 1 310 0
 400 001a 0A20     		mov	r0, #10
 401 001c FFF7FEFF 		bl	CyDelayUs
 402              	.L18:
 311:.\Generated_Source\PSoC4/ADC.c ****     }
 312:.\Generated_Source\PSoC4/ADC.c **** }
 403              		.loc 1 312 0
 404 0020 BD46     		mov	sp, r7
 405              		@ sp needed
 406 0022 80BD     		pop	{r7, pc}
 407              	.L21:
 408              		.align	2
 409              	.L20:
 410 0024 00001A40 		.word	1075445760
 411              		.cfi_endproc
 412              	.LFE2:
 413              		.size	ADC_Enable, .-ADC_Enable
 414              		.section	.text.ADC_Stop,"ax",%progbits
 415              		.align	2
 416              		.global	ADC_Stop
 417              		.code	16
 418              		.thumb_func
 419              		.type	ADC_Stop, %function
 420              	ADC_Stop:
 421              	.LFB3:
 313:.\Generated_Source\PSoC4/ADC.c **** 
 314:.\Generated_Source\PSoC4/ADC.c **** 
 315:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 316:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_Stop
 317:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 14


 318:.\Generated_Source\PSoC4/ADC.c **** *
 319:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 320:.\Generated_Source\PSoC4/ADC.c **** *  This function stops ADC conversions and puts the ADC into its lowest power
 321:.\Generated_Source\PSoC4/ADC.c **** *  mode.
 322:.\Generated_Source\PSoC4/ADC.c **** *
 323:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 324:.\Generated_Source\PSoC4/ADC.c **** *  None.
 325:.\Generated_Source\PSoC4/ADC.c **** *
 326:.\Generated_Source\PSoC4/ADC.c **** * Return:
 327:.\Generated_Source\PSoC4/ADC.c **** *  None.
 328:.\Generated_Source\PSoC4/ADC.c **** *
 329:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 330:.\Generated_Source\PSoC4/ADC.c **** void ADC_Stop(void)
 331:.\Generated_Source\PSoC4/ADC.c **** {
 422              		.loc 1 331 0
 423              		.cfi_startproc
 424 0000 80B5     		push	{r7, lr}
 425              		.cfi_def_cfa_offset 8
 426              		.cfi_offset 7, -8
 427              		.cfi_offset 14, -4
 428 0002 00AF     		add	r7, sp, #0
 429              		.cfi_def_cfa_register 7
 332:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CTRL_REG &= (uint32)~ADC_ENABLE;
 430              		.loc 1 332 0
 431 0004 034B     		ldr	r3, .L23
 432 0006 034A     		ldr	r2, .L23
 433 0008 1268     		ldr	r2, [r2]
 434 000a 5200     		lsl	r2, r2, #1
 435 000c 5208     		lsr	r2, r2, #1
 436 000e 1A60     		str	r2, [r3]
 333:.\Generated_Source\PSoC4/ADC.c **** }
 437              		.loc 1 333 0
 438 0010 BD46     		mov	sp, r7
 439              		@ sp needed
 440 0012 80BD     		pop	{r7, pc}
 441              	.L24:
 442              		.align	2
 443              	.L23:
 444 0014 00001A40 		.word	1075445760
 445              		.cfi_endproc
 446              	.LFE3:
 447              		.size	ADC_Stop, .-ADC_Stop
 448              		.section	.text.ADC_StartConvert,"ax",%progbits
 449              		.align	2
 450              		.global	ADC_StartConvert
 451              		.code	16
 452              		.thumb_func
 453              		.type	ADC_StartConvert, %function
 454              	ADC_StartConvert:
 455              	.LFB4:
 334:.\Generated_Source\PSoC4/ADC.c **** 
 335:.\Generated_Source\PSoC4/ADC.c **** 
 336:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 337:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StartConvert
 338:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 339:.\Generated_Source\PSoC4/ADC.c **** *
 340:.\Generated_Source\PSoC4/ADC.c **** * Summary:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 15


 341:.\Generated_Source\PSoC4/ADC.c **** *  Description:
 342:.\Generated_Source\PSoC4/ADC.c **** *  For free running mode, this API starts the conversion process and it
 343:.\Generated_Source\PSoC4/ADC.c **** *  runs continuously.
 344:.\Generated_Source\PSoC4/ADC.c **** *
 345:.\Generated_Source\PSoC4/ADC.c **** *  In a triggered mode, this routine triggers every conversion by
 346:.\Generated_Source\PSoC4/ADC.c **** *  writing into the FW_TRIGGER bit in SAR_START_CTRL reg. In triggered mode,
 347:.\Generated_Source\PSoC4/ADC.c **** *  every conversion has to start by this API.
 348:.\Generated_Source\PSoC4/ADC.c **** *
 349:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 350:.\Generated_Source\PSoC4/ADC.c **** *  None.
 351:.\Generated_Source\PSoC4/ADC.c **** *
 352:.\Generated_Source\PSoC4/ADC.c **** * Return:
 353:.\Generated_Source\PSoC4/ADC.c **** *  None.
 354:.\Generated_Source\PSoC4/ADC.c **** *
 355:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 356:.\Generated_Source\PSoC4/ADC.c **** void ADC_StartConvert(void)
 357:.\Generated_Source\PSoC4/ADC.c **** {
 456              		.loc 1 357 0
 457              		.cfi_startproc
 458 0000 80B5     		push	{r7, lr}
 459              		.cfi_def_cfa_offset 8
 460              		.cfi_offset 7, -8
 461              		.cfi_offset 14, -4
 462 0002 00AF     		add	r7, sp, #0
 463              		.cfi_def_cfa_register 7
 358:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 359:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG |= ADC_CONTINUOUS_EN;
 464              		.loc 1 359 0
 465 0004 044B     		ldr	r3, .L26
 466 0006 044A     		ldr	r2, .L26
 467 0008 1268     		ldr	r2, [r2]
 468 000a 8021     		mov	r1, #128
 469 000c 4902     		lsl	r1, r1, #9
 470 000e 0A43     		orr	r2, r1
 471 0010 1A60     		str	r2, [r3]
 360:.\Generated_Source\PSoC4/ADC.c ****     #else /* Firmware trigger */
 361:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_START_CTRL_REG = ADC_FW_TRIGGER;
 362:.\Generated_Source\PSoC4/ADC.c ****     #endif /* End ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 363:.\Generated_Source\PSoC4/ADC.c **** 
 364:.\Generated_Source\PSoC4/ADC.c **** }
 472              		.loc 1 364 0
 473 0012 BD46     		mov	sp, r7
 474              		@ sp needed
 475 0014 80BD     		pop	{r7, pc}
 476              	.L27:
 477 0016 C046     		.align	2
 478              	.L26:
 479 0018 04001A40 		.word	1075445764
 480              		.cfi_endproc
 481              	.LFE4:
 482              		.size	ADC_StartConvert, .-ADC_StartConvert
 483              		.section	.text.ADC_StopConvert,"ax",%progbits
 484              		.align	2
 485              		.global	ADC_StopConvert
 486              		.code	16
 487              		.thumb_func
 488              		.type	ADC_StopConvert, %function
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 16


 489              	ADC_StopConvert:
 490              	.LFB5:
 365:.\Generated_Source\PSoC4/ADC.c **** 
 366:.\Generated_Source\PSoC4/ADC.c **** 
 367:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 368:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_StopConvert
 369:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 370:.\Generated_Source\PSoC4/ADC.c **** *
 371:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 372:.\Generated_Source\PSoC4/ADC.c **** *  Forces the ADC to stop all conversions.
 373:.\Generated_Source\PSoC4/ADC.c **** *
 374:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 375:.\Generated_Source\PSoC4/ADC.c **** *  None.
 376:.\Generated_Source\PSoC4/ADC.c **** *
 377:.\Generated_Source\PSoC4/ADC.c **** * Return:
 378:.\Generated_Source\PSoC4/ADC.c **** *  None.
 379:.\Generated_Source\PSoC4/ADC.c **** *
 380:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 381:.\Generated_Source\PSoC4/ADC.c **** void ADC_StopConvert(void)
 382:.\Generated_Source\PSoC4/ADC.c **** {
 491              		.loc 1 382 0
 492              		.cfi_startproc
 493 0000 80B5     		push	{r7, lr}
 494              		.cfi_def_cfa_offset 8
 495              		.cfi_offset 7, -8
 496              		.cfi_offset 14, -4
 497 0002 00AF     		add	r7, sp, #0
 498              		.cfi_def_cfa_register 7
 383:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_DEFAULT_SAMPLE_MODE_SEL == ADC__FREERUNNING)
 384:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_SAMPLE_CTRL_REG &= (uint32)(~ADC_CONTINUOUS_EN);
 499              		.loc 1 384 0
 500 0004 034B     		ldr	r3, .L29
 501 0006 034A     		ldr	r2, .L29
 502 0008 1168     		ldr	r1, [r2]
 503 000a 034A     		ldr	r2, .L29+4
 504 000c 0A40     		and	r2, r1
 505 000e 1A60     		str	r2, [r3]
 385:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_DEFAULT_SAMPLE_MODE == ADC__FREERUNNING */
 386:.\Generated_Source\PSoC4/ADC.c **** }
 506              		.loc 1 386 0
 507 0010 BD46     		mov	sp, r7
 508              		@ sp needed
 509 0012 80BD     		pop	{r7, pc}
 510              	.L30:
 511              		.align	2
 512              	.L29:
 513 0014 04001A40 		.word	1075445764
 514 0018 FFFFFEFF 		.word	-65537
 515              		.cfi_endproc
 516              	.LFE5:
 517              		.size	ADC_StopConvert, .-ADC_StopConvert
 518              		.section	.text.ADC_IsEndConversion,"ax",%progbits
 519              		.align	2
 520              		.global	ADC_IsEndConversion
 521              		.code	16
 522              		.thumb_func
 523              		.type	ADC_IsEndConversion, %function
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 17


 524              	ADC_IsEndConversion:
 525              	.LFB6:
 387:.\Generated_Source\PSoC4/ADC.c **** 
 388:.\Generated_Source\PSoC4/ADC.c **** 
 389:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 390:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_IsEndConversion
 391:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 392:.\Generated_Source\PSoC4/ADC.c **** *
 393:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 394:.\Generated_Source\PSoC4/ADC.c **** *  Description: Checks for ADC end of conversion for the case one
 395:.\Generated_Source\PSoC4/ADC.c **** *  channel and end of scan for the case of multiple channels. It acts
 396:.\Generated_Source\PSoC4/ADC.c **** *  as a software version of the EOC. This function provides the
 397:.\Generated_Source\PSoC4/ADC.c **** *  programmer with two options. In one mode this function
 398:.\Generated_Source\PSoC4/ADC.c **** *  immediately returns with the conversion status. In the other mode,
 399:.\Generated_Source\PSoC4/ADC.c **** *  the function does not return (blocking) until the conversion has
 400:.\Generated_Source\PSoC4/ADC.c **** *  completed.
 401:.\Generated_Source\PSoC4/ADC.c **** *
 402:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 403:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS        -> Immediately returns conversion result status
 404:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT      -> Does not return until ADC complete
 405:.\Generated_Source\PSoC4/ADC.c **** *  ADC_RETURN_STATUS_INJ    -> Immediately returns conversion result status
 406:.\Generated_Source\PSoC4/ADC.c **** *                              for injection channel
 407:.\Generated_Source\PSoC4/ADC.c **** *  ADC_WAIT_FOR_RESULT_INJ  -> Does not return until ADC completes injection
 408:.\Generated_Source\PSoC4/ADC.c **** *                              channel conversion
 409:.\Generated_Source\PSoC4/ADC.c **** *
 410:.\Generated_Source\PSoC4/ADC.c **** * Return:
 411:.\Generated_Source\PSoC4/ADC.c **** *  If a non-zero value is returned, the last conversion or scan has completed.
 412:.\Generated_Source\PSoC4/ADC.c **** *  If the returned value is zero, the ADC is still in the process of a scan.
 413:.\Generated_Source\PSoC4/ADC.c **** *
 414:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 415:.\Generated_Source\PSoC4/ADC.c **** uint32 ADC_IsEndConversion(uint32 retMode)
 416:.\Generated_Source\PSoC4/ADC.c **** {
 526              		.loc 1 416 0
 527              		.cfi_startproc
 528 0000 80B5     		push	{r7, lr}
 529              		.cfi_def_cfa_offset 8
 530              		.cfi_offset 7, -8
 531              		.cfi_offset 14, -4
 532 0002 84B0     		sub	sp, sp, #16
 533              		.cfi_def_cfa_offset 24
 534 0004 00AF     		add	r7, sp, #0
 535              		.cfi_def_cfa_register 7
 536 0006 7860     		str	r0, [r7, #4]
 417:.\Generated_Source\PSoC4/ADC.c ****     uint32 status = 0u;
 537              		.loc 1 417 0
 538 0008 0023     		mov	r3, #0
 539 000a FB60     		str	r3, [r7, #12]
 418:.\Generated_Source\PSoC4/ADC.c **** 
 419:.\Generated_Source\PSoC4/ADC.c ****     if((retMode & (ADC_RETURN_STATUS | ADC_WAIT_FOR_RESULT)) != 0u)
 540              		.loc 1 419 0
 541 000c 7A68     		ldr	r2, [r7, #4]
 542 000e 0323     		mov	r3, #3
 543 0010 1340     		and	r3, r2
 544 0012 11D0     		beq	.L32
 545              	.L34:
 420:.\Generated_Source\PSoC4/ADC.c ****     {
 421:.\Generated_Source\PSoC4/ADC.c ****         do
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 18


 422:.\Generated_Source\PSoC4/ADC.c ****         {
 423:.\Generated_Source\PSoC4/ADC.c ****             status = ADC_SAR_INTR_REG & ADC_EOS_MASK;
 546              		.loc 1 423 0 discriminator 1
 547 0014 0B4B     		ldr	r3, .L36
 548 0016 1A68     		ldr	r2, [r3]
 549 0018 0123     		mov	r3, #1
 550 001a 1340     		and	r3, r2
 551 001c FB60     		str	r3, [r7, #12]
 424:.\Generated_Source\PSoC4/ADC.c ****         }while((status == 0u) && ((retMode & ADC_WAIT_FOR_RESULT) != 0u));
 552              		.loc 1 424 0 discriminator 1
 553 001e FB68     		ldr	r3, [r7, #12]
 554 0020 002B     		cmp	r3, #0
 555 0022 03D1     		bne	.L33
 556 0024 7A68     		ldr	r2, [r7, #4]
 557 0026 0223     		mov	r3, #2
 558 0028 1340     		and	r3, r2
 559 002a F3D1     		bne	.L34
 560              	.L33:
 425:.\Generated_Source\PSoC4/ADC.c **** 
 426:.\Generated_Source\PSoC4/ADC.c ****         if(status != 0u)
 561              		.loc 1 426 0
 562 002c FB68     		ldr	r3, [r7, #12]
 563 002e 002B     		cmp	r3, #0
 564 0030 02D0     		beq	.L32
 427:.\Generated_Source\PSoC4/ADC.c ****         {
 428:.\Generated_Source\PSoC4/ADC.c ****             /* Clear EOS bit */
 429:.\Generated_Source\PSoC4/ADC.c ****             ADC_SAR_INTR_REG = ADC_EOS_MASK;
 565              		.loc 1 429 0
 566 0032 044B     		ldr	r3, .L36
 567 0034 0122     		mov	r2, #1
 568 0036 1A60     		str	r2, [r3]
 569              	.L32:
 430:.\Generated_Source\PSoC4/ADC.c ****         }
 431:.\Generated_Source\PSoC4/ADC.c ****     }
 432:.\Generated_Source\PSoC4/ADC.c **** 
 433:.\Generated_Source\PSoC4/ADC.c ****     #if(ADC_INJ_CHANNEL_ENABLED)
 434:.\Generated_Source\PSoC4/ADC.c ****         if((retMode & (ADC_RETURN_STATUS_INJ | ADC_WAIT_FOR_RESULT_INJ)) != 0u)
 435:.\Generated_Source\PSoC4/ADC.c ****         {
 436:.\Generated_Source\PSoC4/ADC.c ****             do
 437:.\Generated_Source\PSoC4/ADC.c ****             {
 438:.\Generated_Source\PSoC4/ADC.c ****                 status |= ADC_SAR_INTR_REG & ADC_INJ_EOC_MASK;
 439:.\Generated_Source\PSoC4/ADC.c ****             }while(((status & ADC_INJ_EOC_MASK) == 0u) &&
 440:.\Generated_Source\PSoC4/ADC.c ****                    ((retMode & ADC_WAIT_FOR_RESULT_INJ) != 0u));
 441:.\Generated_Source\PSoC4/ADC.c **** 
 442:.\Generated_Source\PSoC4/ADC.c ****             if((status & ADC_INJ_EOC_MASK) != 0u)
 443:.\Generated_Source\PSoC4/ADC.c ****             {
 444:.\Generated_Source\PSoC4/ADC.c ****                 /* Clear Injection EOS bit */
 445:.\Generated_Source\PSoC4/ADC.c ****                 ADC_SAR_INTR_REG = ADC_INJ_EOC_MASK;
 446:.\Generated_Source\PSoC4/ADC.c ****             }
 447:.\Generated_Source\PSoC4/ADC.c ****         }
 448:.\Generated_Source\PSoC4/ADC.c ****     #endif /* ADC_INJ_CHANNEL_ENABLED */
 449:.\Generated_Source\PSoC4/ADC.c **** 
 450:.\Generated_Source\PSoC4/ADC.c ****     return (status);
 570              		.loc 1 450 0
 571 0038 FB68     		ldr	r3, [r7, #12]
 451:.\Generated_Source\PSoC4/ADC.c **** }
 572              		.loc 1 451 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 19


 573 003a 181C     		mov	r0, r3
 574 003c BD46     		mov	sp, r7
 575 003e 04B0     		add	sp, sp, #16
 576              		@ sp needed
 577 0040 80BD     		pop	{r7, pc}
 578              	.L37:
 579 0042 C046     		.align	2
 580              	.L36:
 581 0044 10021A40 		.word	1075446288
 582              		.cfi_endproc
 583              	.LFE6:
 584              		.size	ADC_IsEndConversion, .-ADC_IsEndConversion
 585              		.section	.text.ADC_GetResult16,"ax",%progbits
 586              		.align	2
 587              		.global	ADC_GetResult16
 588              		.code	16
 589              		.thumb_func
 590              		.type	ADC_GetResult16, %function
 591              	ADC_GetResult16:
 592              	.LFB7:
 452:.\Generated_Source\PSoC4/ADC.c **** 
 453:.\Generated_Source\PSoC4/ADC.c **** 
 454:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 455:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_GetResult16
 456:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 457:.\Generated_Source\PSoC4/ADC.c **** *
 458:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 459:.\Generated_Source\PSoC4/ADC.c **** *  Gets the data available in the SAR DATA register.
 460:.\Generated_Source\PSoC4/ADC.c **** *
 461:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 462:.\Generated_Source\PSoC4/ADC.c **** *  chan: The ADC channel in which to return the result. The first channel
 463:.\Generated_Source\PSoC4/ADC.c **** *  is 0 and the injection channel if enabled is the number of valid channels.
 464:.\Generated_Source\PSoC4/ADC.c **** *
 465:.\Generated_Source\PSoC4/ADC.c **** * Return:
 466:.\Generated_Source\PSoC4/ADC.c **** *  Returns converted data as a signed 16-bit integer
 467:.\Generated_Source\PSoC4/ADC.c **** *
 468:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 469:.\Generated_Source\PSoC4/ADC.c **** int16 ADC_GetResult16(uint32 chan)
 470:.\Generated_Source\PSoC4/ADC.c **** {
 593              		.loc 1 470 0
 594              		.cfi_startproc
 595 0000 80B5     		push	{r7, lr}
 596              		.cfi_def_cfa_offset 8
 597              		.cfi_offset 7, -8
 598              		.cfi_offset 14, -4
 599 0002 84B0     		sub	sp, sp, #16
 600              		.cfi_def_cfa_offset 24
 601 0004 00AF     		add	r7, sp, #0
 602              		.cfi_def_cfa_register 7
 603 0006 7860     		str	r0, [r7, #4]
 471:.\Generated_Source\PSoC4/ADC.c ****     uint32 result;
 472:.\Generated_Source\PSoC4/ADC.c **** 
 473:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 474:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 604              		.loc 1 474 0
 605 0008 7B68     		ldr	r3, [r7, #4]
 606 000a 012B     		cmp	r3, #1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 20


 607 000c 02D9     		bls	.L39
 608              		.loc 1 474 0 is_stmt 0 discriminator 1
 609 000e 0020     		mov	r0, #0
 610 0010 FFF7FEFF 		bl	CyHalt
 611              	.L39:
 475:.\Generated_Source\PSoC4/ADC.c **** 
 476:.\Generated_Source\PSoC4/ADC.c ****     if(chan < ADC_SEQUENCED_CHANNELS_NUM)
 612              		.loc 1 476 0 is_stmt 1
 613 0014 7B68     		ldr	r3, [r7, #4]
 614 0016 012B     		cmp	r3, #1
 615 0018 08D8     		bhi	.L40
 477:.\Generated_Source\PSoC4/ADC.c ****     {
 478:.\Generated_Source\PSoC4/ADC.c ****         result = CY_GET_REG32((reg32 *)(ADC_SAR_CHAN_RESULT_IND + (uint32)(chan << 2u))) &
 616              		.loc 1 478 0
 617 001a 7B68     		ldr	r3, [r7, #4]
 618 001c 9B00     		lsl	r3, r3, #2
 619 001e 084A     		ldr	r2, .L43
 620 0020 9B18     		add	r3, r3, r2
 621 0022 1B68     		ldr	r3, [r3]
 622 0024 1B04     		lsl	r3, r3, #16
 623 0026 1B0C     		lsr	r3, r3, #16
 624 0028 FB60     		str	r3, [r7, #12]
 625 002a 01E0     		b	.L41
 626              	.L40:
 479:.\Generated_Source\PSoC4/ADC.c ****                 ADC_RESULT_MASK;
 480:.\Generated_Source\PSoC4/ADC.c ****     }
 481:.\Generated_Source\PSoC4/ADC.c ****     else
 482:.\Generated_Source\PSoC4/ADC.c ****     {
 483:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_INJ_CHANNEL_ENABLED)
 484:.\Generated_Source\PSoC4/ADC.c ****             result = ADC_SAR_INJ_RESULT_REG & ADC_RESULT_MASK;
 485:.\Generated_Source\PSoC4/ADC.c ****         #else
 486:.\Generated_Source\PSoC4/ADC.c ****             result = 0u;
 627              		.loc 1 486 0
 628 002c 0023     		mov	r3, #0
 629 002e FB60     		str	r3, [r7, #12]
 630              	.L41:
 487:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_INJ_CHANNEL_ENABLED */
 488:.\Generated_Source\PSoC4/ADC.c ****     }
 489:.\Generated_Source\PSoC4/ADC.c **** 
 490:.\Generated_Source\PSoC4/ADC.c ****     return ( (int16)result );
 631              		.loc 1 490 0
 632 0030 FB68     		ldr	r3, [r7, #12]
 633 0032 9BB2     		uxth	r3, r3
 634 0034 1BB2     		sxth	r3, r3
 491:.\Generated_Source\PSoC4/ADC.c **** }
 635              		.loc 1 491 0
 636 0036 181C     		mov	r0, r3
 637 0038 BD46     		mov	sp, r7
 638 003a 04B0     		add	sp, sp, #16
 639              		@ sp needed
 640 003c 80BD     		pop	{r7, pc}
 641              	.L44:
 642 003e C046     		.align	2
 643              	.L43:
 644 0040 80011A40 		.word	1075446144
 645              		.cfi_endproc
 646              	.LFE7:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 21


 647              		.size	ADC_GetResult16, .-ADC_GetResult16
 648              		.section	.text.ADC_SetChanMask,"ax",%progbits
 649              		.align	2
 650              		.global	ADC_SetChanMask
 651              		.code	16
 652              		.thumb_func
 653              		.type	ADC_SetChanMask, %function
 654              	ADC_SetChanMask:
 655              	.LFB8:
 492:.\Generated_Source\PSoC4/ADC.c **** 
 493:.\Generated_Source\PSoC4/ADC.c **** 
 494:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 495:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetChanMask
 496:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 497:.\Generated_Source\PSoC4/ADC.c **** *
 498:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 499:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel enable mask.
 500:.\Generated_Source\PSoC4/ADC.c **** *
 501:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 502:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that will be
 503:.\Generated_Source\PSoC4/ADC.c **** *  scanned. Setting bits for channels that do not exist will have no
 504:.\Generated_Source\PSoC4/ADC.c **** *  effect. For example, if only 6 channels were enabled, setting a
 505:.\Generated_Source\PSoC4/ADC.c **** *  mask of 0x0103 would only enable the last two channels (0 and 1).
 506:.\Generated_Source\PSoC4/ADC.c **** *  This API will not enable the injection channel.
 507:.\Generated_Source\PSoC4/ADC.c **** *  Examples: If the component is setup to sequence through 8
 508:.\Generated_Source\PSoC4/ADC.c **** *  channels, a mask of 0x000F would enable channels 0, 1, 2, and 3.
 509:.\Generated_Source\PSoC4/ADC.c **** *
 510:.\Generated_Source\PSoC4/ADC.c **** * Return:
 511:.\Generated_Source\PSoC4/ADC.c **** *  None.
 512:.\Generated_Source\PSoC4/ADC.c **** *
 513:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 514:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetChanMask(uint32 mask)
 515:.\Generated_Source\PSoC4/ADC.c **** {
 656              		.loc 1 515 0
 657              		.cfi_startproc
 658 0000 80B5     		push	{r7, lr}
 659              		.cfi_def_cfa_offset 8
 660              		.cfi_offset 7, -8
 661              		.cfi_offset 14, -4
 662 0002 82B0     		sub	sp, sp, #8
 663              		.cfi_def_cfa_offset 16
 664 0004 00AF     		add	r7, sp, #0
 665              		.cfi_def_cfa_register 7
 666 0006 7860     		str	r0, [r7, #4]
 516:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_CHAN_EN_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 667              		.loc 1 516 0
 668 0008 034B     		ldr	r3, .L46
 669 000a 7968     		ldr	r1, [r7, #4]
 670 000c 0322     		mov	r2, #3
 671 000e 0A40     		and	r2, r1
 672 0010 1A60     		str	r2, [r3]
 517:.\Generated_Source\PSoC4/ADC.c **** }
 673              		.loc 1 517 0
 674 0012 BD46     		mov	sp, r7
 675 0014 02B0     		add	sp, sp, #8
 676              		@ sp needed
 677 0016 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 22


 678              	.L47:
 679              		.align	2
 680              	.L46:
 681 0018 20001A40 		.word	1075445792
 682              		.cfi_endproc
 683              	.LFE8:
 684              		.size	ADC_SetChanMask, .-ADC_SetChanMask
 685              		.section	.text.ADC_SetLowLimit,"ax",%progbits
 686              		.align	2
 687              		.global	ADC_SetLowLimit
 688              		.code	16
 689              		.thumb_func
 690              		.type	ADC_SetLowLimit, %function
 691              	ADC_SetLowLimit:
 692              	.LFB9:
 518:.\Generated_Source\PSoC4/ADC.c **** 
 519:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_INJ_CHANNEL_ENABLED)
 520:.\Generated_Source\PSoC4/ADC.c **** 
 521:.\Generated_Source\PSoC4/ADC.c **** 
 522:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 523:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_EnableInjection
 524:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 525:.\Generated_Source\PSoC4/ADC.c ****     *
 526:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 527:.\Generated_Source\PSoC4/ADC.c ****     *  Enables the injection channel for the next scan only.
 528:.\Generated_Source\PSoC4/ADC.c ****     *
 529:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 530:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 531:.\Generated_Source\PSoC4/ADC.c ****     *
 532:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 533:.\Generated_Source\PSoC4/ADC.c ****     *  None.
 534:.\Generated_Source\PSoC4/ADC.c ****     *
 535:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 536:.\Generated_Source\PSoC4/ADC.c ****     void ADC_EnableInjection(void)
 537:.\Generated_Source\PSoC4/ADC.c ****     {
 538:.\Generated_Source\PSoC4/ADC.c ****         ADC_SAR_INJ_CHAN_CONFIG_REG |= ADC_INJ_CHAN_EN;
 539:.\Generated_Source\PSoC4/ADC.c ****     }
 540:.\Generated_Source\PSoC4/ADC.c **** 
 541:.\Generated_Source\PSoC4/ADC.c **** #endif /* ADC_INJ_CHANNEL_ENABLED */
 542:.\Generated_Source\PSoC4/ADC.c **** 
 543:.\Generated_Source\PSoC4/ADC.c **** 
 544:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 545:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLowLimit
 546:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 547:.\Generated_Source\PSoC4/ADC.c **** *
 548:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 549:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 550:.\Generated_Source\PSoC4/ADC.c **** *
 551:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 552:.\Generated_Source\PSoC4/ADC.c **** *  lowLimit: The low limit for a limit condition.
 553:.\Generated_Source\PSoC4/ADC.c **** *
 554:.\Generated_Source\PSoC4/ADC.c **** * Return:
 555:.\Generated_Source\PSoC4/ADC.c **** *  None.
 556:.\Generated_Source\PSoC4/ADC.c **** *
 557:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 558:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLowLimit(uint32 lowLimit)
 559:.\Generated_Source\PSoC4/ADC.c **** {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 23


 693              		.loc 1 559 0
 694              		.cfi_startproc
 695 0000 80B5     		push	{r7, lr}
 696              		.cfi_def_cfa_offset 8
 697              		.cfi_offset 7, -8
 698              		.cfi_offset 14, -4
 699 0002 82B0     		sub	sp, sp, #8
 700              		.cfi_def_cfa_offset 16
 701 0004 00AF     		add	r7, sp, #0
 702              		.cfi_def_cfa_register 7
 703 0006 7860     		str	r0, [r7, #4]
 560:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_LOW_MASK);
 704              		.loc 1 560 0
 705 0008 084B     		ldr	r3, .L49
 706 000a 084A     		ldr	r2, .L49
 707 000c 1268     		ldr	r2, [r2]
 708 000e 120C     		lsr	r2, r2, #16
 709 0010 1204     		lsl	r2, r2, #16
 710 0012 1A60     		str	r2, [r3]
 561:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= lowLimit & ADC_RANGE_LOW_MASK;
 711              		.loc 1 561 0
 712 0014 054B     		ldr	r3, .L49
 713 0016 054A     		ldr	r2, .L49
 714 0018 1168     		ldr	r1, [r2]
 715 001a 7A68     		ldr	r2, [r7, #4]
 716 001c 1204     		lsl	r2, r2, #16
 717 001e 120C     		lsr	r2, r2, #16
 718 0020 0A43     		orr	r2, r1
 719 0022 1A60     		str	r2, [r3]
 562:.\Generated_Source\PSoC4/ADC.c **** }
 720              		.loc 1 562 0
 721 0024 BD46     		mov	sp, r7
 722 0026 02B0     		add	sp, sp, #8
 723              		@ sp needed
 724 0028 80BD     		pop	{r7, pc}
 725              	.L50:
 726 002a C046     		.align	2
 727              	.L49:
 728 002c 18001A40 		.word	1075445784
 729              		.cfi_endproc
 730              	.LFE9:
 731              		.size	ADC_SetLowLimit, .-ADC_SetLowLimit
 732              		.section	.text.ADC_SetHighLimit,"ax",%progbits
 733              		.align	2
 734              		.global	ADC_SetHighLimit
 735              		.code	16
 736              		.thumb_func
 737              		.type	ADC_SetHighLimit, %function
 738              	ADC_SetHighLimit:
 739              	.LFB10:
 563:.\Generated_Source\PSoC4/ADC.c **** 
 564:.\Generated_Source\PSoC4/ADC.c **** 
 565:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 566:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetHighLimit
 567:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 568:.\Generated_Source\PSoC4/ADC.c **** *
 569:.\Generated_Source\PSoC4/ADC.c **** * Summary:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 24


 570:.\Generated_Source\PSoC4/ADC.c **** *  Sets the low limit parameter for a limit condition.
 571:.\Generated_Source\PSoC4/ADC.c **** *
 572:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 573:.\Generated_Source\PSoC4/ADC.c **** *  highLimit: The high limit for a limit condition.
 574:.\Generated_Source\PSoC4/ADC.c **** *
 575:.\Generated_Source\PSoC4/ADC.c **** * Return:
 576:.\Generated_Source\PSoC4/ADC.c **** *  None.
 577:.\Generated_Source\PSoC4/ADC.c **** *
 578:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 579:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetHighLimit(uint32 highLimit)
 580:.\Generated_Source\PSoC4/ADC.c **** {
 740              		.loc 1 580 0
 741              		.cfi_startproc
 742 0000 80B5     		push	{r7, lr}
 743              		.cfi_def_cfa_offset 8
 744              		.cfi_offset 7, -8
 745              		.cfi_offset 14, -4
 746 0002 82B0     		sub	sp, sp, #8
 747              		.cfi_def_cfa_offset 16
 748 0004 00AF     		add	r7, sp, #0
 749              		.cfi_def_cfa_register 7
 750 0006 7860     		str	r0, [r7, #4]
 581:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG &= (uint32)(~ADC_RANGE_HIGH_MASK);
 751              		.loc 1 581 0
 752 0008 074B     		ldr	r3, .L52
 753 000a 074A     		ldr	r2, .L52
 754 000c 1268     		ldr	r2, [r2]
 755 000e 1204     		lsl	r2, r2, #16
 756 0010 120C     		lsr	r2, r2, #16
 757 0012 1A60     		str	r2, [r3]
 582:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_THRES_REG |= (uint32)(highLimit << ADC_RANGE_HIGH_OFFSET);
 758              		.loc 1 582 0
 759 0014 044B     		ldr	r3, .L52
 760 0016 044A     		ldr	r2, .L52
 761 0018 1168     		ldr	r1, [r2]
 762 001a 7A68     		ldr	r2, [r7, #4]
 763 001c 1204     		lsl	r2, r2, #16
 764 001e 0A43     		orr	r2, r1
 765 0020 1A60     		str	r2, [r3]
 583:.\Generated_Source\PSoC4/ADC.c **** }
 766              		.loc 1 583 0
 767 0022 BD46     		mov	sp, r7
 768 0024 02B0     		add	sp, sp, #8
 769              		@ sp needed
 770 0026 80BD     		pop	{r7, pc}
 771              	.L53:
 772              		.align	2
 773              	.L52:
 774 0028 18001A40 		.word	1075445784
 775              		.cfi_endproc
 776              	.LFE10:
 777              		.size	ADC_SetHighLimit, .-ADC_SetHighLimit
 778              		.section	.text.ADC_SetLimitMask,"ax",%progbits
 779              		.align	2
 780              		.global	ADC_SetLimitMask
 781              		.code	16
 782              		.thumb_func
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 25


 783              		.type	ADC_SetLimitMask, %function
 784              	ADC_SetLimitMask:
 785              	.LFB11:
 584:.\Generated_Source\PSoC4/ADC.c **** 
 585:.\Generated_Source\PSoC4/ADC.c **** 
 586:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 587:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetLimitMask
 588:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 589:.\Generated_Source\PSoC4/ADC.c **** *
 590:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 591:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel limit condition mask.
 592:.\Generated_Source\PSoC4/ADC.c **** *
 593:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 594:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 595:.\Generated_Source\PSoC4/ADC.c **** *  limit condition interrupt. Setting bits for channels that do not exist
 596:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 6 channels were enabled,
 597:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x0103 would only enable the last two channels (0 and 1).
 598:.\Generated_Source\PSoC4/ADC.c **** *
 599:.\Generated_Source\PSoC4/ADC.c **** * Return:
 600:.\Generated_Source\PSoC4/ADC.c **** *  None.
 601:.\Generated_Source\PSoC4/ADC.c **** *
 602:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 603:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetLimitMask(uint32 mask)
 604:.\Generated_Source\PSoC4/ADC.c **** {
 786              		.loc 1 604 0
 787              		.cfi_startproc
 788 0000 80B5     		push	{r7, lr}
 789              		.cfi_def_cfa_offset 8
 790              		.cfi_offset 7, -8
 791              		.cfi_offset 14, -4
 792 0002 82B0     		sub	sp, sp, #8
 793              		.cfi_def_cfa_offset 16
 794 0004 00AF     		add	r7, sp, #0
 795              		.cfi_def_cfa_register 7
 796 0006 7860     		str	r0, [r7, #4]
 605:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_RANGE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 797              		.loc 1 605 0
 798 0008 034B     		ldr	r3, .L55
 799 000a 7968     		ldr	r1, [r7, #4]
 800 000c 0322     		mov	r2, #3
 801 000e 0A40     		and	r2, r1
 802 0010 1A60     		str	r2, [r3]
 606:.\Generated_Source\PSoC4/ADC.c **** }
 803              		.loc 1 606 0
 804 0012 BD46     		mov	sp, r7
 805 0014 02B0     		add	sp, sp, #8
 806              		@ sp needed
 807 0016 80BD     		pop	{r7, pc}
 808              	.L56:
 809              		.align	2
 810              	.L55:
 811 0018 38021A40 		.word	1075446328
 812              		.cfi_endproc
 813              	.LFE11:
 814              		.size	ADC_SetLimitMask, .-ADC_SetLimitMask
 815              		.section	.text.ADC_SetSatMask,"ax",%progbits
 816              		.align	2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 26


 817              		.global	ADC_SetSatMask
 818              		.code	16
 819              		.thumb_func
 820              		.type	ADC_SetSatMask, %function
 821              	ADC_SetSatMask:
 822              	.LFB12:
 607:.\Generated_Source\PSoC4/ADC.c **** 
 608:.\Generated_Source\PSoC4/ADC.c **** 
 609:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 610:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetSatMask
 611:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 612:.\Generated_Source\PSoC4/ADC.c **** *
 613:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 614:.\Generated_Source\PSoC4/ADC.c **** *  Sets the channel saturation event mask.
 615:.\Generated_Source\PSoC4/ADC.c **** *
 616:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 617:.\Generated_Source\PSoC4/ADC.c **** *  mask: Sets which channels that may cause a
 618:.\Generated_Source\PSoC4/ADC.c **** *  saturation event interrupt. Setting bits for channels that do not exist
 619:.\Generated_Source\PSoC4/ADC.c **** *  will have no effect. For example, if only 8 channels were enabled,
 620:.\Generated_Source\PSoC4/ADC.c **** *  setting a mask of 0x01C0 would only enable two channels (6 and 7).
 621:.\Generated_Source\PSoC4/ADC.c **** *
 622:.\Generated_Source\PSoC4/ADC.c **** * Return:
 623:.\Generated_Source\PSoC4/ADC.c **** *  None.
 624:.\Generated_Source\PSoC4/ADC.c **** *
 625:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 626:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetSatMask(uint32 mask)
 627:.\Generated_Source\PSoC4/ADC.c **** {
 823              		.loc 1 627 0
 824              		.cfi_startproc
 825 0000 80B5     		push	{r7, lr}
 826              		.cfi_def_cfa_offset 8
 827              		.cfi_offset 7, -8
 828              		.cfi_offset 14, -4
 829 0002 82B0     		sub	sp, sp, #8
 830              		.cfi_def_cfa_offset 16
 831 0004 00AF     		add	r7, sp, #0
 832              		.cfi_def_cfa_register 7
 833 0006 7860     		str	r0, [r7, #4]
 628:.\Generated_Source\PSoC4/ADC.c ****     ADC_SAR_SATURATE_INTR_MASK_REG = mask & ADC_MAX_CHANNELS_EN_MASK;
 834              		.loc 1 628 0
 835 0008 034B     		ldr	r3, .L58
 836 000a 7968     		ldr	r1, [r7, #4]
 837 000c 0322     		mov	r2, #3
 838 000e 0A40     		and	r2, r1
 839 0010 1A60     		str	r2, [r3]
 629:.\Generated_Source\PSoC4/ADC.c **** }
 840              		.loc 1 629 0
 841 0012 BD46     		mov	sp, r7
 842 0014 02B0     		add	sp, sp, #8
 843              		@ sp needed
 844 0016 80BD     		pop	{r7, pc}
 845              	.L59:
 846              		.align	2
 847              	.L58:
 848 0018 28021A40 		.word	1075446312
 849              		.cfi_endproc
 850              	.LFE12:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 27


 851              		.size	ADC_SetSatMask, .-ADC_SetSatMask
 852              		.section	.text.ADC_SetOffset,"ax",%progbits
 853              		.align	2
 854              		.global	ADC_SetOffset
 855              		.code	16
 856              		.thumb_func
 857              		.type	ADC_SetOffset, %function
 858              	ADC_SetOffset:
 859              	.LFB13:
 630:.\Generated_Source\PSoC4/ADC.c **** 
 631:.\Generated_Source\PSoC4/ADC.c **** 
 632:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 633:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetOffset
 634:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 635:.\Generated_Source\PSoC4/ADC.c **** *
 636:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 637:.\Generated_Source\PSoC4/ADC.c **** *   Description: Sets the ADC offset which is used by the functions
 638:.\Generated_Source\PSoC4/ADC.c **** *   ADC_CountsTo_uVolts, ADC_CountsTo_mVolts and ADC_CountsTo_Volts
 639:.\Generated_Source\PSoC4/ADC.c **** *   to substract the offset from the given reading
 640:.\Generated_Source\PSoC4/ADC.c **** *   before calculating the voltage conversion.
 641:.\Generated_Source\PSoC4/ADC.c **** *
 642:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 643:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 644:.\Generated_Source\PSoC4/ADC.c **** *  offset: This value is a measured value when the
 645:.\Generated_Source\PSoC4/ADC.c **** *          inputs are shorted or connected to the same input voltage.
 646:.\Generated_Source\PSoC4/ADC.c **** *
 647:.\Generated_Source\PSoC4/ADC.c **** * Return:
 648:.\Generated_Source\PSoC4/ADC.c **** *  None.
 649:.\Generated_Source\PSoC4/ADC.c **** *
 650:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 651:.\Generated_Source\PSoC4/ADC.c **** *  ADC_Offset:  Modified to set the user provided offset.
 652:.\Generated_Source\PSoC4/ADC.c **** *
 653:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 654:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetOffset(uint32 chan, int16 offset)
 655:.\Generated_Source\PSoC4/ADC.c **** {
 860              		.loc 1 655 0
 861              		.cfi_startproc
 862 0000 80B5     		push	{r7, lr}
 863              		.cfi_def_cfa_offset 8
 864              		.cfi_offset 7, -8
 865              		.cfi_offset 14, -4
 866 0002 82B0     		sub	sp, sp, #8
 867              		.cfi_def_cfa_offset 16
 868 0004 00AF     		add	r7, sp, #0
 869              		.cfi_def_cfa_register 7
 870 0006 7860     		str	r0, [r7, #4]
 871 0008 0A1C     		mov	r2, r1
 872 000a BB1C     		add	r3, r7, #2
 873 000c 1A80     		strh	r2, [r3]
 656:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 657:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 874              		.loc 1 657 0
 875 000e 7B68     		ldr	r3, [r7, #4]
 876 0010 012B     		cmp	r3, #1
 877 0012 02D9     		bls	.L61
 878              		.loc 1 657 0 is_stmt 0 discriminator 1
 879 0014 0020     		mov	r0, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 28


 880 0016 FFF7FEFF 		bl	CyHalt
 881              	.L61:
 658:.\Generated_Source\PSoC4/ADC.c **** 
 659:.\Generated_Source\PSoC4/ADC.c ****     ADC_offset[chan] = offset;
 882              		.loc 1 659 0 is_stmt 1
 883 001a 044B     		ldr	r3, .L62
 884 001c 7A68     		ldr	r2, [r7, #4]
 885 001e 5200     		lsl	r2, r2, #1
 886 0020 B91C     		add	r1, r7, #2
 887 0022 0988     		ldrh	r1, [r1]
 888 0024 D152     		strh	r1, [r2, r3]
 660:.\Generated_Source\PSoC4/ADC.c **** }
 889              		.loc 1 660 0
 890 0026 BD46     		mov	sp, r7
 891 0028 02B0     		add	sp, sp, #8
 892              		@ sp needed
 893 002a 80BD     		pop	{r7, pc}
 894              	.L63:
 895              		.align	2
 896              	.L62:
 897 002c 00000000 		.word	ADC_offset
 898              		.cfi_endproc
 899              	.LFE13:
 900              		.size	ADC_SetOffset, .-ADC_SetOffset
 901              		.section	.text.ADC_SetGain,"ax",%progbits
 902              		.align	2
 903              		.global	ADC_SetGain
 904              		.code	16
 905              		.thumb_func
 906              		.type	ADC_SetGain, %function
 907              	ADC_SetGain:
 908              	.LFB14:
 661:.\Generated_Source\PSoC4/ADC.c **** 
 662:.\Generated_Source\PSoC4/ADC.c **** 
 663:.\Generated_Source\PSoC4/ADC.c **** /*******************************************************************************
 664:.\Generated_Source\PSoC4/ADC.c **** * Function Name: ADC_SetGain
 665:.\Generated_Source\PSoC4/ADC.c **** ********************************************************************************
 666:.\Generated_Source\PSoC4/ADC.c **** *
 667:.\Generated_Source\PSoC4/ADC.c **** * Summary:
 668:.\Generated_Source\PSoC4/ADC.c **** *  Description: Sets the ADC gain in counts per 10 volt for the voltage
 669:.\Generated_Source\PSoC4/ADC.c **** *  conversion functions below. This value is set by default by the
 670:.\Generated_Source\PSoC4/ADC.c **** *  reference and input range settings. It should only be used to further
 671:.\Generated_Source\PSoC4/ADC.c **** *  calibrate the ADC with a known input or if an external reference is
 672:.\Generated_Source\PSoC4/ADC.c **** *  used. Affects the ADC_CountsTo_uVolts, ADC_CountsTo_mVolts
 673:.\Generated_Source\PSoC4/ADC.c **** *  and ADC_CountsTo_Volts functions by supplying the correct
 674:.\Generated_Source\PSoC4/ADC.c **** *  conversion between ADC counts and voltage.
 675:.\Generated_Source\PSoC4/ADC.c **** *
 676:.\Generated_Source\PSoC4/ADC.c **** * Parameters:
 677:.\Generated_Source\PSoC4/ADC.c **** *  chan: ADC channel number.
 678:.\Generated_Source\PSoC4/ADC.c **** *  adcGain: ADC gain in counts per 10 volts.
 679:.\Generated_Source\PSoC4/ADC.c **** *
 680:.\Generated_Source\PSoC4/ADC.c **** * Return:
 681:.\Generated_Source\PSoC4/ADC.c **** *  None.
 682:.\Generated_Source\PSoC4/ADC.c **** *
 683:.\Generated_Source\PSoC4/ADC.c **** * Global variables:
 684:.\Generated_Source\PSoC4/ADC.c **** *  ADC_CountsPer10Volt:  modified to set the ADC gain in counts
 685:.\Generated_Source\PSoC4/ADC.c **** *   per 10 volt.
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 29


 686:.\Generated_Source\PSoC4/ADC.c **** *
 687:.\Generated_Source\PSoC4/ADC.c **** *******************************************************************************/
 688:.\Generated_Source\PSoC4/ADC.c **** void ADC_SetGain(uint32 chan, int32 adcGain)
 689:.\Generated_Source\PSoC4/ADC.c **** {
 909              		.loc 1 689 0
 910              		.cfi_startproc
 911 0000 80B5     		push	{r7, lr}
 912              		.cfi_def_cfa_offset 8
 913              		.cfi_offset 7, -8
 914              		.cfi_offset 14, -4
 915 0002 82B0     		sub	sp, sp, #8
 916              		.cfi_def_cfa_offset 16
 917 0004 00AF     		add	r7, sp, #0
 918              		.cfi_def_cfa_register 7
 919 0006 7860     		str	r0, [r7, #4]
 920 0008 3960     		str	r1, [r7]
 690:.\Generated_Source\PSoC4/ADC.c ****     /* Halt CPU in debug mode if channel is out of valid range */
 691:.\Generated_Source\PSoC4/ADC.c ****     CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 921              		.loc 1 691 0
 922 000a 7B68     		ldr	r3, [r7, #4]
 923 000c 012B     		cmp	r3, #1
 924 000e 02D9     		bls	.L65
 925              		.loc 1 691 0 is_stmt 0 discriminator 1
 926 0010 0020     		mov	r0, #0
 927 0012 FFF7FEFF 		bl	CyHalt
 928              	.L65:
 692:.\Generated_Source\PSoC4/ADC.c **** 
 693:.\Generated_Source\PSoC4/ADC.c ****     ADC_countsPer10Volt[chan] = adcGain;
 929              		.loc 1 693 0 is_stmt 1
 930 0016 044B     		ldr	r3, .L66
 931 0018 7A68     		ldr	r2, [r7, #4]
 932 001a 9200     		lsl	r2, r2, #2
 933 001c 3968     		ldr	r1, [r7]
 934 001e D150     		str	r1, [r2, r3]
 694:.\Generated_Source\PSoC4/ADC.c **** }
 935              		.loc 1 694 0
 936 0020 BD46     		mov	sp, r7
 937 0022 02B0     		add	sp, sp, #8
 938              		@ sp needed
 939 0024 80BD     		pop	{r7, pc}
 940              	.L67:
 941 0026 C046     		.align	2
 942              	.L66:
 943 0028 00000000 		.word	ADC_countsPer10Volt
 944              		.cfi_endproc
 945              	.LFE14:
 946              		.size	ADC_SetGain, .-ADC_SetGain
 947              		.global	__aeabi_idiv
 948              		.section	.text.ADC_CountsTo_mVolts,"ax",%progbits
 949              		.align	2
 950              		.global	ADC_CountsTo_mVolts
 951              		.code	16
 952              		.thumb_func
 953              		.type	ADC_CountsTo_mVolts, %function
 954              	ADC_CountsTo_mVolts:
 955              	.LFB15:
 695:.\Generated_Source\PSoC4/ADC.c **** 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 30


 696:.\Generated_Source\PSoC4/ADC.c **** 
 697:.\Generated_Source\PSoC4/ADC.c **** #if(ADC_DEFAULT_JUSTIFICATION_SEL == ADC__RIGHT)
 698:.\Generated_Source\PSoC4/ADC.c **** 
 699:.\Generated_Source\PSoC4/ADC.c **** 
 700:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 701:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_mVolts
 702:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 703:.\Generated_Source\PSoC4/ADC.c ****     *
 704:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 705:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to mVolts
 706:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 707:.\Generated_Source\PSoC4/ADC.c ****     *
 708:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 709:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 710:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 711:.\Generated_Source\PSoC4/ADC.c ****     *
 712:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 713:.\Generated_Source\PSoC4/ADC.c ****     *  Results in mVolts
 714:.\Generated_Source\PSoC4/ADC.c ****     *
 715:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 716:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to mVolts.
 717:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 718:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 719:.\Generated_Source\PSoC4/ADC.c ****     *
 720:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 721:.\Generated_Source\PSoC4/ADC.c ****     int16 ADC_CountsTo_mVolts(uint32 chan, int16 adcCounts)
 722:.\Generated_Source\PSoC4/ADC.c ****     {
 956              		.loc 1 722 0
 957              		.cfi_startproc
 958 0000 80B5     		push	{r7, lr}
 959              		.cfi_def_cfa_offset 8
 960              		.cfi_offset 7, -8
 961              		.cfi_offset 14, -4
 962 0002 84B0     		sub	sp, sp, #16
 963              		.cfi_def_cfa_offset 24
 964 0004 00AF     		add	r7, sp, #0
 965              		.cfi_def_cfa_register 7
 966 0006 7860     		str	r0, [r7, #4]
 967 0008 0A1C     		mov	r2, r1
 968 000a BB1C     		add	r3, r7, #2
 969 000c 1A80     		strh	r2, [r3]
 723:.\Generated_Source\PSoC4/ADC.c ****         int16 mVolts;
 724:.\Generated_Source\PSoC4/ADC.c **** 
 725:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 726:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 970              		.loc 1 726 0
 971 000e 7B68     		ldr	r3, [r7, #4]
 972 0010 012B     		cmp	r3, #1
 973 0012 02D9     		bls	.L69
 974              		.loc 1 726 0 is_stmt 0 discriminator 1
 975 0014 0020     		mov	r0, #0
 976 0016 FFF7FEFF 		bl	CyHalt
 977              	.L69:
 727:.\Generated_Source\PSoC4/ADC.c **** 
 728:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 729:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 730:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 31


 731:.\Generated_Source\PSoC4/ADC.c ****             {
 732:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 733:.\Generated_Source\PSoC4/ADC.c ****             }
 734:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 735:.\Generated_Source\PSoC4/ADC.c **** 
 736:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 737:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 978              		.loc 1 737 0 is_stmt 1
 979 001a BB1C     		add	r3, r7, #2
 980 001c 1A88     		ldrh	r2, [r3]
 981 001e 1E4B     		ldr	r3, .L75
 982 0020 7968     		ldr	r1, [r7, #4]
 983 0022 4900     		lsl	r1, r1, #1
 984 0024 CB5A     		ldrh	r3, [r1, r3]
 985 0026 9BB2     		uxth	r3, r3
 986 0028 9BB2     		uxth	r3, r3
 987 002a D31A     		sub	r3, r2, r3
 988 002c 9AB2     		uxth	r2, r3
 989 002e BB1C     		add	r3, r7, #2
 990 0030 1A80     		strh	r2, [r3]
 738:.\Generated_Source\PSoC4/ADC.c **** 
 739:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 991              		.loc 1 739 0
 992 0032 BB1C     		add	r3, r7, #2
 993 0034 0021     		mov	r1, #0
 994 0036 5B5E     		ldrsh	r3, [r3, r1]
 995 0038 184A     		ldr	r2, .L75+4
 996 003a 5A43     		mul	r2, r3
 740:.\Generated_Source\PSoC4/ADC.c ****                  (ADC_countsPer10Volt[chan] / 2) : (-(ADC_countsPer10Volt[chan] / 2)) ))
 997              		.loc 1 740 0
 998 003c BB1C     		add	r3, r7, #2
 999 003e 0021     		mov	r1, #0
 1000 0040 5B5E     		ldrsh	r3, [r3, r1]
 1001 0042 002B     		cmp	r3, #0
 1002 0044 08DD     		ble	.L70
 1003              		.loc 1 740 0 is_stmt 0 discriminator 1
 1004 0046 164B     		ldr	r3, .L75+8
 1005 0048 7968     		ldr	r1, [r7, #4]
 1006 004a 8900     		lsl	r1, r1, #2
 1007 004c CB58     		ldr	r3, [r1, r3]
 1008 004e 002B     		cmp	r3, #0
 1009 0050 00DA     		bge	.L71
 1010 0052 0133     		add	r3, r3, #1
 1011              	.L71:
 1012 0054 5B10     		asr	r3, r3, #1
 1013 0056 08E0     		b	.L72
 1014              	.L70:
 1015              		.loc 1 740 0 discriminator 2
 1016 0058 114B     		ldr	r3, .L75+8
 1017 005a 7968     		ldr	r1, [r7, #4]
 1018 005c 8900     		lsl	r1, r1, #2
 1019 005e CB58     		ldr	r3, [r1, r3]
 1020 0060 002B     		cmp	r3, #0
 1021 0062 00DA     		bge	.L73
 1022 0064 0133     		add	r3, r3, #1
 1023              	.L73:
 1024 0066 5B10     		asr	r3, r3, #1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 32


 1025 0068 5B42     		neg	r3, r3
 1026              	.L72:
 739:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1027              		.loc 1 739 0 is_stmt 1
 1028 006a D218     		add	r2, r2, r3
 741:.\Generated_Source\PSoC4/ADC.c ****                  / ADC_countsPer10Volt[chan]);
 1029              		.loc 1 741 0
 1030 006c 0C4B     		ldr	r3, .L75+8
 1031 006e 7968     		ldr	r1, [r7, #4]
 1032 0070 8900     		lsl	r1, r1, #2
 1033 0072 CB58     		ldr	r3, [r1, r3]
 1034 0074 101C     		mov	r0, r2
 1035 0076 191C     		mov	r1, r3
 1036 0078 FFF7FEFF 		bl	__aeabi_idiv
 1037 007c 031C     		mov	r3, r0
 1038 007e 1A1C     		mov	r2, r3
 739:.\Generated_Source\PSoC4/ADC.c ****         mVolts = (int16)((((int32)adcCounts * ADC_10MV_COUNTS) + ( (adcCounts > 0) ?
 1039              		.loc 1 739 0
 1040 0080 3B1C     		mov	r3, r7
 1041 0082 0E33     		add	r3, r3, #14
 1042 0084 1A80     		strh	r2, [r3]
 742:.\Generated_Source\PSoC4/ADC.c **** 
 743:.\Generated_Source\PSoC4/ADC.c ****         return( mVolts );
 1043              		.loc 1 743 0
 1044 0086 3B1C     		mov	r3, r7
 1045 0088 0E33     		add	r3, r3, #14
 1046 008a 1B88     		ldrh	r3, [r3]
 1047 008c 1BB2     		sxth	r3, r3
 744:.\Generated_Source\PSoC4/ADC.c ****     }
 1048              		.loc 1 744 0
 1049 008e 181C     		mov	r0, r3
 1050 0090 BD46     		mov	sp, r7
 1051 0092 04B0     		add	sp, sp, #16
 1052              		@ sp needed
 1053 0094 80BD     		pop	{r7, pc}
 1054              	.L76:
 1055 0096 C046     		.align	2
 1056              	.L75:
 1057 0098 00000000 		.word	ADC_offset
 1058 009c 10270000 		.word	10000
 1059 00a0 00000000 		.word	ADC_countsPer10Volt
 1060              		.cfi_endproc
 1061              	.LFE15:
 1062              		.size	ADC_CountsTo_mVolts, .-ADC_CountsTo_mVolts
 1063              		.global	__aeabi_lmul
 1064              		.global	__aeabi_ldivmod
 1065              		.section	.text.ADC_CountsTo_uVolts,"ax",%progbits
 1066              		.align	2
 1067              		.global	ADC_CountsTo_uVolts
 1068              		.code	16
 1069              		.thumb_func
 1070              		.type	ADC_CountsTo_uVolts, %function
 1071              	ADC_CountsTo_uVolts:
 1072              	.LFB16:
 745:.\Generated_Source\PSoC4/ADC.c **** 
 746:.\Generated_Source\PSoC4/ADC.c **** 
 747:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 33


 748:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_uVolts
 749:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 750:.\Generated_Source\PSoC4/ADC.c ****     *
 751:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 752:.\Generated_Source\PSoC4/ADC.c ****     *  This function converts ADC counts to micro Volts
 753:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 754:.\Generated_Source\PSoC4/ADC.c ****     *
 755:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 756:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 757:.\Generated_Source\PSoC4/ADC.c ****     *  adcCounts: Result from the ADC conversion
 758:.\Generated_Source\PSoC4/ADC.c ****     *
 759:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 760:.\Generated_Source\PSoC4/ADC.c ****     *  Results in uVolts
 761:.\Generated_Source\PSoC4/ADC.c ****     *
 762:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 763:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to uVolts.
 764:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 765:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
 766:.\Generated_Source\PSoC4/ADC.c ****     *
 767:.\Generated_Source\PSoC4/ADC.c ****     * Theory:
 768:.\Generated_Source\PSoC4/ADC.c ****     *  Care must be taken to not exceed the maximum value for a 31 bit signed
 769:.\Generated_Source\PSoC4/ADC.c ****     *  number in the conversion to uVolts and at the same time not loose
 770:.\Generated_Source\PSoC4/ADC.c ****     *  resolution.
 771:.\Generated_Source\PSoC4/ADC.c ****     *  To convert adcCounts to microVolts it is required to be multiplied
 772:.\Generated_Source\PSoC4/ADC.c ****     *  on 10 million and later divide on gain in counts per 10V.
 773:.\Generated_Source\PSoC4/ADC.c ****     *
 774:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 775:.\Generated_Source\PSoC4/ADC.c ****     int32 ADC_CountsTo_uVolts(uint32 chan, int16 adcCounts)
 776:.\Generated_Source\PSoC4/ADC.c ****     {
 1073              		.loc 1 776 0
 1074              		.cfi_startproc
 1075 0000 B0B5     		push	{r4, r5, r7, lr}
 1076              		.cfi_def_cfa_offset 16
 1077              		.cfi_offset 4, -16
 1078              		.cfi_offset 5, -12
 1079              		.cfi_offset 7, -8
 1080              		.cfi_offset 14, -4
 1081 0002 86B0     		sub	sp, sp, #24
 1082              		.cfi_def_cfa_offset 40
 1083 0004 00AF     		add	r7, sp, #0
 1084              		.cfi_def_cfa_register 7
 1085 0006 F860     		str	r0, [r7, #12]
 1086 0008 0A1C     		mov	r2, r1
 1087 000a 3B1C     		mov	r3, r7
 1088 000c 0A33     		add	r3, r3, #10
 1089 000e 1A80     		strh	r2, [r3]
 777:.\Generated_Source\PSoC4/ADC.c ****         int64 uVolts;
 778:.\Generated_Source\PSoC4/ADC.c **** 
 779:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 780:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1090              		.loc 1 780 0
 1091 0010 FB68     		ldr	r3, [r7, #12]
 1092 0012 012B     		cmp	r3, #1
 1093 0014 02D9     		bls	.L78
 1094              		.loc 1 780 0 is_stmt 0 discriminator 1
 1095 0016 0020     		mov	r0, #0
 1096 0018 FFF7FEFF 		bl	CyHalt
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 34


 1097              	.L78:
 781:.\Generated_Source\PSoC4/ADC.c **** 
 782:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 783:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 784:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 785:.\Generated_Source\PSoC4/ADC.c ****             {
 786:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 787:.\Generated_Source\PSoC4/ADC.c ****             }
 788:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 789:.\Generated_Source\PSoC4/ADC.c **** 
 790:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 791:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1098              		.loc 1 791 0 is_stmt 1
 1099 001c 3B1C     		mov	r3, r7
 1100 001e 0A33     		add	r3, r3, #10
 1101 0020 1A88     		ldrh	r2, [r3]
 1102 0022 1B4B     		ldr	r3, .L80+8
 1103 0024 F968     		ldr	r1, [r7, #12]
 1104 0026 4900     		lsl	r1, r1, #1
 1105 0028 CB5A     		ldrh	r3, [r1, r3]
 1106 002a 9BB2     		uxth	r3, r3
 1107 002c 9BB2     		uxth	r3, r3
 1108 002e D31A     		sub	r3, r2, r3
 1109 0030 9AB2     		uxth	r2, r3
 1110 0032 3B1C     		mov	r3, r7
 1111 0034 0A33     		add	r3, r3, #10
 1112 0036 1A80     		strh	r2, [r3]
 792:.\Generated_Source\PSoC4/ADC.c **** 
 793:.\Generated_Source\PSoC4/ADC.c ****         uVolts = ((int64)adcCounts * ADC_10UV_COUNTS) / ADC_countsPer10Volt[chan];
 1113              		.loc 1 793 0
 1114 0038 3B1C     		mov	r3, r7
 1115 003a 0A33     		add	r3, r3, #10
 1116 003c 1B88     		ldrh	r3, [r3]
 1117 003e 1BB2     		sxth	r3, r3
 1118 0040 3B60     		str	r3, [r7]
 1119 0042 DB17     		asr	r3, r3, #31
 1120 0044 7B60     		str	r3, [r7, #4]
 1121 0046 3868     		ldr	r0, [r7]
 1122 0048 7968     		ldr	r1, [r7, #4]
 1123 004a 104B     		ldr	r3, .L80+4
 1124 004c 0E4A     		ldr	r2, .L80
 1125 004e FFF7FEFF 		bl	__aeabi_lmul
 1126 0052 021C     		mov	r2, r0
 1127 0054 0B1C     		mov	r3, r1
 1128 0056 0F49     		ldr	r1, .L80+12
 1129 0058 F868     		ldr	r0, [r7, #12]
 1130 005a 8000     		lsl	r0, r0, #2
 1131 005c 4158     		ldr	r1, [r0, r1]
 1132 005e 0C1C     		mov	r4, r1
 1133 0060 C917     		asr	r1, r1, #31
 1134 0062 0D1C     		mov	r5, r1
 1135 0064 101C     		mov	r0, r2
 1136 0066 191C     		mov	r1, r3
 1137 0068 221C     		mov	r2, r4
 1138 006a 2B1C     		mov	r3, r5
 1139 006c FFF7FEFF 		bl	__aeabi_ldivmod
 1140 0070 031C     		mov	r3, r0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 35


 1141 0072 0C1C     		mov	r4, r1
 1142 0074 3B61     		str	r3, [r7, #16]
 1143 0076 7C61     		str	r4, [r7, #20]
 794:.\Generated_Source\PSoC4/ADC.c **** 
 795:.\Generated_Source\PSoC4/ADC.c ****         return( (int32)uVolts );
 1144              		.loc 1 795 0
 1145 0078 3B69     		ldr	r3, [r7, #16]
 796:.\Generated_Source\PSoC4/ADC.c ****     }
 1146              		.loc 1 796 0
 1147 007a 181C     		mov	r0, r3
 1148 007c BD46     		mov	sp, r7
 1149 007e 06B0     		add	sp, sp, #24
 1150              		@ sp needed
 1151 0080 B0BD     		pop	{r4, r5, r7, pc}
 1152              	.L81:
 1153 0082 C046C046 		.align	3
 1153      C046
 1154              	.L80:
 1155 0088 80969800 		.word	10000000
 1156 008c 00000000 		.word	0
 1157 0090 00000000 		.word	ADC_offset
 1158 0094 00000000 		.word	ADC_countsPer10Volt
 1159              		.cfi_endproc
 1160              	.LFE16:
 1161              		.size	ADC_CountsTo_uVolts, .-ADC_CountsTo_uVolts
 1162              		.global	__aeabi_i2f
 1163              		.global	__aeabi_fmul
 1164              		.global	__aeabi_fdiv
 1165              		.section	.text.ADC_CountsTo_Volts,"ax",%progbits
 1166              		.align	2
 1167              		.global	ADC_CountsTo_Volts
 1168              		.code	16
 1169              		.thumb_func
 1170              		.type	ADC_CountsTo_Volts, %function
 1171              	ADC_CountsTo_Volts:
 1172              	.LFB17:
 797:.\Generated_Source\PSoC4/ADC.c **** 
 798:.\Generated_Source\PSoC4/ADC.c **** 
 799:.\Generated_Source\PSoC4/ADC.c ****     /*******************************************************************************
 800:.\Generated_Source\PSoC4/ADC.c ****     * Function Name: ADC_CountsTo_Volts
 801:.\Generated_Source\PSoC4/ADC.c ****     ********************************************************************************
 802:.\Generated_Source\PSoC4/ADC.c ****     *
 803:.\Generated_Source\PSoC4/ADC.c ****     * Summary:
 804:.\Generated_Source\PSoC4/ADC.c ****     *  Converts the ADC output to Volts as a floating point number.
 805:.\Generated_Source\PSoC4/ADC.c ****     *  This function is not available when left data format justification selected.
 806:.\Generated_Source\PSoC4/ADC.c ****     *
 807:.\Generated_Source\PSoC4/ADC.c ****     * Parameters:
 808:.\Generated_Source\PSoC4/ADC.c ****     *  chan: The ADC channel number.
 809:.\Generated_Source\PSoC4/ADC.c ****     *  Result from the ADC conversion
 810:.\Generated_Source\PSoC4/ADC.c ****     *
 811:.\Generated_Source\PSoC4/ADC.c ****     * Return:
 812:.\Generated_Source\PSoC4/ADC.c ****     *  Results in Volts
 813:.\Generated_Source\PSoC4/ADC.c ****     *
 814:.\Generated_Source\PSoC4/ADC.c ****     * Global variables:
 815:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_countsPer10Volt:  used to convert ADC counts to Volts.
 816:.\Generated_Source\PSoC4/ADC.c ****     *  ADC_Offset:  Used as the offset while converting ADC counts
 817:.\Generated_Source\PSoC4/ADC.c ****     *   to mVolts.
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 36


 818:.\Generated_Source\PSoC4/ADC.c ****     *
 819:.\Generated_Source\PSoC4/ADC.c ****     *******************************************************************************/
 820:.\Generated_Source\PSoC4/ADC.c ****     float32 ADC_CountsTo_Volts(uint32 chan, int16 adcCounts)
 821:.\Generated_Source\PSoC4/ADC.c ****     {
 1173              		.loc 1 821 0
 1174              		.cfi_startproc
 1175 0000 90B5     		push	{r4, r7, lr}
 1176              		.cfi_def_cfa_offset 12
 1177              		.cfi_offset 4, -12
 1178              		.cfi_offset 7, -8
 1179              		.cfi_offset 14, -4
 1180 0002 85B0     		sub	sp, sp, #20
 1181              		.cfi_def_cfa_offset 32
 1182 0004 00AF     		add	r7, sp, #0
 1183              		.cfi_def_cfa_register 7
 1184 0006 7860     		str	r0, [r7, #4]
 1185 0008 0A1C     		mov	r2, r1
 1186 000a BB1C     		add	r3, r7, #2
 1187 000c 1A80     		strh	r2, [r3]
 822:.\Generated_Source\PSoC4/ADC.c ****         float32 volts;
 823:.\Generated_Source\PSoC4/ADC.c **** 
 824:.\Generated_Source\PSoC4/ADC.c ****         /* Halt CPU in debug mode if channel is out of valid range */
 825:.\Generated_Source\PSoC4/ADC.c ****         CYASSERT(chan < ADC_TOTAL_CHANNELS_NUM);
 1188              		.loc 1 825 0
 1189 000e 7B68     		ldr	r3, [r7, #4]
 1190 0010 012B     		cmp	r3, #1
 1191 0012 02D9     		bls	.L83
 1192              		.loc 1 825 0 is_stmt 0 discriminator 1
 1193 0014 0020     		mov	r0, #0
 1194 0016 FFF7FEFF 		bl	CyHalt
 1195              	.L83:
 826:.\Generated_Source\PSoC4/ADC.c **** 
 827:.\Generated_Source\PSoC4/ADC.c ****         /* Divide the adcCount when accumulate averaging mode selected */
 828:.\Generated_Source\PSoC4/ADC.c ****         #if(ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE)
 829:.\Generated_Source\PSoC4/ADC.c ****             if((ADC_channelsConfig[chan] & ADC_AVERAGING_EN) != 0u)
 830:.\Generated_Source\PSoC4/ADC.c ****             {
 831:.\Generated_Source\PSoC4/ADC.c ****                 adcCounts /= ADC_DEFAULT_AVG_SAMPLES_DIV;
 832:.\Generated_Source\PSoC4/ADC.c ****             }
 833:.\Generated_Source\PSoC4/ADC.c ****         #endif /* ADC_DEFAULT_AVG_MODE == ADC__ACCUMULATE */
 834:.\Generated_Source\PSoC4/ADC.c **** 
 835:.\Generated_Source\PSoC4/ADC.c ****         /* Subtract ADC offset */
 836:.\Generated_Source\PSoC4/ADC.c ****         adcCounts -= ADC_offset[chan];
 1196              		.loc 1 836 0 is_stmt 1
 1197 001a BB1C     		add	r3, r7, #2
 1198 001c 1A88     		ldrh	r2, [r3]
 1199 001e 154B     		ldr	r3, .L85
 1200 0020 7968     		ldr	r1, [r7, #4]
 1201 0022 4900     		lsl	r1, r1, #1
 1202 0024 CB5A     		ldrh	r3, [r1, r3]
 1203 0026 9BB2     		uxth	r3, r3
 1204 0028 9BB2     		uxth	r3, r3
 1205 002a D31A     		sub	r3, r2, r3
 1206 002c 9AB2     		uxth	r2, r3
 1207 002e BB1C     		add	r3, r7, #2
 1208 0030 1A80     		strh	r2, [r3]
 837:.\Generated_Source\PSoC4/ADC.c **** 
 838:.\Generated_Source\PSoC4/ADC.c ****         volts = ((float32)adcCounts * ADC_10V_COUNTS) / (float32)ADC_countsPer10Volt[chan];
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 37


 1209              		.loc 1 838 0
 1210 0032 BB1C     		add	r3, r7, #2
 1211 0034 0022     		mov	r2, #0
 1212 0036 9B5E     		ldrsh	r3, [r3, r2]
 1213 0038 181C     		mov	r0, r3
 1214 003a FFF7FEFF 		bl	__aeabi_i2f
 1215 003e 031C     		add	r3, r0, #0
 1216 0040 181C     		add	r0, r3, #0
 1217 0042 0D49     		ldr	r1, .L85+4
 1218 0044 FFF7FEFF 		bl	__aeabi_fmul
 1219 0048 031C     		add	r3, r0, #0
 1220 004a 1C1C     		add	r4, r3, #0
 1221 004c 0B4B     		ldr	r3, .L85+8
 1222 004e 7A68     		ldr	r2, [r7, #4]
 1223 0050 9200     		lsl	r2, r2, #2
 1224 0052 D358     		ldr	r3, [r2, r3]
 1225 0054 181C     		mov	r0, r3
 1226 0056 FFF7FEFF 		bl	__aeabi_i2f
 1227 005a 031C     		add	r3, r0, #0
 1228 005c 201C     		add	r0, r4, #0
 1229 005e 191C     		add	r1, r3, #0
 1230 0060 FFF7FEFF 		bl	__aeabi_fdiv
 1231 0064 031C     		add	r3, r0, #0
 1232 0066 FB60     		str	r3, [r7, #12]
 839:.\Generated_Source\PSoC4/ADC.c **** 
 840:.\Generated_Source\PSoC4/ADC.c ****         return( volts );
 1233              		.loc 1 840 0
 1234 0068 FB68     		ldr	r3, [r7, #12]
 841:.\Generated_Source\PSoC4/ADC.c ****     }
 1235              		.loc 1 841 0
 1236 006a 181C     		add	r0, r3, #0
 1237 006c BD46     		mov	sp, r7
 1238 006e 05B0     		add	sp, sp, #20
 1239              		@ sp needed
 1240 0070 90BD     		pop	{r4, r7, pc}
 1241              	.L86:
 1242 0072 C046     		.align	2
 1243              	.L85:
 1244 0074 00000000 		.word	ADC_offset
 1245 0078 00002041 		.word	1092616192
 1246 007c 00000000 		.word	ADC_countsPer10Volt
 1247              		.cfi_endproc
 1248              	.LFE17:
 1249              		.size	ADC_CountsTo_Volts, .-ADC_CountsTo_Volts
 1250              		.section	.rodata
 1251              		.align	2
 1252              		.type	ADC_InputsPlacement.4717, %object
 1253              		.size	ADC_InputsPlacement.4717, 2
 1254              	ADC_InputsPlacement.4717:
 1255 0008 00       		.byte	0
 1256 0009 01       		.byte	1
 1257 000a 0000     		.text
 1258              	.Letext0:
 1259              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 1260              		.section	.debug_info,"",%progbits
 1261              	.Ldebug_info0:
 1262 0000 96040000 		.4byte	0x496
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 38


 1263 0004 0400     		.2byte	0x4
 1264 0006 00000000 		.4byte	.Ldebug_abbrev0
 1265 000a 04       		.byte	0x4
 1266 000b 01       		.uleb128 0x1
 1267 000c AB020000 		.4byte	.LASF60
 1268 0010 01       		.byte	0x1
 1269 0011 6C020000 		.4byte	.LASF61
 1270 0015 00000000 		.4byte	.LASF62
 1271 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1272 001d 00000000 		.4byte	0
 1273 0021 00000000 		.4byte	.Ldebug_line0
 1274 0025 02       		.uleb128 0x2
 1275 0026 01       		.byte	0x1
 1276 0027 06       		.byte	0x6
 1277 0028 C6000000 		.4byte	.LASF0
 1278 002c 02       		.uleb128 0x2
 1279 002d 01       		.byte	0x1
 1280 002e 08       		.byte	0x8
 1281 002f 8B020000 		.4byte	.LASF1
 1282 0033 02       		.uleb128 0x2
 1283 0034 02       		.byte	0x2
 1284 0035 05       		.byte	0x5
 1285 0036 C0010000 		.4byte	.LASF2
 1286 003a 02       		.uleb128 0x2
 1287 003b 02       		.byte	0x2
 1288 003c 07       		.byte	0x7
 1289 003d 9D010000 		.4byte	.LASF3
 1290 0041 02       		.uleb128 0x2
 1291 0042 04       		.byte	0x4
 1292 0043 05       		.byte	0x5
 1293 0044 E9000000 		.4byte	.LASF4
 1294 0048 02       		.uleb128 0x2
 1295 0049 04       		.byte	0x4
 1296 004a 07       		.byte	0x7
 1297 004b 6C010000 		.4byte	.LASF5
 1298 004f 02       		.uleb128 0x2
 1299 0050 08       		.byte	0x8
 1300 0051 05       		.byte	0x5
 1301 0052 B8000000 		.4byte	.LASF6
 1302 0056 02       		.uleb128 0x2
 1303 0057 08       		.byte	0x8
 1304 0058 07       		.byte	0x7
 1305 0059 7C000000 		.4byte	.LASF7
 1306 005d 03       		.uleb128 0x3
 1307 005e 04       		.byte	0x4
 1308 005f 05       		.byte	0x5
 1309 0060 696E7400 		.ascii	"int\000"
 1310 0064 02       		.uleb128 0x2
 1311 0065 04       		.byte	0x4
 1312 0066 07       		.byte	0x7
 1313 0067 58010000 		.4byte	.LASF8
 1314 006b 04       		.uleb128 0x4
 1315 006c 1A010000 		.4byte	.LASF9
 1316 0070 02       		.byte	0x2
 1317 0071 A1       		.byte	0xa1
 1318 0072 2C000000 		.4byte	0x2c
 1319 0076 04       		.uleb128 0x4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 39


 1320 0077 99020000 		.4byte	.LASF10
 1321 007b 02       		.byte	0x2
 1322 007c A2       		.byte	0xa2
 1323 007d 3A000000 		.4byte	0x3a
 1324 0081 04       		.uleb128 0x4
 1325 0082 27010000 		.4byte	.LASF11
 1326 0086 02       		.byte	0x2
 1327 0087 A3       		.byte	0xa3
 1328 0088 48000000 		.4byte	0x48
 1329 008c 04       		.uleb128 0x4
 1330 008d 7A030000 		.4byte	.LASF12
 1331 0091 02       		.byte	0x2
 1332 0092 A5       		.byte	0xa5
 1333 0093 33000000 		.4byte	0x33
 1334 0097 04       		.uleb128 0x4
 1335 0098 D9000000 		.4byte	.LASF13
 1336 009c 02       		.byte	0x2
 1337 009d A6       		.byte	0xa6
 1338 009e 41000000 		.4byte	0x41
 1339 00a2 04       		.uleb128 0x4
 1340 00a3 D7010000 		.4byte	.LASF14
 1341 00a7 02       		.byte	0x2
 1342 00a8 A7       		.byte	0xa7
 1343 00a9 AD000000 		.4byte	0xad
 1344 00ad 02       		.uleb128 0x2
 1345 00ae 04       		.byte	0x4
 1346 00af 04       		.byte	0x4
 1347 00b0 38020000 		.4byte	.LASF15
 1348 00b4 02       		.uleb128 0x2
 1349 00b5 08       		.byte	0x8
 1350 00b6 04       		.byte	0x4
 1351 00b7 20010000 		.4byte	.LASF16
 1352 00bb 04       		.uleb128 0x4
 1353 00bc 16020000 		.4byte	.LASF17
 1354 00c0 02       		.byte	0x2
 1355 00c1 AC       		.byte	0xac
 1356 00c2 4F000000 		.4byte	0x4f
 1357 00c6 02       		.uleb128 0x2
 1358 00c7 01       		.byte	0x1
 1359 00c8 08       		.byte	0x8
 1360 00c9 46030000 		.4byte	.LASF18
 1361 00cd 05       		.uleb128 0x5
 1362 00ce D1010000 		.4byte	.LASF19
 1363 00d2 02       		.byte	0x2
 1364 00d3 4D01     		.2byte	0x14d
 1365 00d5 D9000000 		.4byte	0xd9
 1366 00d9 06       		.uleb128 0x6
 1367 00da 81000000 		.4byte	0x81
 1368 00de 02       		.uleb128 0x2
 1369 00df 04       		.byte	0x4
 1370 00e0 07       		.byte	0x7
 1371 00e1 DF010000 		.4byte	.LASF20
 1372 00e5 07       		.uleb128 0x7
 1373 00e6 DF000000 		.4byte	.LASF25
 1374 00ea 01       		.byte	0x1
 1375 00eb 3F       		.byte	0x3f
 1376 00ec 00000000 		.4byte	.LFB0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 40


 1377 00f0 24000000 		.4byte	.LFE0-.LFB0
 1378 00f4 01       		.uleb128 0x1
 1379 00f5 9C       		.byte	0x9c
 1380 00f6 08       		.uleb128 0x8
 1381 00f7 73000000 		.4byte	.LASF36
 1382 00fb 01       		.byte	0x1
 1383 00fc 5E       		.byte	0x5e
 1384 00fd 00000000 		.4byte	.LFB1
 1385 0101 FC010000 		.4byte	.LFE1-.LFB1
 1386 0105 01       		.uleb128 0x1
 1387 0106 9C       		.byte	0x9c
 1388 0107 47010000 		.4byte	0x147
 1389 010b 09       		.uleb128 0x9
 1390 010c 3B030000 		.4byte	.LASF21
 1391 0110 01       		.byte	0x1
 1392 0111 60       		.byte	0x60
 1393 0112 81000000 		.4byte	0x81
 1394 0116 02       		.uleb128 0x2
 1395 0117 91       		.byte	0x91
 1396 0118 6C       		.sleb128 -20
 1397 0119 09       		.uleb128 0x9
 1398 011a 93010000 		.4byte	.LASF22
 1399 011e 01       		.byte	0x1
 1400 011f 61       		.byte	0x61
 1401 0120 81000000 		.4byte	0x81
 1402 0124 02       		.uleb128 0x2
 1403 0125 91       		.byte	0x91
 1404 0126 64       		.sleb128 -28
 1405 0127 09       		.uleb128 0x9
 1406 0128 59000000 		.4byte	.LASF23
 1407 012c 01       		.byte	0x1
 1408 012d 62       		.byte	0x62
 1409 012e 97000000 		.4byte	0x97
 1410 0132 02       		.uleb128 0x2
 1411 0133 91       		.byte	0x91
 1412 0134 68       		.sleb128 -24
 1413 0135 09       		.uleb128 0x9
 1414 0136 93000000 		.4byte	.LASF24
 1415 013a 01       		.byte	0x1
 1416 013b 65       		.byte	0x65
 1417 013c 57010000 		.4byte	0x157
 1418 0140 05       		.uleb128 0x5
 1419 0141 03       		.byte	0x3
 1420 0142 08000000 		.4byte	ADC_InputsPlacement.4717
 1421 0146 00       		.byte	0
 1422 0147 0A       		.uleb128 0xa
 1423 0148 6B000000 		.4byte	0x6b
 1424 014c 57010000 		.4byte	0x157
 1425 0150 0B       		.uleb128 0xb
 1426 0151 DE000000 		.4byte	0xde
 1427 0155 01       		.byte	0x1
 1428 0156 00       		.byte	0
 1429 0157 0C       		.uleb128 0xc
 1430 0158 47010000 		.4byte	0x147
 1431 015c 0D       		.uleb128 0xd
 1432 015d 6F030000 		.4byte	.LASF26
 1433 0161 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 41


 1434 0162 2701     		.2byte	0x127
 1435 0164 00000000 		.4byte	.LFB2
 1436 0168 28000000 		.4byte	.LFE2-.LFB2
 1437 016c 01       		.uleb128 0x1
 1438 016d 9C       		.byte	0x9c
 1439 016e 0E       		.uleb128 0xe
 1440 016f 32030000 		.4byte	.LASF27
 1441 0173 01       		.byte	0x1
 1442 0174 4A01     		.2byte	0x14a
 1443 0176 00000000 		.4byte	.LFB3
 1444 017a 18000000 		.4byte	.LFE3-.LFB3
 1445 017e 01       		.uleb128 0x1
 1446 017f 9C       		.byte	0x9c
 1447 0180 0E       		.uleb128 0xe
 1448 0181 A7000000 		.4byte	.LASF28
 1449 0185 01       		.byte	0x1
 1450 0186 6401     		.2byte	0x164
 1451 0188 00000000 		.4byte	.LFB4
 1452 018c 1C000000 		.4byte	.LFE4-.LFB4
 1453 0190 01       		.uleb128 0x1
 1454 0191 9C       		.byte	0x9c
 1455 0192 0E       		.uleb128 0xe
 1456 0193 B0010000 		.4byte	.LASF29
 1457 0197 01       		.byte	0x1
 1458 0198 7D01     		.2byte	0x17d
 1459 019a 00000000 		.4byte	.LFB5
 1460 019e 1C000000 		.4byte	.LFE5-.LFB5
 1461 01a2 01       		.uleb128 0x1
 1462 01a3 9C       		.byte	0x9c
 1463 01a4 0F       		.uleb128 0xf
 1464 01a5 02020000 		.4byte	.LASF31
 1465 01a9 01       		.byte	0x1
 1466 01aa 9F01     		.2byte	0x19f
 1467 01ac 81000000 		.4byte	0x81
 1468 01b0 00000000 		.4byte	.LFB6
 1469 01b4 48000000 		.4byte	.LFE6-.LFB6
 1470 01b8 01       		.uleb128 0x1
 1471 01b9 9C       		.byte	0x9c
 1472 01ba DD010000 		.4byte	0x1dd
 1473 01be 10       		.uleb128 0x10
 1474 01bf 3F010000 		.4byte	.LASF33
 1475 01c3 01       		.byte	0x1
 1476 01c4 9F01     		.2byte	0x19f
 1477 01c6 81000000 		.4byte	0x81
 1478 01ca 02       		.uleb128 0x2
 1479 01cb 91       		.byte	0x91
 1480 01cc 6C       		.sleb128 -20
 1481 01cd 11       		.uleb128 0x11
 1482 01ce D2000000 		.4byte	.LASF30
 1483 01d2 01       		.byte	0x1
 1484 01d3 A101     		.2byte	0x1a1
 1485 01d5 81000000 		.4byte	0x81
 1486 01d9 02       		.uleb128 0x2
 1487 01da 91       		.byte	0x91
 1488 01db 74       		.sleb128 -12
 1489 01dc 00       		.byte	0
 1490 01dd 12       		.uleb128 0x12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 42


 1491 01de 95030000 		.4byte	.LASF32
 1492 01e2 01       		.byte	0x1
 1493 01e3 D501     		.2byte	0x1d5
 1494 01e5 8C000000 		.4byte	0x8c
 1495 01e9 00000000 		.4byte	.LFB7
 1496 01ed 44000000 		.4byte	.LFE7-.LFB7
 1497 01f1 01       		.uleb128 0x1
 1498 01f2 9C       		.byte	0x9c
 1499 01f3 16020000 		.4byte	0x216
 1500 01f7 10       		.uleb128 0x10
 1501 01f8 41030000 		.4byte	.LASF34
 1502 01fc 01       		.byte	0x1
 1503 01fd D501     		.2byte	0x1d5
 1504 01ff 81000000 		.4byte	0x81
 1505 0203 02       		.uleb128 0x2
 1506 0204 91       		.byte	0x91
 1507 0205 6C       		.sleb128 -20
 1508 0206 11       		.uleb128 0x11
 1509 0207 8E030000 		.4byte	.LASF35
 1510 020b 01       		.byte	0x1
 1511 020c D701     		.2byte	0x1d7
 1512 020e 81000000 		.4byte	0x81
 1513 0212 02       		.uleb128 0x2
 1514 0213 91       		.byte	0x91
 1515 0214 74       		.sleb128 -12
 1516 0215 00       		.byte	0
 1517 0216 13       		.uleb128 0x13
 1518 0217 1C020000 		.4byte	.LASF37
 1519 021b 01       		.byte	0x1
 1520 021c 0202     		.2byte	0x202
 1521 021e 00000000 		.4byte	.LFB8
 1522 0222 1C000000 		.4byte	.LFE8-.LFB8
 1523 0226 01       		.uleb128 0x1
 1524 0227 9C       		.byte	0x9c
 1525 0228 3C020000 		.4byte	0x23c
 1526 022c 10       		.uleb128 0x10
 1527 022d 2E010000 		.4byte	.LASF38
 1528 0231 01       		.byte	0x1
 1529 0232 0202     		.2byte	0x202
 1530 0234 81000000 		.4byte	0x81
 1531 0238 02       		.uleb128 0x2
 1532 0239 91       		.byte	0x91
 1533 023a 74       		.sleb128 -12
 1534 023b 00       		.byte	0
 1535 023c 13       		.uleb128 0x13
 1536 023d 5C020000 		.4byte	.LASF39
 1537 0241 01       		.byte	0x1
 1538 0242 2E02     		.2byte	0x22e
 1539 0244 00000000 		.4byte	.LFB9
 1540 0248 30000000 		.4byte	.LFE9-.LFB9
 1541 024c 01       		.uleb128 0x1
 1542 024d 9C       		.byte	0x9c
 1543 024e 62020000 		.4byte	0x262
 1544 0252 10       		.uleb128 0x10
 1545 0253 E8010000 		.4byte	.LASF40
 1546 0257 01       		.byte	0x1
 1547 0258 2E02     		.2byte	0x22e
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 43


 1548 025a 81000000 		.4byte	0x81
 1549 025e 02       		.uleb128 0x2
 1550 025f 91       		.byte	0x91
 1551 0260 74       		.sleb128 -12
 1552 0261 00       		.byte	0
 1553 0262 13       		.uleb128 0x13
 1554 0263 F1010000 		.4byte	.LASF41
 1555 0267 01       		.byte	0x1
 1556 0268 4302     		.2byte	0x243
 1557 026a 00000000 		.4byte	.LFB10
 1558 026e 2C000000 		.4byte	.LFE10-.LFB10
 1559 0272 01       		.uleb128 0x1
 1560 0273 9C       		.byte	0x9c
 1561 0274 88020000 		.4byte	0x288
 1562 0278 10       		.uleb128 0x10
 1563 0279 3E020000 		.4byte	.LASF42
 1564 027d 01       		.byte	0x1
 1565 027e 4302     		.2byte	0x243
 1566 0280 81000000 		.4byte	0x81
 1567 0284 02       		.uleb128 0x2
 1568 0285 91       		.byte	0x91
 1569 0286 74       		.sleb128 -12
 1570 0287 00       		.byte	0
 1571 0288 13       		.uleb128 0x13
 1572 0289 47010000 		.4byte	.LASF43
 1573 028d 01       		.byte	0x1
 1574 028e 5B02     		.2byte	0x25b
 1575 0290 00000000 		.4byte	.LFB11
 1576 0294 1C000000 		.4byte	.LFE11-.LFB11
 1577 0298 01       		.uleb128 0x1
 1578 0299 9C       		.byte	0x9c
 1579 029a AE020000 		.4byte	0x2ae
 1580 029e 10       		.uleb128 0x10
 1581 029f 2E010000 		.4byte	.LASF38
 1582 02a3 01       		.byte	0x1
 1583 02a4 5B02     		.2byte	0x25b
 1584 02a6 81000000 		.4byte	0x81
 1585 02aa 02       		.uleb128 0x2
 1586 02ab 91       		.byte	0x91
 1587 02ac 74       		.sleb128 -12
 1588 02ad 00       		.byte	0
 1589 02ae 13       		.uleb128 0x13
 1590 02af 7E010000 		.4byte	.LASF44
 1591 02b3 01       		.byte	0x1
 1592 02b4 7202     		.2byte	0x272
 1593 02b6 00000000 		.4byte	.LFB12
 1594 02ba 1C000000 		.4byte	.LFE12-.LFB12
 1595 02be 01       		.uleb128 0x1
 1596 02bf 9C       		.byte	0x9c
 1597 02c0 D4020000 		.4byte	0x2d4
 1598 02c4 10       		.uleb128 0x10
 1599 02c5 2E010000 		.4byte	.LASF38
 1600 02c9 01       		.byte	0x1
 1601 02ca 7202     		.2byte	0x272
 1602 02cc 81000000 		.4byte	0x81
 1603 02d0 02       		.uleb128 0x2
 1604 02d1 91       		.byte	0x91
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 44


 1605 02d2 74       		.sleb128 -12
 1606 02d3 00       		.byte	0
 1607 02d4 14       		.uleb128 0x14
 1608 02d5 80030000 		.4byte	.LASF45
 1609 02d9 01       		.byte	0x1
 1610 02da 8E02     		.2byte	0x28e
 1611 02dc 00000000 		.4byte	.LFB13
 1612 02e0 30000000 		.4byte	.LFE13-.LFB13
 1613 02e4 01       		.uleb128 0x1
 1614 02e5 9C       		.byte	0x9c
 1615 02e6 09030000 		.4byte	0x309
 1616 02ea 10       		.uleb128 0x10
 1617 02eb 41030000 		.4byte	.LASF34
 1618 02ef 01       		.byte	0x1
 1619 02f0 8E02     		.2byte	0x28e
 1620 02f2 81000000 		.4byte	0x81
 1621 02f6 02       		.uleb128 0x2
 1622 02f7 91       		.byte	0x91
 1623 02f8 74       		.sleb128 -12
 1624 02f9 10       		.uleb128 0x10
 1625 02fa 5E030000 		.4byte	.LASF46
 1626 02fe 01       		.byte	0x1
 1627 02ff 8E02     		.2byte	0x28e
 1628 0301 8C000000 		.4byte	0x8c
 1629 0305 02       		.uleb128 0x2
 1630 0306 91       		.byte	0x91
 1631 0307 72       		.sleb128 -14
 1632 0308 00       		.byte	0
 1633 0309 14       		.uleb128 0x14
 1634 030a 2C020000 		.4byte	.LASF47
 1635 030e 01       		.byte	0x1
 1636 030f B002     		.2byte	0x2b0
 1637 0311 00000000 		.4byte	.LFB14
 1638 0315 2C000000 		.4byte	.LFE14-.LFB14
 1639 0319 01       		.uleb128 0x1
 1640 031a 9C       		.byte	0x9c
 1641 031b 3E030000 		.4byte	0x33e
 1642 031f 10       		.uleb128 0x10
 1643 0320 41030000 		.4byte	.LASF34
 1644 0324 01       		.byte	0x1
 1645 0325 B002     		.2byte	0x2b0
 1646 0327 81000000 		.4byte	0x81
 1647 032b 02       		.uleb128 0x2
 1648 032c 91       		.byte	0x91
 1649 032d 74       		.sleb128 -12
 1650 032e 10       		.uleb128 0x10
 1651 032f 51000000 		.4byte	.LASF48
 1652 0333 01       		.byte	0x1
 1653 0334 B002     		.2byte	0x2b0
 1654 0336 97000000 		.4byte	0x97
 1655 033a 02       		.uleb128 0x2
 1656 033b 91       		.byte	0x91
 1657 033c 70       		.sleb128 -16
 1658 033d 00       		.byte	0
 1659 033e 12       		.uleb128 0x12
 1660 033f 48020000 		.4byte	.LASF49
 1661 0343 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 45


 1662 0344 D102     		.2byte	0x2d1
 1663 0346 8C000000 		.4byte	0x8c
 1664 034a 00000000 		.4byte	.LFB15
 1665 034e A4000000 		.4byte	.LFE15-.LFB15
 1666 0352 01       		.uleb128 0x1
 1667 0353 9C       		.byte	0x9c
 1668 0354 86030000 		.4byte	0x386
 1669 0358 10       		.uleb128 0x10
 1670 0359 41030000 		.4byte	.LASF34
 1671 035d 01       		.byte	0x1
 1672 035e D102     		.2byte	0x2d1
 1673 0360 81000000 		.4byte	0x81
 1674 0364 02       		.uleb128 0x2
 1675 0365 91       		.byte	0x91
 1676 0366 6C       		.sleb128 -20
 1677 0367 10       		.uleb128 0x10
 1678 0368 65030000 		.4byte	.LASF50
 1679 036c 01       		.byte	0x1
 1680 036d D102     		.2byte	0x2d1
 1681 036f 8C000000 		.4byte	0x8c
 1682 0373 02       		.uleb128 0x2
 1683 0374 91       		.byte	0x91
 1684 0375 6A       		.sleb128 -22
 1685 0376 11       		.uleb128 0x11
 1686 0377 CA010000 		.4byte	.LASF51
 1687 037b 01       		.byte	0x1
 1688 037c D302     		.2byte	0x2d3
 1689 037e 8C000000 		.4byte	0x8c
 1690 0382 02       		.uleb128 0x2
 1691 0383 91       		.byte	0x91
 1692 0384 76       		.sleb128 -10
 1693 0385 00       		.byte	0
 1694 0386 12       		.uleb128 0x12
 1695 0387 F2000000 		.4byte	.LASF52
 1696 038b 01       		.byte	0x1
 1697 038c 0703     		.2byte	0x307
 1698 038e 97000000 		.4byte	0x97
 1699 0392 00000000 		.4byte	.LFB16
 1700 0396 98000000 		.4byte	.LFE16-.LFB16
 1701 039a 01       		.uleb128 0x1
 1702 039b 9C       		.byte	0x9c
 1703 039c CE030000 		.4byte	0x3ce
 1704 03a0 10       		.uleb128 0x10
 1705 03a1 41030000 		.4byte	.LASF34
 1706 03a5 01       		.byte	0x1
 1707 03a6 0703     		.2byte	0x307
 1708 03a8 81000000 		.4byte	0x81
 1709 03ac 02       		.uleb128 0x2
 1710 03ad 91       		.byte	0x91
 1711 03ae 64       		.sleb128 -28
 1712 03af 10       		.uleb128 0x10
 1713 03b0 65030000 		.4byte	.LASF50
 1714 03b4 01       		.byte	0x1
 1715 03b5 0703     		.2byte	0x307
 1716 03b7 8C000000 		.4byte	0x8c
 1717 03bb 02       		.uleb128 0x2
 1718 03bc 91       		.byte	0x91
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 46


 1719 03bd 62       		.sleb128 -30
 1720 03be 11       		.uleb128 0x11
 1721 03bf 65010000 		.4byte	.LASF53
 1722 03c3 01       		.byte	0x1
 1723 03c4 0903     		.2byte	0x309
 1724 03c6 BB000000 		.4byte	0xbb
 1725 03ca 02       		.uleb128 0x2
 1726 03cb 91       		.byte	0x91
 1727 03cc 68       		.sleb128 -24
 1728 03cd 00       		.byte	0
 1729 03ce 12       		.uleb128 0x12
 1730 03cf 60000000 		.4byte	.LASF54
 1731 03d3 01       		.byte	0x1
 1732 03d4 3403     		.2byte	0x334
 1733 03d6 A2000000 		.4byte	0xa2
 1734 03da 00000000 		.4byte	.LFB17
 1735 03de 80000000 		.4byte	.LFE17-.LFB17
 1736 03e2 01       		.uleb128 0x1
 1737 03e3 9C       		.byte	0x9c
 1738 03e4 16040000 		.4byte	0x416
 1739 03e8 10       		.uleb128 0x10
 1740 03e9 41030000 		.4byte	.LASF34
 1741 03ed 01       		.byte	0x1
 1742 03ee 3403     		.2byte	0x334
 1743 03f0 81000000 		.4byte	0x81
 1744 03f4 02       		.uleb128 0x2
 1745 03f5 91       		.byte	0x91
 1746 03f6 64       		.sleb128 -28
 1747 03f7 10       		.uleb128 0x10
 1748 03f8 65030000 		.4byte	.LASF50
 1749 03fc 01       		.byte	0x1
 1750 03fd 3403     		.2byte	0x334
 1751 03ff 8C000000 		.4byte	0x8c
 1752 0403 02       		.uleb128 0x2
 1753 0404 91       		.byte	0x91
 1754 0405 62       		.sleb128 -30
 1755 0406 11       		.uleb128 0x11
 1756 0407 8D010000 		.4byte	.LASF55
 1757 040b 01       		.byte	0x1
 1758 040c 3603     		.2byte	0x336
 1759 040e A2000000 		.4byte	0xa2
 1760 0412 02       		.uleb128 0x2
 1761 0413 91       		.byte	0x91
 1762 0414 6C       		.sleb128 -20
 1763 0415 00       		.byte	0
 1764 0416 0A       		.uleb128 0xa
 1765 0417 81000000 		.4byte	0x81
 1766 041b 26040000 		.4byte	0x426
 1767 041f 0B       		.uleb128 0xb
 1768 0420 DE000000 		.4byte	0xde
 1769 0424 01       		.byte	0x1
 1770 0425 00       		.byte	0
 1771 0426 09       		.uleb128 0x9
 1772 0427 4B030000 		.4byte	.LASF56
 1773 042b 01       		.byte	0x1
 1774 042c 21       		.byte	0x21
 1775 042d 37040000 		.4byte	0x437
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 47


 1776 0431 05       		.uleb128 0x5
 1777 0432 03       		.byte	0x3
 1778 0433 00000000 		.4byte	ADC_channelsConfig
 1779 0437 0C       		.uleb128 0xc
 1780 0438 16040000 		.4byte	0x416
 1781 043c 15       		.uleb128 0x15
 1782 043d 33010000 		.4byte	.LASF57
 1783 0441 01       		.byte	0x1
 1784 0442 18       		.byte	0x18
 1785 0443 6B000000 		.4byte	0x6b
 1786 0447 05       		.uleb128 0x5
 1787 0448 03       		.byte	0x3
 1788 0449 00000000 		.4byte	ADC_initVar
 1789 044d 0A       		.uleb128 0xa
 1790 044e 8C000000 		.4byte	0x8c
 1791 0452 5D040000 		.4byte	0x45d
 1792 0456 0B       		.uleb128 0xb
 1793 0457 DE000000 		.4byte	0xde
 1794 045b 01       		.byte	0x1
 1795 045c 00       		.byte	0
 1796 045d 15       		.uleb128 0x15
 1797 045e A0020000 		.4byte	.LASF58
 1798 0462 01       		.byte	0x1
 1799 0463 19       		.byte	0x19
 1800 0464 6E040000 		.4byte	0x46e
 1801 0468 05       		.uleb128 0x5
 1802 0469 03       		.byte	0x3
 1803 046a 00000000 		.4byte	ADC_offset
 1804 046e 06       		.uleb128 0x6
 1805 046f 4D040000 		.4byte	0x44d
 1806 0473 0A       		.uleb128 0xa
 1807 0474 97000000 		.4byte	0x97
 1808 0478 83040000 		.4byte	0x483
 1809 047c 0B       		.uleb128 0xb
 1810 047d DE000000 		.4byte	0xde
 1811 0481 01       		.byte	0x1
 1812 0482 00       		.byte	0
 1813 0483 15       		.uleb128 0x15
 1814 0484 06010000 		.4byte	.LASF59
 1815 0488 01       		.byte	0x1
 1816 0489 1A       		.byte	0x1a
 1817 048a 94040000 		.4byte	0x494
 1818 048e 05       		.uleb128 0x5
 1819 048f 03       		.byte	0x3
 1820 0490 00000000 		.4byte	ADC_countsPer10Volt
 1821 0494 06       		.uleb128 0x6
 1822 0495 73040000 		.4byte	0x473
 1823 0499 00       		.byte	0
 1824              		.section	.debug_abbrev,"",%progbits
 1825              	.Ldebug_abbrev0:
 1826 0000 01       		.uleb128 0x1
 1827 0001 11       		.uleb128 0x11
 1828 0002 01       		.byte	0x1
 1829 0003 25       		.uleb128 0x25
 1830 0004 0E       		.uleb128 0xe
 1831 0005 13       		.uleb128 0x13
 1832 0006 0B       		.uleb128 0xb
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 48


 1833 0007 03       		.uleb128 0x3
 1834 0008 0E       		.uleb128 0xe
 1835 0009 1B       		.uleb128 0x1b
 1836 000a 0E       		.uleb128 0xe
 1837 000b 55       		.uleb128 0x55
 1838 000c 17       		.uleb128 0x17
 1839 000d 11       		.uleb128 0x11
 1840 000e 01       		.uleb128 0x1
 1841 000f 10       		.uleb128 0x10
 1842 0010 17       		.uleb128 0x17
 1843 0011 00       		.byte	0
 1844 0012 00       		.byte	0
 1845 0013 02       		.uleb128 0x2
 1846 0014 24       		.uleb128 0x24
 1847 0015 00       		.byte	0
 1848 0016 0B       		.uleb128 0xb
 1849 0017 0B       		.uleb128 0xb
 1850 0018 3E       		.uleb128 0x3e
 1851 0019 0B       		.uleb128 0xb
 1852 001a 03       		.uleb128 0x3
 1853 001b 0E       		.uleb128 0xe
 1854 001c 00       		.byte	0
 1855 001d 00       		.byte	0
 1856 001e 03       		.uleb128 0x3
 1857 001f 24       		.uleb128 0x24
 1858 0020 00       		.byte	0
 1859 0021 0B       		.uleb128 0xb
 1860 0022 0B       		.uleb128 0xb
 1861 0023 3E       		.uleb128 0x3e
 1862 0024 0B       		.uleb128 0xb
 1863 0025 03       		.uleb128 0x3
 1864 0026 08       		.uleb128 0x8
 1865 0027 00       		.byte	0
 1866 0028 00       		.byte	0
 1867 0029 04       		.uleb128 0x4
 1868 002a 16       		.uleb128 0x16
 1869 002b 00       		.byte	0
 1870 002c 03       		.uleb128 0x3
 1871 002d 0E       		.uleb128 0xe
 1872 002e 3A       		.uleb128 0x3a
 1873 002f 0B       		.uleb128 0xb
 1874 0030 3B       		.uleb128 0x3b
 1875 0031 0B       		.uleb128 0xb
 1876 0032 49       		.uleb128 0x49
 1877 0033 13       		.uleb128 0x13
 1878 0034 00       		.byte	0
 1879 0035 00       		.byte	0
 1880 0036 05       		.uleb128 0x5
 1881 0037 16       		.uleb128 0x16
 1882 0038 00       		.byte	0
 1883 0039 03       		.uleb128 0x3
 1884 003a 0E       		.uleb128 0xe
 1885 003b 3A       		.uleb128 0x3a
 1886 003c 0B       		.uleb128 0xb
 1887 003d 3B       		.uleb128 0x3b
 1888 003e 05       		.uleb128 0x5
 1889 003f 49       		.uleb128 0x49
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 49


 1890 0040 13       		.uleb128 0x13
 1891 0041 00       		.byte	0
 1892 0042 00       		.byte	0
 1893 0043 06       		.uleb128 0x6
 1894 0044 35       		.uleb128 0x35
 1895 0045 00       		.byte	0
 1896 0046 49       		.uleb128 0x49
 1897 0047 13       		.uleb128 0x13
 1898 0048 00       		.byte	0
 1899 0049 00       		.byte	0
 1900 004a 07       		.uleb128 0x7
 1901 004b 2E       		.uleb128 0x2e
 1902 004c 00       		.byte	0
 1903 004d 3F       		.uleb128 0x3f
 1904 004e 19       		.uleb128 0x19
 1905 004f 03       		.uleb128 0x3
 1906 0050 0E       		.uleb128 0xe
 1907 0051 3A       		.uleb128 0x3a
 1908 0052 0B       		.uleb128 0xb
 1909 0053 3B       		.uleb128 0x3b
 1910 0054 0B       		.uleb128 0xb
 1911 0055 27       		.uleb128 0x27
 1912 0056 19       		.uleb128 0x19
 1913 0057 11       		.uleb128 0x11
 1914 0058 01       		.uleb128 0x1
 1915 0059 12       		.uleb128 0x12
 1916 005a 06       		.uleb128 0x6
 1917 005b 40       		.uleb128 0x40
 1918 005c 18       		.uleb128 0x18
 1919 005d 9642     		.uleb128 0x2116
 1920 005f 19       		.uleb128 0x19
 1921 0060 00       		.byte	0
 1922 0061 00       		.byte	0
 1923 0062 08       		.uleb128 0x8
 1924 0063 2E       		.uleb128 0x2e
 1925 0064 01       		.byte	0x1
 1926 0065 3F       		.uleb128 0x3f
 1927 0066 19       		.uleb128 0x19
 1928 0067 03       		.uleb128 0x3
 1929 0068 0E       		.uleb128 0xe
 1930 0069 3A       		.uleb128 0x3a
 1931 006a 0B       		.uleb128 0xb
 1932 006b 3B       		.uleb128 0x3b
 1933 006c 0B       		.uleb128 0xb
 1934 006d 27       		.uleb128 0x27
 1935 006e 19       		.uleb128 0x19
 1936 006f 11       		.uleb128 0x11
 1937 0070 01       		.uleb128 0x1
 1938 0071 12       		.uleb128 0x12
 1939 0072 06       		.uleb128 0x6
 1940 0073 40       		.uleb128 0x40
 1941 0074 18       		.uleb128 0x18
 1942 0075 9642     		.uleb128 0x2116
 1943 0077 19       		.uleb128 0x19
 1944 0078 01       		.uleb128 0x1
 1945 0079 13       		.uleb128 0x13
 1946 007a 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 50


 1947 007b 00       		.byte	0
 1948 007c 09       		.uleb128 0x9
 1949 007d 34       		.uleb128 0x34
 1950 007e 00       		.byte	0
 1951 007f 03       		.uleb128 0x3
 1952 0080 0E       		.uleb128 0xe
 1953 0081 3A       		.uleb128 0x3a
 1954 0082 0B       		.uleb128 0xb
 1955 0083 3B       		.uleb128 0x3b
 1956 0084 0B       		.uleb128 0xb
 1957 0085 49       		.uleb128 0x49
 1958 0086 13       		.uleb128 0x13
 1959 0087 02       		.uleb128 0x2
 1960 0088 18       		.uleb128 0x18
 1961 0089 00       		.byte	0
 1962 008a 00       		.byte	0
 1963 008b 0A       		.uleb128 0xa
 1964 008c 01       		.uleb128 0x1
 1965 008d 01       		.byte	0x1
 1966 008e 49       		.uleb128 0x49
 1967 008f 13       		.uleb128 0x13
 1968 0090 01       		.uleb128 0x1
 1969 0091 13       		.uleb128 0x13
 1970 0092 00       		.byte	0
 1971 0093 00       		.byte	0
 1972 0094 0B       		.uleb128 0xb
 1973 0095 21       		.uleb128 0x21
 1974 0096 00       		.byte	0
 1975 0097 49       		.uleb128 0x49
 1976 0098 13       		.uleb128 0x13
 1977 0099 2F       		.uleb128 0x2f
 1978 009a 0B       		.uleb128 0xb
 1979 009b 00       		.byte	0
 1980 009c 00       		.byte	0
 1981 009d 0C       		.uleb128 0xc
 1982 009e 26       		.uleb128 0x26
 1983 009f 00       		.byte	0
 1984 00a0 49       		.uleb128 0x49
 1985 00a1 13       		.uleb128 0x13
 1986 00a2 00       		.byte	0
 1987 00a3 00       		.byte	0
 1988 00a4 0D       		.uleb128 0xd
 1989 00a5 2E       		.uleb128 0x2e
 1990 00a6 00       		.byte	0
 1991 00a7 3F       		.uleb128 0x3f
 1992 00a8 19       		.uleb128 0x19
 1993 00a9 03       		.uleb128 0x3
 1994 00aa 0E       		.uleb128 0xe
 1995 00ab 3A       		.uleb128 0x3a
 1996 00ac 0B       		.uleb128 0xb
 1997 00ad 3B       		.uleb128 0x3b
 1998 00ae 05       		.uleb128 0x5
 1999 00af 27       		.uleb128 0x27
 2000 00b0 19       		.uleb128 0x19
 2001 00b1 11       		.uleb128 0x11
 2002 00b2 01       		.uleb128 0x1
 2003 00b3 12       		.uleb128 0x12
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 51


 2004 00b4 06       		.uleb128 0x6
 2005 00b5 40       		.uleb128 0x40
 2006 00b6 18       		.uleb128 0x18
 2007 00b7 9642     		.uleb128 0x2116
 2008 00b9 19       		.uleb128 0x19
 2009 00ba 00       		.byte	0
 2010 00bb 00       		.byte	0
 2011 00bc 0E       		.uleb128 0xe
 2012 00bd 2E       		.uleb128 0x2e
 2013 00be 00       		.byte	0
 2014 00bf 3F       		.uleb128 0x3f
 2015 00c0 19       		.uleb128 0x19
 2016 00c1 03       		.uleb128 0x3
 2017 00c2 0E       		.uleb128 0xe
 2018 00c3 3A       		.uleb128 0x3a
 2019 00c4 0B       		.uleb128 0xb
 2020 00c5 3B       		.uleb128 0x3b
 2021 00c6 05       		.uleb128 0x5
 2022 00c7 27       		.uleb128 0x27
 2023 00c8 19       		.uleb128 0x19
 2024 00c9 11       		.uleb128 0x11
 2025 00ca 01       		.uleb128 0x1
 2026 00cb 12       		.uleb128 0x12
 2027 00cc 06       		.uleb128 0x6
 2028 00cd 40       		.uleb128 0x40
 2029 00ce 18       		.uleb128 0x18
 2030 00cf 9742     		.uleb128 0x2117
 2031 00d1 19       		.uleb128 0x19
 2032 00d2 00       		.byte	0
 2033 00d3 00       		.byte	0
 2034 00d4 0F       		.uleb128 0xf
 2035 00d5 2E       		.uleb128 0x2e
 2036 00d6 01       		.byte	0x1
 2037 00d7 3F       		.uleb128 0x3f
 2038 00d8 19       		.uleb128 0x19
 2039 00d9 03       		.uleb128 0x3
 2040 00da 0E       		.uleb128 0xe
 2041 00db 3A       		.uleb128 0x3a
 2042 00dc 0B       		.uleb128 0xb
 2043 00dd 3B       		.uleb128 0x3b
 2044 00de 05       		.uleb128 0x5
 2045 00df 27       		.uleb128 0x27
 2046 00e0 19       		.uleb128 0x19
 2047 00e1 49       		.uleb128 0x49
 2048 00e2 13       		.uleb128 0x13
 2049 00e3 11       		.uleb128 0x11
 2050 00e4 01       		.uleb128 0x1
 2051 00e5 12       		.uleb128 0x12
 2052 00e6 06       		.uleb128 0x6
 2053 00e7 40       		.uleb128 0x40
 2054 00e8 18       		.uleb128 0x18
 2055 00e9 9742     		.uleb128 0x2117
 2056 00eb 19       		.uleb128 0x19
 2057 00ec 01       		.uleb128 0x1
 2058 00ed 13       		.uleb128 0x13
 2059 00ee 00       		.byte	0
 2060 00ef 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 52


 2061 00f0 10       		.uleb128 0x10
 2062 00f1 05       		.uleb128 0x5
 2063 00f2 00       		.byte	0
 2064 00f3 03       		.uleb128 0x3
 2065 00f4 0E       		.uleb128 0xe
 2066 00f5 3A       		.uleb128 0x3a
 2067 00f6 0B       		.uleb128 0xb
 2068 00f7 3B       		.uleb128 0x3b
 2069 00f8 05       		.uleb128 0x5
 2070 00f9 49       		.uleb128 0x49
 2071 00fa 13       		.uleb128 0x13
 2072 00fb 02       		.uleb128 0x2
 2073 00fc 18       		.uleb128 0x18
 2074 00fd 00       		.byte	0
 2075 00fe 00       		.byte	0
 2076 00ff 11       		.uleb128 0x11
 2077 0100 34       		.uleb128 0x34
 2078 0101 00       		.byte	0
 2079 0102 03       		.uleb128 0x3
 2080 0103 0E       		.uleb128 0xe
 2081 0104 3A       		.uleb128 0x3a
 2082 0105 0B       		.uleb128 0xb
 2083 0106 3B       		.uleb128 0x3b
 2084 0107 05       		.uleb128 0x5
 2085 0108 49       		.uleb128 0x49
 2086 0109 13       		.uleb128 0x13
 2087 010a 02       		.uleb128 0x2
 2088 010b 18       		.uleb128 0x18
 2089 010c 00       		.byte	0
 2090 010d 00       		.byte	0
 2091 010e 12       		.uleb128 0x12
 2092 010f 2E       		.uleb128 0x2e
 2093 0110 01       		.byte	0x1
 2094 0111 3F       		.uleb128 0x3f
 2095 0112 19       		.uleb128 0x19
 2096 0113 03       		.uleb128 0x3
 2097 0114 0E       		.uleb128 0xe
 2098 0115 3A       		.uleb128 0x3a
 2099 0116 0B       		.uleb128 0xb
 2100 0117 3B       		.uleb128 0x3b
 2101 0118 05       		.uleb128 0x5
 2102 0119 27       		.uleb128 0x27
 2103 011a 19       		.uleb128 0x19
 2104 011b 49       		.uleb128 0x49
 2105 011c 13       		.uleb128 0x13
 2106 011d 11       		.uleb128 0x11
 2107 011e 01       		.uleb128 0x1
 2108 011f 12       		.uleb128 0x12
 2109 0120 06       		.uleb128 0x6
 2110 0121 40       		.uleb128 0x40
 2111 0122 18       		.uleb128 0x18
 2112 0123 9642     		.uleb128 0x2116
 2113 0125 19       		.uleb128 0x19
 2114 0126 01       		.uleb128 0x1
 2115 0127 13       		.uleb128 0x13
 2116 0128 00       		.byte	0
 2117 0129 00       		.byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 53


 2118 012a 13       		.uleb128 0x13
 2119 012b 2E       		.uleb128 0x2e
 2120 012c 01       		.byte	0x1
 2121 012d 3F       		.uleb128 0x3f
 2122 012e 19       		.uleb128 0x19
 2123 012f 03       		.uleb128 0x3
 2124 0130 0E       		.uleb128 0xe
 2125 0131 3A       		.uleb128 0x3a
 2126 0132 0B       		.uleb128 0xb
 2127 0133 3B       		.uleb128 0x3b
 2128 0134 05       		.uleb128 0x5
 2129 0135 27       		.uleb128 0x27
 2130 0136 19       		.uleb128 0x19
 2131 0137 11       		.uleb128 0x11
 2132 0138 01       		.uleb128 0x1
 2133 0139 12       		.uleb128 0x12
 2134 013a 06       		.uleb128 0x6
 2135 013b 40       		.uleb128 0x40
 2136 013c 18       		.uleb128 0x18
 2137 013d 9742     		.uleb128 0x2117
 2138 013f 19       		.uleb128 0x19
 2139 0140 01       		.uleb128 0x1
 2140 0141 13       		.uleb128 0x13
 2141 0142 00       		.byte	0
 2142 0143 00       		.byte	0
 2143 0144 14       		.uleb128 0x14
 2144 0145 2E       		.uleb128 0x2e
 2145 0146 01       		.byte	0x1
 2146 0147 3F       		.uleb128 0x3f
 2147 0148 19       		.uleb128 0x19
 2148 0149 03       		.uleb128 0x3
 2149 014a 0E       		.uleb128 0xe
 2150 014b 3A       		.uleb128 0x3a
 2151 014c 0B       		.uleb128 0xb
 2152 014d 3B       		.uleb128 0x3b
 2153 014e 05       		.uleb128 0x5
 2154 014f 27       		.uleb128 0x27
 2155 0150 19       		.uleb128 0x19
 2156 0151 11       		.uleb128 0x11
 2157 0152 01       		.uleb128 0x1
 2158 0153 12       		.uleb128 0x12
 2159 0154 06       		.uleb128 0x6
 2160 0155 40       		.uleb128 0x40
 2161 0156 18       		.uleb128 0x18
 2162 0157 9642     		.uleb128 0x2116
 2163 0159 19       		.uleb128 0x19
 2164 015a 01       		.uleb128 0x1
 2165 015b 13       		.uleb128 0x13
 2166 015c 00       		.byte	0
 2167 015d 00       		.byte	0
 2168 015e 15       		.uleb128 0x15
 2169 015f 34       		.uleb128 0x34
 2170 0160 00       		.byte	0
 2171 0161 03       		.uleb128 0x3
 2172 0162 0E       		.uleb128 0xe
 2173 0163 3A       		.uleb128 0x3a
 2174 0164 0B       		.uleb128 0xb
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 54


 2175 0165 3B       		.uleb128 0x3b
 2176 0166 0B       		.uleb128 0xb
 2177 0167 49       		.uleb128 0x49
 2178 0168 13       		.uleb128 0x13
 2179 0169 3F       		.uleb128 0x3f
 2180 016a 19       		.uleb128 0x19
 2181 016b 02       		.uleb128 0x2
 2182 016c 18       		.uleb128 0x18
 2183 016d 00       		.byte	0
 2184 016e 00       		.byte	0
 2185 016f 00       		.byte	0
 2186              		.section	.debug_aranges,"",%progbits
 2187 0000 A4000000 		.4byte	0xa4
 2188 0004 0200     		.2byte	0x2
 2189 0006 00000000 		.4byte	.Ldebug_info0
 2190 000a 04       		.byte	0x4
 2191 000b 00       		.byte	0
 2192 000c 0000     		.2byte	0
 2193 000e 0000     		.2byte	0
 2194 0010 00000000 		.4byte	.LFB0
 2195 0014 24000000 		.4byte	.LFE0-.LFB0
 2196 0018 00000000 		.4byte	.LFB1
 2197 001c FC010000 		.4byte	.LFE1-.LFB1
 2198 0020 00000000 		.4byte	.LFB2
 2199 0024 28000000 		.4byte	.LFE2-.LFB2
 2200 0028 00000000 		.4byte	.LFB3
 2201 002c 18000000 		.4byte	.LFE3-.LFB3
 2202 0030 00000000 		.4byte	.LFB4
 2203 0034 1C000000 		.4byte	.LFE4-.LFB4
 2204 0038 00000000 		.4byte	.LFB5
 2205 003c 1C000000 		.4byte	.LFE5-.LFB5
 2206 0040 00000000 		.4byte	.LFB6
 2207 0044 48000000 		.4byte	.LFE6-.LFB6
 2208 0048 00000000 		.4byte	.LFB7
 2209 004c 44000000 		.4byte	.LFE7-.LFB7
 2210 0050 00000000 		.4byte	.LFB8
 2211 0054 1C000000 		.4byte	.LFE8-.LFB8
 2212 0058 00000000 		.4byte	.LFB9
 2213 005c 30000000 		.4byte	.LFE9-.LFB9
 2214 0060 00000000 		.4byte	.LFB10
 2215 0064 2C000000 		.4byte	.LFE10-.LFB10
 2216 0068 00000000 		.4byte	.LFB11
 2217 006c 1C000000 		.4byte	.LFE11-.LFB11
 2218 0070 00000000 		.4byte	.LFB12
 2219 0074 1C000000 		.4byte	.LFE12-.LFB12
 2220 0078 00000000 		.4byte	.LFB13
 2221 007c 30000000 		.4byte	.LFE13-.LFB13
 2222 0080 00000000 		.4byte	.LFB14
 2223 0084 2C000000 		.4byte	.LFE14-.LFB14
 2224 0088 00000000 		.4byte	.LFB15
 2225 008c A4000000 		.4byte	.LFE15-.LFB15
 2226 0090 00000000 		.4byte	.LFB16
 2227 0094 98000000 		.4byte	.LFE16-.LFB16
 2228 0098 00000000 		.4byte	.LFB17
 2229 009c 80000000 		.4byte	.LFE17-.LFB17
 2230 00a0 00000000 		.4byte	0
 2231 00a4 00000000 		.4byte	0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 55


 2232              		.section	.debug_ranges,"",%progbits
 2233              	.Ldebug_ranges0:
 2234 0000 00000000 		.4byte	.LFB0
 2235 0004 24000000 		.4byte	.LFE0
 2236 0008 00000000 		.4byte	.LFB1
 2237 000c FC010000 		.4byte	.LFE1
 2238 0010 00000000 		.4byte	.LFB2
 2239 0014 28000000 		.4byte	.LFE2
 2240 0018 00000000 		.4byte	.LFB3
 2241 001c 18000000 		.4byte	.LFE3
 2242 0020 00000000 		.4byte	.LFB4
 2243 0024 1C000000 		.4byte	.LFE4
 2244 0028 00000000 		.4byte	.LFB5
 2245 002c 1C000000 		.4byte	.LFE5
 2246 0030 00000000 		.4byte	.LFB6
 2247 0034 48000000 		.4byte	.LFE6
 2248 0038 00000000 		.4byte	.LFB7
 2249 003c 44000000 		.4byte	.LFE7
 2250 0040 00000000 		.4byte	.LFB8
 2251 0044 1C000000 		.4byte	.LFE8
 2252 0048 00000000 		.4byte	.LFB9
 2253 004c 30000000 		.4byte	.LFE9
 2254 0050 00000000 		.4byte	.LFB10
 2255 0054 2C000000 		.4byte	.LFE10
 2256 0058 00000000 		.4byte	.LFB11
 2257 005c 1C000000 		.4byte	.LFE11
 2258 0060 00000000 		.4byte	.LFB12
 2259 0064 1C000000 		.4byte	.LFE12
 2260 0068 00000000 		.4byte	.LFB13
 2261 006c 30000000 		.4byte	.LFE13
 2262 0070 00000000 		.4byte	.LFB14
 2263 0074 2C000000 		.4byte	.LFE14
 2264 0078 00000000 		.4byte	.LFB15
 2265 007c A4000000 		.4byte	.LFE15
 2266 0080 00000000 		.4byte	.LFB16
 2267 0084 98000000 		.4byte	.LFE16
 2268 0088 00000000 		.4byte	.LFB17
 2269 008c 80000000 		.4byte	.LFE17
 2270 0090 00000000 		.4byte	0
 2271 0094 00000000 		.4byte	0
 2272              		.section	.debug_line,"",%progbits
 2273              	.Ldebug_line0:
 2274 0000 2E020000 		.section	.debug_str,"MS",%progbits,1
 2274      02004200 
 2274      00000201 
 2274      FB0E0D00 
 2274      01010101 
 2275              	.LASF62:
 2276 0000 433A5C55 		.ascii	"C:\\Users\\Samuel\\Documents\\GitHub\\Arm\\arm_cont"
 2276      73657273 
 2276      5C53616D 
 2276      75656C5C 
 2276      446F6375 
 2277 002d 726F6C6C 		.ascii	"roller_v2\\arm_controller_v2.1.cydsn\000"
 2277      65725F76 
 2277      325C6172 
 2277      6D5F636F 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 56


 2277      6E74726F 
 2278              	.LASF48:
 2279 0051 61646347 		.ascii	"adcGain\000"
 2279      61696E00 
 2280              	.LASF23:
 2281 0059 636F756E 		.ascii	"counts\000"
 2281      747300
 2282              	.LASF54:
 2283 0060 4144435F 		.ascii	"ADC_CountsTo_Volts\000"
 2283      436F756E 
 2283      7473546F 
 2283      5F566F6C 
 2283      747300
 2284              	.LASF36:
 2285 0073 4144435F 		.ascii	"ADC_Init\000"
 2285      496E6974 
 2285      00
 2286              	.LASF7:
 2287 007c 6C6F6E67 		.ascii	"long long unsigned int\000"
 2287      206C6F6E 
 2287      6720756E 
 2287      7369676E 
 2287      65642069 
 2288              	.LASF24:
 2289 0093 4144435F 		.ascii	"ADC_InputsPlacement\000"
 2289      496E7075 
 2289      7473506C 
 2289      6163656D 
 2289      656E7400 
 2290              	.LASF28:
 2291 00a7 4144435F 		.ascii	"ADC_StartConvert\000"
 2291      53746172 
 2291      74436F6E 
 2291      76657274 
 2291      00
 2292              	.LASF6:
 2293 00b8 6C6F6E67 		.ascii	"long long int\000"
 2293      206C6F6E 
 2293      6720696E 
 2293      7400
 2294              	.LASF0:
 2295 00c6 7369676E 		.ascii	"signed char\000"
 2295      65642063 
 2295      68617200 
 2296              	.LASF30:
 2297 00d2 73746174 		.ascii	"status\000"
 2297      757300
 2298              	.LASF13:
 2299 00d9 696E7433 		.ascii	"int32\000"
 2299      3200
 2300              	.LASF25:
 2301 00df 4144435F 		.ascii	"ADC_Start\000"
 2301      53746172 
 2301      7400
 2302              	.LASF4:
 2303 00e9 6C6F6E67 		.ascii	"long int\000"
 2303      20696E74 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 57


 2303      00
 2304              	.LASF52:
 2305 00f2 4144435F 		.ascii	"ADC_CountsTo_uVolts\000"
 2305      436F756E 
 2305      7473546F 
 2305      5F75566F 
 2305      6C747300 
 2306              	.LASF59:
 2307 0106 4144435F 		.ascii	"ADC_countsPer10Volt\000"
 2307      636F756E 
 2307      74735065 
 2307      72313056 
 2307      6F6C7400 
 2308              	.LASF9:
 2309 011a 75696E74 		.ascii	"uint8\000"
 2309      3800
 2310              	.LASF16:
 2311 0120 646F7562 		.ascii	"double\000"
 2311      6C6500
 2312              	.LASF11:
 2313 0127 75696E74 		.ascii	"uint32\000"
 2313      333200
 2314              	.LASF38:
 2315 012e 6D61736B 		.ascii	"mask\000"
 2315      00
 2316              	.LASF57:
 2317 0133 4144435F 		.ascii	"ADC_initVar\000"
 2317      696E6974 
 2317      56617200 
 2318              	.LASF33:
 2319 013f 7265744D 		.ascii	"retMode\000"
 2319      6F646500 
 2320              	.LASF43:
 2321 0147 4144435F 		.ascii	"ADC_SetLimitMask\000"
 2321      5365744C 
 2321      696D6974 
 2321      4D61736B 
 2321      00
 2322              	.LASF8:
 2323 0158 756E7369 		.ascii	"unsigned int\000"
 2323      676E6564 
 2323      20696E74 
 2323      00
 2324              	.LASF53:
 2325 0165 75566F6C 		.ascii	"uVolts\000"
 2325      747300
 2326              	.LASF5:
 2327 016c 6C6F6E67 		.ascii	"long unsigned int\000"
 2327      20756E73 
 2327      69676E65 
 2327      6420696E 
 2327      7400
 2328              	.LASF44:
 2329 017e 4144435F 		.ascii	"ADC_SetSatMask\000"
 2329      53657453 
 2329      61744D61 
 2329      736B00
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 58


 2330              	.LASF55:
 2331 018d 766F6C74 		.ascii	"volts\000"
 2331      7300
 2332              	.LASF22:
 2333 0193 746D7052 		.ascii	"tmpRegVal\000"
 2333      65675661 
 2333      6C00
 2334              	.LASF3:
 2335 019d 73686F72 		.ascii	"short unsigned int\000"
 2335      7420756E 
 2335      7369676E 
 2335      65642069 
 2335      6E7400
 2336              	.LASF29:
 2337 01b0 4144435F 		.ascii	"ADC_StopConvert\000"
 2337      53746F70 
 2337      436F6E76 
 2337      65727400 
 2338              	.LASF2:
 2339 01c0 73686F72 		.ascii	"short int\000"
 2339      7420696E 
 2339      7400
 2340              	.LASF51:
 2341 01ca 6D566F6C 		.ascii	"mVolts\000"
 2341      747300
 2342              	.LASF19:
 2343 01d1 72656733 		.ascii	"reg32\000"
 2343      3200
 2344              	.LASF14:
 2345 01d7 666C6F61 		.ascii	"float32\000"
 2345      74333200 
 2346              	.LASF20:
 2347 01df 73697A65 		.ascii	"sizetype\000"
 2347      74797065 
 2347      00
 2348              	.LASF40:
 2349 01e8 6C6F774C 		.ascii	"lowLimit\000"
 2349      696D6974 
 2349      00
 2350              	.LASF41:
 2351 01f1 4144435F 		.ascii	"ADC_SetHighLimit\000"
 2351      53657448 
 2351      6967684C 
 2351      696D6974 
 2351      00
 2352              	.LASF31:
 2353 0202 4144435F 		.ascii	"ADC_IsEndConversion\000"
 2353      4973456E 
 2353      64436F6E 
 2353      76657273 
 2353      696F6E00 
 2354              	.LASF17:
 2355 0216 696E7436 		.ascii	"int64\000"
 2355      3400
 2356              	.LASF37:
 2357 021c 4144435F 		.ascii	"ADC_SetChanMask\000"
 2357      53657443 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 59


 2357      68616E4D 
 2357      61736B00 
 2358              	.LASF47:
 2359 022c 4144435F 		.ascii	"ADC_SetGain\000"
 2359      53657447 
 2359      61696E00 
 2360              	.LASF15:
 2361 0238 666C6F61 		.ascii	"float\000"
 2361      7400
 2362              	.LASF42:
 2363 023e 68696768 		.ascii	"highLimit\000"
 2363      4C696D69 
 2363      7400
 2364              	.LASF49:
 2365 0248 4144435F 		.ascii	"ADC_CountsTo_mVolts\000"
 2365      436F756E 
 2365      7473546F 
 2365      5F6D566F 
 2365      6C747300 
 2366              	.LASF39:
 2367 025c 4144435F 		.ascii	"ADC_SetLowLimit\000"
 2367      5365744C 
 2367      6F774C69 
 2367      6D697400 
 2368              	.LASF61:
 2369 026c 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\ADC.c\000"
 2369      6E657261 
 2369      7465645F 
 2369      536F7572 
 2369      63655C50 
 2370              	.LASF1:
 2371 028b 756E7369 		.ascii	"unsigned char\000"
 2371      676E6564 
 2371      20636861 
 2371      7200
 2372              	.LASF10:
 2373 0299 75696E74 		.ascii	"uint16\000"
 2373      313600
 2374              	.LASF58:
 2375 02a0 4144435F 		.ascii	"ADC_offset\000"
 2375      6F666673 
 2375      657400
 2376              	.LASF60:
 2377 02ab 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 2377      4320342E 
 2377      382E3420 
 2377      32303134 
 2377      30353236 
 2378 02de 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 2378      20726576 
 2378      6973696F 
 2378      6E203231 
 2378      31333538 
 2379 0311 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 2379      74643D67 
 2379      6E753939 
 2379      202D6666 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccL4iwKh.s 			page 60


 2379      756E6374 
 2380              	.LASF27:
 2381 0332 4144435F 		.ascii	"ADC_Stop\000"
 2381      53746F70 
 2381      00
 2382              	.LASF21:
 2383 033b 63684E75 		.ascii	"chNum\000"
 2383      6D00
 2384              	.LASF34:
 2385 0341 6368616E 		.ascii	"chan\000"
 2385      00
 2386              	.LASF18:
 2387 0346 63686172 		.ascii	"char\000"
 2387      00
 2388              	.LASF56:
 2389 034b 4144435F 		.ascii	"ADC_channelsConfig\000"
 2389      6368616E 
 2389      6E656C73 
 2389      436F6E66 
 2389      696700
 2390              	.LASF46:
 2391 035e 6F666673 		.ascii	"offset\000"
 2391      657400
 2392              	.LASF50:
 2393 0365 61646343 		.ascii	"adcCounts\000"
 2393      6F756E74 
 2393      7300
 2394              	.LASF26:
 2395 036f 4144435F 		.ascii	"ADC_Enable\000"
 2395      456E6162 
 2395      6C6500
 2396              	.LASF12:
 2397 037a 696E7431 		.ascii	"int16\000"
 2397      3600
 2398              	.LASF45:
 2399 0380 4144435F 		.ascii	"ADC_SetOffset\000"
 2399      5365744F 
 2399      66667365 
 2399      7400
 2400              	.LASF35:
 2401 038e 72657375 		.ascii	"result\000"
 2401      6C7400
 2402              	.LASF32:
 2403 0395 4144435F 		.ascii	"ADC_GetResult16\000"
 2403      47657452 
 2403      6573756C 
 2403      74313600 
 2404              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
