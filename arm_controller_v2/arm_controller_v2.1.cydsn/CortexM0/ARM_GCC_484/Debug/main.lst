ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.ServoGoalPosition,"ax",%progbits
  18              		.align	2
  19              		.global	ServoGoalPosition
  20              		.code	16
  21              		.thumb_func
  22              		.type	ServoGoalPosition, %function
  23              	ServoGoalPosition:
  24              	.LFB34:
  25              		.file 1 ".\\dynamixel.h"
   1:.\dynamixel.h **** /* ========================================
   2:.\dynamixel.h ****  * BYU Mars Rover 2015
   3:.\dynamixel.h ****  * Author: Sam Bury
   4:.\dynamixel.h ****  * ========================================
   5:.\dynamixel.h **** */
   6:.\dynamixel.h **** #ifndef DYNAMIXEL_H
   7:.\dynamixel.h **** #define DYNAMIXEL_H
   8:.\dynamixel.h **** 
   9:.\dynamixel.h ****     #include <project.h>
  10:.\dynamixel.h ****     
  11:.\dynamixel.h ****     void ServoGoalPosition( uint8 servoID, uint16 position);
  12:.\dynamixel.h ****     void SetServoTorque( uint8 servoID, uint16 torque);
  13:.\dynamixel.h ****     void ServoSpeed( uint8 servoID, uint16 speed);
  14:.\dynamixel.h **** 
  15:.\dynamixel.h ****     void ServoGoalPosition( uint8 servoID, uint16 position)
  16:.\dynamixel.h ****     {
  26              		.loc 1 16 0
  27              		.cfi_startproc
  28 0000 80B5     		push	{r7, lr}
  29              		.cfi_def_cfa_offset 8
  30              		.cfi_offset 7, -8
  31              		.cfi_offset 14, -4
  32 0002 86B0     		sub	sp, sp, #24
  33              		.cfi_def_cfa_offset 32
  34 0004 00AF     		add	r7, sp, #0
  35              		.cfi_def_cfa_register 7
  36 0006 0A1C     		mov	r2, r1
  37 0008 FB1D     		add	r3, r7, #7
  38 000a 011C     		add	r1, r0, #0
  39 000c 1970     		strb	r1, [r3]
  40 000e 3B1D     		add	r3, r7, #4
  41 0010 1A80     		strh	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 2


  17:.\dynamixel.h ****         uint8 array[9];
  18:.\dynamixel.h ****         
  19:.\dynamixel.h ****         array[0] = 0xFF;
  42              		.loc 1 19 0
  43 0012 3B1C     		mov	r3, r7
  44 0014 0C33     		add	r3, r3, #12
  45 0016 FF22     		mov	r2, #255
  46 0018 1A70     		strb	r2, [r3]
  20:.\dynamixel.h ****         array[1] = 0xFF;
  47              		.loc 1 20 0
  48 001a 3B1C     		mov	r3, r7
  49 001c 0C33     		add	r3, r3, #12
  50 001e FF22     		mov	r2, #255
  51 0020 5A70     		strb	r2, [r3, #1]
  21:.\dynamixel.h ****         array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
  52              		.loc 1 21 0
  53 0022 3B1C     		mov	r3, r7
  54 0024 0C33     		add	r3, r3, #12
  55 0026 FA1D     		add	r2, r7, #7
  56 0028 1278     		ldrb	r2, [r2]
  57 002a 9A70     		strb	r2, [r3, #2]
  22:.\dynamixel.h ****         array[3] = 0x05;
  58              		.loc 1 22 0
  59 002c 3B1C     		mov	r3, r7
  60 002e 0C33     		add	r3, r3, #12
  61 0030 0522     		mov	r2, #5
  62 0032 DA70     		strb	r2, [r3, #3]
  23:.\dynamixel.h ****         array[4] = 0x03; //write instruction
  63              		.loc 1 23 0
  64 0034 3B1C     		mov	r3, r7
  65 0036 0C33     		add	r3, r3, #12
  66 0038 0322     		mov	r2, #3
  67 003a 1A71     		strb	r2, [r3, #4]
  24:.\dynamixel.h ****         array[5] = 0x1E;
  68              		.loc 1 24 0
  69 003c 3B1C     		mov	r3, r7
  70 003e 0C33     		add	r3, r3, #12
  71 0040 1E22     		mov	r2, #30
  72 0042 5A71     		strb	r2, [r3, #5]
  25:.\dynamixel.h ****         array[6] = position;
  73              		.loc 1 25 0
  74 0044 3B1D     		add	r3, r7, #4
  75 0046 1B88     		ldrh	r3, [r3]
  76 0048 DAB2     		uxtb	r2, r3
  77 004a 3B1C     		mov	r3, r7
  78 004c 0C33     		add	r3, r3, #12
  79 004e 9A71     		strb	r2, [r3, #6]
  26:.\dynamixel.h ****         array[7] = position >> 8;
  80              		.loc 1 26 0
  81 0050 3B1D     		add	r3, r7, #4
  82 0052 1B88     		ldrh	r3, [r3]
  83 0054 1B0A     		lsr	r3, r3, #8
  84 0056 9BB2     		uxth	r3, r3
  85 0058 DAB2     		uxtb	r2, r3
  86 005a 3B1C     		mov	r3, r7
  87 005c 0C33     		add	r3, r3, #12
  88 005e DA71     		strb	r2, [r3, #7]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 3


  27:.\dynamixel.h ****         array[8] = ~(servoID + 0x05 + 0x1E + array[6] + array[7] + 0x03);
  89              		.loc 1 27 0
  90 0060 3B1C     		mov	r3, r7
  91 0062 0C33     		add	r3, r3, #12
  92 0064 9A79     		ldrb	r2, [r3, #6]
  93 0066 FB1D     		add	r3, r7, #7
  94 0068 1B78     		ldrb	r3, [r3]
  95 006a D318     		add	r3, r2, r3
  96 006c DAB2     		uxtb	r2, r3
  97 006e 3B1C     		mov	r3, r7
  98 0070 0C33     		add	r3, r3, #12
  99 0072 DB79     		ldrb	r3, [r3, #7]
 100 0074 D318     		add	r3, r2, r3
 101 0076 DBB2     		uxtb	r3, r3
 102 0078 2633     		add	r3, r3, #38
 103 007a DBB2     		uxtb	r3, r3
 104 007c DB43     		mvn	r3, r3
 105 007e DAB2     		uxtb	r2, r3
 106 0080 3B1C     		mov	r3, r7
 107 0082 0C33     		add	r3, r3, #12
 108 0084 1A72     		strb	r2, [r3, #8]
  28:.\dynamixel.h ****         
  29:.\dynamixel.h ****         Wrist_UART_SpiUartPutArray(array, 0x09);  
 109              		.loc 1 29 0
 110 0086 3B1C     		mov	r3, r7
 111 0088 0C33     		add	r3, r3, #12
 112 008a 181C     		mov	r0, r3
 113 008c 0921     		mov	r1, #9
 114 008e FFF7FEFF 		bl	Wrist_UART_SpiUartPutArray
  30:.\dynamixel.h ****     }
 115              		.loc 1 30 0
 116 0092 BD46     		mov	sp, r7
 117 0094 06B0     		add	sp, sp, #24
 118              		@ sp needed
 119 0096 80BD     		pop	{r7, pc}
 120              		.cfi_endproc
 121              	.LFE34:
 122              		.size	ServoGoalPosition, .-ServoGoalPosition
 123              		.section	.text.SetServoTorque,"ax",%progbits
 124              		.align	2
 125              		.global	SetServoTorque
 126              		.code	16
 127              		.thumb_func
 128              		.type	SetServoTorque, %function
 129              	SetServoTorque:
 130              	.LFB35:
  31:.\dynamixel.h **** 
  32:.\dynamixel.h ****     void SetServoTorque( uint8 servoID, uint16 torque)
  33:.\dynamixel.h ****     {
 131              		.loc 1 33 0
 132              		.cfi_startproc
 133 0000 80B5     		push	{r7, lr}
 134              		.cfi_def_cfa_offset 8
 135              		.cfi_offset 7, -8
 136              		.cfi_offset 14, -4
 137 0002 86B0     		sub	sp, sp, #24
 138              		.cfi_def_cfa_offset 32
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 4


 139 0004 00AF     		add	r7, sp, #0
 140              		.cfi_def_cfa_register 7
 141 0006 0A1C     		mov	r2, r1
 142 0008 FB1D     		add	r3, r7, #7
 143 000a 011C     		add	r1, r0, #0
 144 000c 1970     		strb	r1, [r3]
 145 000e 3B1D     		add	r3, r7, #4
 146 0010 1A80     		strh	r2, [r3]
  34:.\dynamixel.h ****         uint8 array[9];
  35:.\dynamixel.h ****         
  36:.\dynamixel.h ****         array[0] = 0xFF;
 147              		.loc 1 36 0
 148 0012 3B1C     		mov	r3, r7
 149 0014 0C33     		add	r3, r3, #12
 150 0016 FF22     		mov	r2, #255
 151 0018 1A70     		strb	r2, [r3]
  37:.\dynamixel.h ****         array[1] = 0xFF;
 152              		.loc 1 37 0
 153 001a 3B1C     		mov	r3, r7
 154 001c 0C33     		add	r3, r3, #12
 155 001e FF22     		mov	r2, #255
 156 0020 5A70     		strb	r2, [r3, #1]
  38:.\dynamixel.h ****         array[2] = servoID; 
 157              		.loc 1 38 0
 158 0022 3B1C     		mov	r3, r7
 159 0024 0C33     		add	r3, r3, #12
 160 0026 FA1D     		add	r2, r7, #7
 161 0028 1278     		ldrb	r2, [r2]
 162 002a 9A70     		strb	r2, [r3, #2]
  39:.\dynamixel.h ****         array[3] = 0x05;
 163              		.loc 1 39 0
 164 002c 3B1C     		mov	r3, r7
 165 002e 0C33     		add	r3, r3, #12
 166 0030 0522     		mov	r2, #5
 167 0032 DA70     		strb	r2, [r3, #3]
  40:.\dynamixel.h ****         array[4] = 0x03; //write instruction
 168              		.loc 1 40 0
 169 0034 3B1C     		mov	r3, r7
 170 0036 0C33     		add	r3, r3, #12
 171 0038 0322     		mov	r2, #3
 172 003a 1A71     		strb	r2, [r3, #4]
  41:.\dynamixel.h ****         array[5] = 0x0E;
 173              		.loc 1 41 0
 174 003c 3B1C     		mov	r3, r7
 175 003e 0C33     		add	r3, r3, #12
 176 0040 0E22     		mov	r2, #14
 177 0042 5A71     		strb	r2, [r3, #5]
  42:.\dynamixel.h ****         array[6] = torque;
 178              		.loc 1 42 0
 179 0044 3B1D     		add	r3, r7, #4
 180 0046 1B88     		ldrh	r3, [r3]
 181 0048 DAB2     		uxtb	r2, r3
 182 004a 3B1C     		mov	r3, r7
 183 004c 0C33     		add	r3, r3, #12
 184 004e 9A71     		strb	r2, [r3, #6]
  43:.\dynamixel.h ****         array[7] = torque >> 8;
 185              		.loc 1 43 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 5


 186 0050 3B1D     		add	r3, r7, #4
 187 0052 1B88     		ldrh	r3, [r3]
 188 0054 1B0A     		lsr	r3, r3, #8
 189 0056 9BB2     		uxth	r3, r3
 190 0058 DAB2     		uxtb	r2, r3
 191 005a 3B1C     		mov	r3, r7
 192 005c 0C33     		add	r3, r3, #12
 193 005e DA71     		strb	r2, [r3, #7]
  44:.\dynamixel.h ****         array[8] = ~(servoID + 0x05 + 0x0E + array[6] + array[7] + 0x03);
 194              		.loc 1 44 0
 195 0060 3B1C     		mov	r3, r7
 196 0062 0C33     		add	r3, r3, #12
 197 0064 9A79     		ldrb	r2, [r3, #6]
 198 0066 FB1D     		add	r3, r7, #7
 199 0068 1B78     		ldrb	r3, [r3]
 200 006a D318     		add	r3, r2, r3
 201 006c DAB2     		uxtb	r2, r3
 202 006e 3B1C     		mov	r3, r7
 203 0070 0C33     		add	r3, r3, #12
 204 0072 DB79     		ldrb	r3, [r3, #7]
 205 0074 D318     		add	r3, r2, r3
 206 0076 DBB2     		uxtb	r3, r3
 207 0078 1633     		add	r3, r3, #22
 208 007a DBB2     		uxtb	r3, r3
 209 007c DB43     		mvn	r3, r3
 210 007e DAB2     		uxtb	r2, r3
 211 0080 3B1C     		mov	r3, r7
 212 0082 0C33     		add	r3, r3, #12
 213 0084 1A72     		strb	r2, [r3, #8]
  45:.\dynamixel.h ****         
  46:.\dynamixel.h ****         Wrist_UART_SpiUartPutArray(array, 0x09);
 214              		.loc 1 46 0
 215 0086 3B1C     		mov	r3, r7
 216 0088 0C33     		add	r3, r3, #12
 217 008a 181C     		mov	r0, r3
 218 008c 0921     		mov	r1, #9
 219 008e FFF7FEFF 		bl	Wrist_UART_SpiUartPutArray
  47:.\dynamixel.h ****     }    
 220              		.loc 1 47 0
 221 0092 BD46     		mov	sp, r7
 222 0094 06B0     		add	sp, sp, #24
 223              		@ sp needed
 224 0096 80BD     		pop	{r7, pc}
 225              		.cfi_endproc
 226              	.LFE35:
 227              		.size	SetServoTorque, .-SetServoTorque
 228              		.section	.text.ServoSpeed,"ax",%progbits
 229              		.align	2
 230              		.global	ServoSpeed
 231              		.code	16
 232              		.thumb_func
 233              		.type	ServoSpeed, %function
 234              	ServoSpeed:
 235              	.LFB36:
  48:.\dynamixel.h **** 
  49:.\dynamixel.h ****     void ServoSpeed( uint8 servoID, uint16 speed)
  50:.\dynamixel.h ****     {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 6


 236              		.loc 1 50 0
 237              		.cfi_startproc
 238 0000 80B5     		push	{r7, lr}
 239              		.cfi_def_cfa_offset 8
 240              		.cfi_offset 7, -8
 241              		.cfi_offset 14, -4
 242 0002 86B0     		sub	sp, sp, #24
 243              		.cfi_def_cfa_offset 32
 244 0004 00AF     		add	r7, sp, #0
 245              		.cfi_def_cfa_register 7
 246 0006 0A1C     		mov	r2, r1
 247 0008 FB1D     		add	r3, r7, #7
 248 000a 011C     		add	r1, r0, #0
 249 000c 1970     		strb	r1, [r3]
 250 000e 3B1D     		add	r3, r7, #4
 251 0010 1A80     		strh	r2, [r3]
  51:.\dynamixel.h ****         uint8 array[9];
  52:.\dynamixel.h ****         
  53:.\dynamixel.h ****         array[0] = 0xFF;
 252              		.loc 1 53 0
 253 0012 3B1C     		mov	r3, r7
 254 0014 0C33     		add	r3, r3, #12
 255 0016 FF22     		mov	r2, #255
 256 0018 1A70     		strb	r2, [r3]
  54:.\dynamixel.h ****         array[1] = 0xFF;
 257              		.loc 1 54 0
 258 001a 3B1C     		mov	r3, r7
 259 001c 0C33     		add	r3, r3, #12
 260 001e FF22     		mov	r2, #255
 261 0020 5A70     		strb	r2, [r3, #1]
  55:.\dynamixel.h ****         array[2] = servoID; //this is a broadcast ID.  Change for daisychained servos.
 262              		.loc 1 55 0
 263 0022 3B1C     		mov	r3, r7
 264 0024 0C33     		add	r3, r3, #12
 265 0026 FA1D     		add	r2, r7, #7
 266 0028 1278     		ldrb	r2, [r2]
 267 002a 9A70     		strb	r2, [r3, #2]
  56:.\dynamixel.h ****         array[3] = 0x05;
 268              		.loc 1 56 0
 269 002c 3B1C     		mov	r3, r7
 270 002e 0C33     		add	r3, r3, #12
 271 0030 0522     		mov	r2, #5
 272 0032 DA70     		strb	r2, [r3, #3]
  57:.\dynamixel.h ****         array[4] = 0x03; //write instruction
 273              		.loc 1 57 0
 274 0034 3B1C     		mov	r3, r7
 275 0036 0C33     		add	r3, r3, #12
 276 0038 0322     		mov	r2, #3
 277 003a 1A71     		strb	r2, [r3, #4]
  58:.\dynamixel.h ****         array[5] = 0x20;
 278              		.loc 1 58 0
 279 003c 3B1C     		mov	r3, r7
 280 003e 0C33     		add	r3, r3, #12
 281 0040 2022     		mov	r2, #32
 282 0042 5A71     		strb	r2, [r3, #5]
  59:.\dynamixel.h ****         array[6] = speed;
 283              		.loc 1 59 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 7


 284 0044 3B1D     		add	r3, r7, #4
 285 0046 1B88     		ldrh	r3, [r3]
 286 0048 DAB2     		uxtb	r2, r3
 287 004a 3B1C     		mov	r3, r7
 288 004c 0C33     		add	r3, r3, #12
 289 004e 9A71     		strb	r2, [r3, #6]
  60:.\dynamixel.h ****         array[7] = speed >> 8;
 290              		.loc 1 60 0
 291 0050 3B1D     		add	r3, r7, #4
 292 0052 1B88     		ldrh	r3, [r3]
 293 0054 1B0A     		lsr	r3, r3, #8
 294 0056 9BB2     		uxth	r3, r3
 295 0058 DAB2     		uxtb	r2, r3
 296 005a 3B1C     		mov	r3, r7
 297 005c 0C33     		add	r3, r3, #12
 298 005e DA71     		strb	r2, [r3, #7]
  61:.\dynamixel.h ****         array[8] = ~(servoID + 0x05 + 0x20 + array[6] + array[7] + 0x03);
 299              		.loc 1 61 0
 300 0060 3B1C     		mov	r3, r7
 301 0062 0C33     		add	r3, r3, #12
 302 0064 9A79     		ldrb	r2, [r3, #6]
 303 0066 FB1D     		add	r3, r7, #7
 304 0068 1B78     		ldrb	r3, [r3]
 305 006a D318     		add	r3, r2, r3
 306 006c DAB2     		uxtb	r2, r3
 307 006e 3B1C     		mov	r3, r7
 308 0070 0C33     		add	r3, r3, #12
 309 0072 DB79     		ldrb	r3, [r3, #7]
 310 0074 D318     		add	r3, r2, r3
 311 0076 DBB2     		uxtb	r3, r3
 312 0078 2833     		add	r3, r3, #40
 313 007a DBB2     		uxtb	r3, r3
 314 007c DB43     		mvn	r3, r3
 315 007e DAB2     		uxtb	r2, r3
 316 0080 3B1C     		mov	r3, r7
 317 0082 0C33     		add	r3, r3, #12
 318 0084 1A72     		strb	r2, [r3, #8]
  62:.\dynamixel.h ****         
  63:.\dynamixel.h ****         Wrist_UART_SpiUartPutArray(array, 0x09);  
 319              		.loc 1 63 0
 320 0086 3B1C     		mov	r3, r7
 321 0088 0C33     		add	r3, r3, #12
 322 008a 181C     		mov	r0, r3
 323 008c 0921     		mov	r1, #9
 324 008e FFF7FEFF 		bl	Wrist_UART_SpiUartPutArray
  64:.\dynamixel.h ****     }
 325              		.loc 1 64 0
 326 0092 BD46     		mov	sp, r7
 327 0094 06B0     		add	sp, sp, #24
 328              		@ sp needed
 329 0096 80BD     		pop	{r7, pc}
 330              		.cfi_endproc
 331              	.LFE36:
 332              		.size	ServoSpeed, .-ServoSpeed
 333              		.global	NEUTRAL
 334              		.data
 335              		.align	1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 8


 336              		.type	NEUTRAL, %object
 337              		.size	NEUTRAL, 2
 338              	NEUTRAL:
 339 0000 DC05     		.short	1500
 340              		.comm	data_array,24,4
 341              		.comm	feedback_array,21,4
 342              		.comm	heartbeat_array,3,4
 343              		.comm	HEARTBEAT_FLAG,1,1
 344              		.global	WT_feedback_flag
 345              		.bss
 346              		.type	WT_feedback_flag, %object
 347              		.size	WT_feedback_flag, 1
 348              	WT_feedback_flag:
 349 0000 00       		.space	1
 350              		.global	WR_feedback_flag
 351              		.type	WR_feedback_flag, %object
 352              		.size	WR_feedback_flag, 1
 353              	WR_feedback_flag:
 354 0001 00       		.space	1
 355              		.global	WR_feedback
 356              		.align	1
 357              		.type	WR_feedback, %object
 358              		.size	WR_feedback, 2
 359              	WR_feedback:
 360 0002 0000     		.space	2
 361              		.global	WT_FLAG
 362              		.type	WT_FLAG, %object
 363              		.size	WT_FLAG, 1
 364              	WT_FLAG:
 365 0004 00       		.space	1
 366              		.global	WR_FLAG
 367              		.type	WR_FLAG, %object
 368              		.size	WR_FLAG, 1
 369              	WR_FLAG:
 370 0005 00       		.space	1
 371              		.global	ELBOW_FLAG
 372              		.type	ELBOW_FLAG, %object
 373              		.size	ELBOW_FLAG, 1
 374              	ELBOW_FLAG:
 375 0006 00       		.space	1
 376              		.global	SHOULDER_FLAG
 377              		.type	SHOULDER_FLAG, %object
 378              		.size	SHOULDER_FLAG, 1
 379              	SHOULDER_FLAG:
 380 0007 00       		.space	1
 381              		.global	BA_FLAG
 382              		.type	BA_FLAG, %object
 383              		.size	BA_FLAG, 1
 384              	BA_FLAG:
 385 0008 00       		.space	1
 386              		.global	EFFECTOR_FLAG
 387              		.type	EFFECTOR_FLAG, %object
 388              		.size	EFFECTOR_FLAG, 1
 389              	EFFECTOR_FLAG:
 390 0009 00       		.space	1
 391              		.global	ARD_FLAG
 392              		.type	ARD_FLAG, %object
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 9


 393              		.size	ARD_FLAG, 1
 394              	ARD_FLAG:
 395 000a 00       		.space	1
 396              		.global	Time_Out_flag
 397              		.type	Time_Out_flag, %object
 398              		.size	Time_Out_flag, 1
 399              	Time_Out_flag:
 400 000b 00       		.space	1
 401              		.global	Time_count
 402              		.type	Time_count, %object
 403              		.size	Time_count, 1
 404              	Time_count:
 405 000c 00       		.space	1
 406              		.global	fail_safe_errors
 407              		.type	fail_safe_errors, %object
 408              		.size	fail_safe_errors, 1
 409              	fail_safe_errors:
 410 000d 00       		.space	1
 411              		.global	shldr_errors
 412              		.type	shldr_errors, %object
 413              		.size	shldr_errors, 1
 414              	shldr_errors:
 415 000e 00       		.space	1
 416              		.global	elbw_errors
 417              		.type	elbw_errors, %object
 418              		.size	elbw_errors, 1
 419              	elbw_errors:
 420 000f 00       		.space	1
 421              		.global	BA_errors
 422              		.type	BA_errors, %object
 423              		.size	BA_errors, 1
 424              	BA_errors:
 425 0010 00       		.space	1
 426              		.global	WT_errors
 427              		.type	WT_errors, %object
 428              		.size	WT_errors, 1
 429              	WT_errors:
 430 0011 00       		.space	1
 431              		.global	WR_errors
 432              		.type	WR_errors, %object
 433              		.size	WR_errors, 1
 434              	WR_errors:
 435 0012 00       		.space	1
 436              		.global	eff_errors
 437              		.type	eff_errors, %object
 438              		.size	eff_errors, 1
 439              	eff_errors:
 440 0013 00       		.space	1
 441              		.comm	timerFlag,1,1
 442              		.comm	latest_command,2,2
 443              		.comm	latest_WR_command,2,2
 444              		.comm	latest_WT_command,2,2
 445              		.section	.text.timer_isr,"ax",%progbits
 446              		.align	2
 447              		.global	timer_isr
 448              		.code	16
 449              		.thumb_func
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 10


 450              		.type	timer_isr, %function
 451              	timer_isr:
 452              	.LFB37:
 453              		.file 2 ".\\main.c"
   1:.\main.c      **** /* ========================================
   2:.\main.c      ****  *created by Samuel Bury Jan. 31, 2015
   3:.\main.c      **** */
   4:.\main.c      **** 
   5:.\main.c      **** #include "main.h"
   6:.\main.c      **** 
   7:.\main.c      **** //this ISR will be used to set our timeFlag according to our timer component
   8:.\main.c      **** ///set to the time of the longest path for our code
   9:.\main.c      **** //TODO: test how long it takes code to run
  10:.\main.c      **** CY_ISR(timer_isr)
  11:.\main.c      **** {
 454              		.loc 2 11 0
 455              		.cfi_startproc
 456 0000 80B5     		push	{r7, lr}
 457              		.cfi_def_cfa_offset 8
 458              		.cfi_offset 7, -8
 459              		.cfi_offset 14, -4
 460 0002 82B0     		sub	sp, sp, #8
 461              		.cfi_def_cfa_offset 16
 462 0004 00AF     		add	r7, sp, #0
 463              		.cfi_def_cfa_register 7
  12:.\main.c      ****     uint32 isr_var = Timer_1_GetInterruptSourceMasked();
 464              		.loc 2 12 0
 465 0006 FFF7FEFF 		bl	Timer_1_GetInterruptSourceMasked
 466 000a 031C     		mov	r3, r0
 467 000c 7B60     		str	r3, [r7, #4]
  13:.\main.c      ****     timerFlag = 1;
 468              		.loc 2 13 0
 469 000e 054B     		ldr	r3, .L5
 470 0010 0122     		mov	r2, #1
 471 0012 1A70     		strb	r2, [r3]
  14:.\main.c      ****     Timer_1_ClearInterrupt(isr_var);
 472              		.loc 2 14 0
 473 0014 7B68     		ldr	r3, [r7, #4]
 474 0016 181C     		mov	r0, r3
 475 0018 FFF7FEFF 		bl	Timer_1_ClearInterrupt
  15:.\main.c      **** }
 476              		.loc 2 15 0
 477 001c BD46     		mov	sp, r7
 478 001e 02B0     		add	sp, sp, #8
 479              		@ sp needed
 480 0020 80BD     		pop	{r7, pc}
 481              	.L6:
 482 0022 C046     		.align	2
 483              	.L5:
 484 0024 00000000 		.word	timerFlag
 485              		.cfi_endproc
 486              	.LFE37:
 487              		.size	timer_isr, .-timer_isr
 488              		.section	.text.simple_pos_to_vel,"ax",%progbits
 489              		.align	2
 490              		.global	simple_pos_to_vel
 491              		.code	16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 11


 492              		.thumb_func
 493              		.type	simple_pos_to_vel, %function
 494              	simple_pos_to_vel:
 495              	.LFB38:
  16:.\main.c      **** 
  17:.\main.c      **** //Funtion declarations/definitions
  18:.\main.c      **** //TODO: set bounds checking
  19:.\main.c      **** uint16 simple_pos_to_vel(uint16 new_command, uint16 recent_command)
  20:.\main.c      **** {
 496              		.loc 2 20 0
 497              		.cfi_startproc
 498 0000 80B5     		push	{r7, lr}
 499              		.cfi_def_cfa_offset 8
 500              		.cfi_offset 7, -8
 501              		.cfi_offset 14, -4
 502 0002 84B0     		sub	sp, sp, #16
 503              		.cfi_def_cfa_offset 24
 504 0004 00AF     		add	r7, sp, #0
 505              		.cfi_def_cfa_register 7
 506 0006 0A1C     		mov	r2, r1
 507 0008 BB1D     		add	r3, r7, #6
 508 000a 011C     		add	r1, r0, #0
 509 000c 1980     		strh	r1, [r3]
 510 000e 3B1D     		add	r3, r7, #4
 511 0010 1A80     		strh	r2, [r3]
  21:.\main.c      ****     uint16 cur_command;
  22:.\main.c      ****     
  23:.\main.c      ****     if(new_command >= 1000 && new_command < 1250)
 512              		.loc 2 23 0
 513 0012 BB1D     		add	r3, r7, #6
 514 0014 1A88     		ldrh	r2, [r3]
 515 0016 454B     		ldr	r3, .L23
 516 0018 9A42     		cmp	r2, r3
 517 001a 16D9     		bls	.L8
 518              		.loc 2 23 0 is_stmt 0 discriminator 1
 519 001c BB1D     		add	r3, r7, #6
 520 001e 1A88     		ldrh	r2, [r3]
 521 0020 434B     		ldr	r3, .L23+4
 522 0022 9A42     		cmp	r2, r3
 523 0024 11D8     		bhi	.L8
  24:.\main.c      ****     {
  25:.\main.c      ****         if(recent_command > 1002)
 524              		.loc 2 25 0 is_stmt 1
 525 0026 3B1D     		add	r3, r7, #4
 526 0028 1A88     		ldrh	r2, [r3]
 527 002a 424B     		ldr	r3, .L23+8
 528 002c 9A42     		cmp	r2, r3
 529 002e 06D9     		bls	.L9
  26:.\main.c      ****         {
  27:.\main.c      ****             cur_command = recent_command - 2;
 530              		.loc 2 27 0
 531 0030 3B1C     		mov	r3, r7
 532 0032 0E33     		add	r3, r3, #14
 533 0034 3A1D     		add	r2, r7, #4
 534 0036 1288     		ldrh	r2, [r2]
 535 0038 023A     		sub	r2, r2, #2
 536 003a 1A80     		strh	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 12


  25:.\main.c      ****         if(recent_command > 1002)
 537              		.loc 2 25 0
 538 003c 6EE0     		b	.L11
 539              	.L9:
  28:.\main.c      ****         }
  29:.\main.c      ****         else
  30:.\main.c      ****         {
  31:.\main.c      ****             cur_command = 1000;
 540              		.loc 2 31 0
 541 003e 3B1C     		mov	r3, r7
 542 0040 0E33     		add	r3, r3, #14
 543 0042 FA22     		mov	r2, #250
 544 0044 9200     		lsl	r2, r2, #2
 545 0046 1A80     		strh	r2, [r3]
  25:.\main.c      ****         if(recent_command > 1002)
 546              		.loc 2 25 0
 547 0048 68E0     		b	.L11
 548              	.L8:
  32:.\main.c      ****         }
  33:.\main.c      ****     }
  34:.\main.c      ****     else if(new_command >= 1250 && new_command < 1375)
 549              		.loc 2 34 0
 550 004a BB1D     		add	r3, r7, #6
 551 004c 1A88     		ldrh	r2, [r3]
 552 004e 384B     		ldr	r3, .L23+4
 553 0050 9A42     		cmp	r2, r3
 554 0052 16D9     		bls	.L12
 555              		.loc 2 34 0 is_stmt 0 discriminator 1
 556 0054 BB1D     		add	r3, r7, #6
 557 0056 1A88     		ldrh	r2, [r3]
 558 0058 374B     		ldr	r3, .L23+12
 559 005a 9A42     		cmp	r2, r3
 560 005c 11D8     		bhi	.L12
  35:.\main.c      ****     {
  36:.\main.c      ****         if(recent_command > 1001)
 561              		.loc 2 36 0 is_stmt 1
 562 005e 3B1D     		add	r3, r7, #4
 563 0060 1A88     		ldrh	r2, [r3]
 564 0062 364B     		ldr	r3, .L23+16
 565 0064 9A42     		cmp	r2, r3
 566 0066 06D9     		bls	.L13
  37:.\main.c      ****         {
  38:.\main.c      ****             cur_command = recent_command - 1;
 567              		.loc 2 38 0
 568 0068 3B1C     		mov	r3, r7
 569 006a 0E33     		add	r3, r3, #14
 570 006c 3A1D     		add	r2, r7, #4
 571 006e 1288     		ldrh	r2, [r2]
 572 0070 013A     		sub	r2, r2, #1
 573 0072 1A80     		strh	r2, [r3]
  36:.\main.c      ****         if(recent_command > 1001)
 574              		.loc 2 36 0
 575 0074 52E0     		b	.L11
 576              	.L13:
  39:.\main.c      ****         }
  40:.\main.c      ****         else
  41:.\main.c      ****         {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 13


  42:.\main.c      ****             cur_command = 1000;
 577              		.loc 2 42 0
 578 0076 3B1C     		mov	r3, r7
 579 0078 0E33     		add	r3, r3, #14
 580 007a FA22     		mov	r2, #250
 581 007c 9200     		lsl	r2, r2, #2
 582 007e 1A80     		strh	r2, [r3]
  36:.\main.c      ****         if(recent_command > 1001)
 583              		.loc 2 36 0
 584 0080 4CE0     		b	.L11
 585              	.L12:
  43:.\main.c      ****         }    
  44:.\main.c      ****     }
  45:.\main.c      ****     else if(new_command <= 1625 && new_command >= 1375)
 586              		.loc 2 45 0
 587 0082 BB1D     		add	r3, r7, #6
 588 0084 1A88     		ldrh	r2, [r3]
 589 0086 2E4B     		ldr	r3, .L23+20
 590 0088 9A42     		cmp	r2, r3
 591 008a 0AD8     		bhi	.L15
 592              		.loc 2 45 0 is_stmt 0 discriminator 1
 593 008c BB1D     		add	r3, r7, #6
 594 008e 1A88     		ldrh	r2, [r3]
 595 0090 294B     		ldr	r3, .L23+12
 596 0092 9A42     		cmp	r2, r3
 597 0094 05D9     		bls	.L15
  46:.\main.c      ****     {
  47:.\main.c      ****         cur_command = recent_command;
 598              		.loc 2 47 0 is_stmt 1
 599 0096 3B1C     		mov	r3, r7
 600 0098 0E33     		add	r3, r3, #14
 601 009a 3A1D     		add	r2, r7, #4
 602 009c 1288     		ldrh	r2, [r2]
 603 009e 1A80     		strh	r2, [r3]
 604 00a0 3CE0     		b	.L11
 605              	.L15:
  48:.\main.c      ****     }
  49:.\main.c      ****     else if(new_command > 1625 && new_command <= 1750)
 606              		.loc 2 49 0
 607 00a2 BB1D     		add	r3, r7, #6
 608 00a4 1A88     		ldrh	r2, [r3]
 609 00a6 264B     		ldr	r3, .L23+20
 610 00a8 9A42     		cmp	r2, r3
 611 00aa 16D9     		bls	.L16
 612              		.loc 2 49 0 is_stmt 0 discriminator 1
 613 00ac BB1D     		add	r3, r7, #6
 614 00ae 1A88     		ldrh	r2, [r3]
 615 00b0 244B     		ldr	r3, .L23+24
 616 00b2 9A42     		cmp	r2, r3
 617 00b4 11D8     		bhi	.L16
  50:.\main.c      ****     {
  51:.\main.c      ****         if(recent_command < 1999)
 618              		.loc 2 51 0 is_stmt 1
 619 00b6 3B1D     		add	r3, r7, #4
 620 00b8 1A88     		ldrh	r2, [r3]
 621 00ba 234B     		ldr	r3, .L23+28
 622 00bc 9A42     		cmp	r2, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 14


 623 00be 06D8     		bhi	.L17
  52:.\main.c      ****         {
  53:.\main.c      ****             cur_command = recent_command + 1;
 624              		.loc 2 53 0
 625 00c0 3B1C     		mov	r3, r7
 626 00c2 0E33     		add	r3, r3, #14
 627 00c4 3A1D     		add	r2, r7, #4
 628 00c6 1288     		ldrh	r2, [r2]
 629 00c8 0132     		add	r2, r2, #1
 630 00ca 1A80     		strh	r2, [r3]
  51:.\main.c      ****         if(recent_command < 1999)
 631              		.loc 2 51 0
 632 00cc 26E0     		b	.L11
 633              	.L17:
  54:.\main.c      ****         }
  55:.\main.c      ****         else
  56:.\main.c      ****         {
  57:.\main.c      ****             cur_command = 2000;
 634              		.loc 2 57 0
 635 00ce 3B1C     		mov	r3, r7
 636 00d0 0E33     		add	r3, r3, #14
 637 00d2 FA22     		mov	r2, #250
 638 00d4 D200     		lsl	r2, r2, #3
 639 00d6 1A80     		strh	r2, [r3]
  51:.\main.c      ****         if(recent_command < 1999)
 640              		.loc 2 51 0
 641 00d8 20E0     		b	.L11
 642              	.L16:
  58:.\main.c      ****         }
  59:.\main.c      ****     }
  60:.\main.c      ****     else if(new_command > 1750 && new_command <= 2000)
 643              		.loc 2 60 0
 644 00da BB1D     		add	r3, r7, #6
 645 00dc 1A88     		ldrh	r2, [r3]
 646 00de 194B     		ldr	r3, .L23+24
 647 00e0 9A42     		cmp	r2, r3
 648 00e2 17D9     		bls	.L19
 649              		.loc 2 60 0 is_stmt 0 discriminator 1
 650 00e4 BB1D     		add	r3, r7, #6
 651 00e6 1A88     		ldrh	r2, [r3]
 652 00e8 FA23     		mov	r3, #250
 653 00ea DB00     		lsl	r3, r3, #3
 654 00ec 9A42     		cmp	r2, r3
 655 00ee 11D8     		bhi	.L19
  61:.\main.c      ****     {
  62:.\main.c      ****         if(recent_command < 1998)
 656              		.loc 2 62 0 is_stmt 1
 657 00f0 3B1D     		add	r3, r7, #4
 658 00f2 1A88     		ldrh	r2, [r3]
 659 00f4 154B     		ldr	r3, .L23+32
 660 00f6 9A42     		cmp	r2, r3
 661 00f8 06D8     		bhi	.L20
  63:.\main.c      ****         {
  64:.\main.c      ****             cur_command = recent_command + 2;
 662              		.loc 2 64 0
 663 00fa 3B1C     		mov	r3, r7
 664 00fc 0E33     		add	r3, r3, #14
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 15


 665 00fe 3A1D     		add	r2, r7, #4
 666 0100 1288     		ldrh	r2, [r2]
 667 0102 0232     		add	r2, r2, #2
 668 0104 1A80     		strh	r2, [r3]
  62:.\main.c      ****         if(recent_command < 1998)
 669              		.loc 2 62 0
 670 0106 09E0     		b	.L11
 671              	.L20:
  65:.\main.c      ****         }
  66:.\main.c      ****         else
  67:.\main.c      ****         {
  68:.\main.c      ****             cur_command = 2000;
 672              		.loc 2 68 0
 673 0108 3B1C     		mov	r3, r7
 674 010a 0E33     		add	r3, r3, #14
 675 010c FA22     		mov	r2, #250
 676 010e D200     		lsl	r2, r2, #3
 677 0110 1A80     		strh	r2, [r3]
  62:.\main.c      ****         if(recent_command < 1998)
 678              		.loc 2 62 0
 679 0112 03E0     		b	.L11
 680              	.L19:
  69:.\main.c      ****         }
  70:.\main.c      ****     }
  71:.\main.c      ****     else
  72:.\main.c      ****     {
  73:.\main.c      ****         //increment error variable
  74:.\main.c      ****         cur_command = 1500;
 681              		.loc 2 74 0
 682 0114 3B1C     		mov	r3, r7
 683 0116 0E33     		add	r3, r3, #14
 684 0118 0D4A     		ldr	r2, .L23+36
 685 011a 1A80     		strh	r2, [r3]
 686              	.L11:
  75:.\main.c      ****     }
  76:.\main.c      ****     return cur_command;
 687              		.loc 2 76 0
 688 011c 3B1C     		mov	r3, r7
 689 011e 0E33     		add	r3, r3, #14
 690 0120 1B88     		ldrh	r3, [r3]
  77:.\main.c      **** }
 691              		.loc 2 77 0
 692 0122 181C     		mov	r0, r3
 693 0124 BD46     		mov	sp, r7
 694 0126 04B0     		add	sp, sp, #16
 695              		@ sp needed
 696 0128 80BD     		pop	{r7, pc}
 697              	.L24:
 698 012a C046     		.align	2
 699              	.L23:
 700 012c E7030000 		.word	999
 701 0130 E1040000 		.word	1249
 702 0134 EA030000 		.word	1002
 703 0138 5E050000 		.word	1374
 704 013c E9030000 		.word	1001
 705 0140 59060000 		.word	1625
 706 0144 D6060000 		.word	1750
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 16


 707 0148 CE070000 		.word	1998
 708 014c CD070000 		.word	1997
 709 0150 DC050000 		.word	1500
 710              		.cfi_endproc
 711              	.LFE38:
 712              		.size	simple_pos_to_vel, .-simple_pos_to_vel
 713              		.section	.text.WT_pos_to_vel,"ax",%progbits
 714              		.align	2
 715              		.global	WT_pos_to_vel
 716              		.code	16
 717              		.thumb_func
 718              		.type	WT_pos_to_vel, %function
 719              	WT_pos_to_vel:
 720              	.LFB39:
  78:.\main.c      **** 
  79:.\main.c      **** uint16 WT_pos_to_vel(uint16 new_command, uint16 recent_command)
  80:.\main.c      **** {
 721              		.loc 2 80 0
 722              		.cfi_startproc
 723 0000 80B5     		push	{r7, lr}
 724              		.cfi_def_cfa_offset 8
 725              		.cfi_offset 7, -8
 726              		.cfi_offset 14, -4
 727 0002 84B0     		sub	sp, sp, #16
 728              		.cfi_def_cfa_offset 24
 729 0004 00AF     		add	r7, sp, #0
 730              		.cfi_def_cfa_register 7
 731 0006 0A1C     		mov	r2, r1
 732 0008 BB1D     		add	r3, r7, #6
 733 000a 011C     		add	r1, r0, #0
 734 000c 1980     		strh	r1, [r3]
 735 000e 3B1D     		add	r3, r7, #4
 736 0010 1A80     		strh	r2, [r3]
  81:.\main.c      ****     uint16 cur_command;
  82:.\main.c      ****     uint16 change = 12;
 737              		.loc 2 82 0
 738 0012 3B1C     		mov	r3, r7
 739 0014 0C33     		add	r3, r3, #12
 740 0016 0C22     		mov	r2, #12
 741 0018 1A80     		strh	r2, [r3]
  83:.\main.c      ****     
  84:.\main.c      ****     if(new_command >= 1024 && new_command < 2000)
 742              		.loc 2 84 0
 743 001a BB1D     		add	r3, r7, #6
 744 001c 1A88     		ldrh	r2, [r3]
 745 001e 324B     		ldr	r3, .L35
 746 0020 9A42     		cmp	r2, r3
 747 0022 1ED9     		bls	.L26
 748              		.loc 2 84 0 is_stmt 0 discriminator 1
 749 0024 BB1D     		add	r3, r7, #6
 750 0026 1A88     		ldrh	r2, [r3]
 751 0028 304B     		ldr	r3, .L35+4
 752 002a 9A42     		cmp	r2, r3
 753 002c 19D8     		bhi	.L26
  85:.\main.c      ****     {
  86:.\main.c      ****         if(recent_command > (1024 + change))
 754              		.loc 2 86 0 is_stmt 1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 17


 755 002e 3B1D     		add	r3, r7, #4
 756 0030 1A88     		ldrh	r2, [r3]
 757 0032 3B1C     		mov	r3, r7
 758 0034 0C33     		add	r3, r3, #12
 759 0036 1B88     		ldrh	r3, [r3]
 760 0038 8021     		mov	r1, #128
 761 003a C900     		lsl	r1, r1, #3
 762 003c 5B18     		add	r3, r3, r1
 763 003e 9A42     		cmp	r2, r3
 764 0040 09DD     		ble	.L27
  87:.\main.c      ****         {
  88:.\main.c      ****             cur_command = recent_command - change;
 765              		.loc 2 88 0
 766 0042 3B1C     		mov	r3, r7
 767 0044 0E33     		add	r3, r3, #14
 768 0046 391D     		add	r1, r7, #4
 769 0048 3A1C     		mov	r2, r7
 770 004a 0C32     		add	r2, r2, #12
 771 004c 0988     		ldrh	r1, [r1]
 772 004e 1288     		ldrh	r2, [r2]
 773 0050 8A1A     		sub	r2, r1, r2
 774 0052 1A80     		strh	r2, [r3]
  86:.\main.c      ****         if(recent_command > (1024 + change))
 775              		.loc 2 86 0
 776 0054 41E0     		b	.L29
 777              	.L27:
  89:.\main.c      ****         }
  90:.\main.c      ****         else
  91:.\main.c      ****         {
  92:.\main.c      ****             cur_command = 1024;
 778              		.loc 2 92 0
 779 0056 3B1C     		mov	r3, r7
 780 0058 0E33     		add	r3, r3, #14
 781 005a 8022     		mov	r2, #128
 782 005c D200     		lsl	r2, r2, #3
 783 005e 1A80     		strh	r2, [r3]
  86:.\main.c      ****         if(recent_command > (1024 + change))
 784              		.loc 2 86 0
 785 0060 3BE0     		b	.L29
 786              	.L26:
  93:.\main.c      ****         }    
  94:.\main.c      ****     }
  95:.\main.c      ****     else if(new_command <= 2096 && new_command >= 2000)
 787              		.loc 2 95 0
 788 0062 BB1D     		add	r3, r7, #6
 789 0064 1A88     		ldrh	r2, [r3]
 790 0066 8323     		mov	r3, #131
 791 0068 1B01     		lsl	r3, r3, #4
 792 006a 9A42     		cmp	r2, r3
 793 006c 0AD8     		bhi	.L30
 794              		.loc 2 95 0 is_stmt 0 discriminator 1
 795 006e BB1D     		add	r3, r7, #6
 796 0070 1A88     		ldrh	r2, [r3]
 797 0072 1E4B     		ldr	r3, .L35+4
 798 0074 9A42     		cmp	r2, r3
 799 0076 05D9     		bls	.L30
  96:.\main.c      ****     {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 18


  97:.\main.c      ****         cur_command = recent_command;
 800              		.loc 2 97 0 is_stmt 1
 801 0078 3B1C     		mov	r3, r7
 802 007a 0E33     		add	r3, r3, #14
 803 007c 3A1D     		add	r2, r7, #4
 804 007e 1288     		ldrh	r2, [r2]
 805 0080 1A80     		strh	r2, [r3]
 806 0082 2AE0     		b	.L29
 807              	.L30:
  98:.\main.c      ****     }
  99:.\main.c      ****     else if(new_command > 2096 && new_command <= 3072)
 808              		.loc 2 99 0
 809 0084 BB1D     		add	r3, r7, #6
 810 0086 1A88     		ldrh	r2, [r3]
 811 0088 8323     		mov	r3, #131
 812 008a 1B01     		lsl	r3, r3, #4
 813 008c 9A42     		cmp	r2, r3
 814 008e 1FD9     		bls	.L31
 815              		.loc 2 99 0 is_stmt 0 discriminator 1
 816 0090 BB1D     		add	r3, r7, #6
 817 0092 1A88     		ldrh	r2, [r3]
 818 0094 C023     		mov	r3, #192
 819 0096 1B01     		lsl	r3, r3, #4
 820 0098 9A42     		cmp	r2, r3
 821 009a 19D8     		bhi	.L31
 100:.\main.c      ****     {
 101:.\main.c      ****         if(recent_command < (3072 - change))
 822              		.loc 2 101 0 is_stmt 1
 823 009c 3B1D     		add	r3, r7, #4
 824 009e 1A88     		ldrh	r2, [r3]
 825 00a0 3B1C     		mov	r3, r7
 826 00a2 0C33     		add	r3, r3, #12
 827 00a4 1B88     		ldrh	r3, [r3]
 828 00a6 C021     		mov	r1, #192
 829 00a8 0901     		lsl	r1, r1, #4
 830 00aa CB1A     		sub	r3, r1, r3
 831 00ac 9A42     		cmp	r2, r3
 832 00ae 09DA     		bge	.L32
 102:.\main.c      ****         {
 103:.\main.c      ****             cur_command = recent_command + change;
 833              		.loc 2 103 0
 834 00b0 3B1C     		mov	r3, r7
 835 00b2 0E33     		add	r3, r3, #14
 836 00b4 391D     		add	r1, r7, #4
 837 00b6 3A1C     		mov	r2, r7
 838 00b8 0C32     		add	r2, r2, #12
 839 00ba 0988     		ldrh	r1, [r1]
 840 00bc 1288     		ldrh	r2, [r2]
 841 00be 8A18     		add	r2, r1, r2
 842 00c0 1A80     		strh	r2, [r3]
 101:.\main.c      ****         if(recent_command < (3072 - change))
 843              		.loc 2 101 0
 844 00c2 0AE0     		b	.L29
 845              	.L32:
 104:.\main.c      ****         }
 105:.\main.c      ****         else
 106:.\main.c      ****         {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 19


 107:.\main.c      ****             cur_command = 3072;
 846              		.loc 2 107 0
 847 00c4 3B1C     		mov	r3, r7
 848 00c6 0E33     		add	r3, r3, #14
 849 00c8 C022     		mov	r2, #192
 850 00ca 1201     		lsl	r2, r2, #4
 851 00cc 1A80     		strh	r2, [r3]
 101:.\main.c      ****         if(recent_command < (3072 - change))
 852              		.loc 2 101 0
 853 00ce 04E0     		b	.L29
 854              	.L31:
 108:.\main.c      ****         }
 109:.\main.c      ****     }
 110:.\main.c      ****     else
 111:.\main.c      ****     {
 112:.\main.c      ****         //increment error variable
 113:.\main.c      ****         cur_command = 2048;
 855              		.loc 2 113 0
 856 00d0 3B1C     		mov	r3, r7
 857 00d2 0E33     		add	r3, r3, #14
 858 00d4 8022     		mov	r2, #128
 859 00d6 1201     		lsl	r2, r2, #4
 860 00d8 1A80     		strh	r2, [r3]
 861              	.L29:
 114:.\main.c      ****     }
 115:.\main.c      ****     return cur_command;
 862              		.loc 2 115 0
 863 00da 3B1C     		mov	r3, r7
 864 00dc 0E33     		add	r3, r3, #14
 865 00de 1B88     		ldrh	r3, [r3]
 116:.\main.c      **** }
 866              		.loc 2 116 0
 867 00e0 181C     		mov	r0, r3
 868 00e2 BD46     		mov	sp, r7
 869 00e4 04B0     		add	sp, sp, #16
 870              		@ sp needed
 871 00e6 80BD     		pop	{r7, pc}
 872              	.L36:
 873              		.align	2
 874              	.L35:
 875 00e8 FF030000 		.word	1023
 876 00ec CF070000 		.word	1999
 877              		.cfi_endproc
 878              	.LFE39:
 879              		.size	WT_pos_to_vel, .-WT_pos_to_vel
 880              		.section	.text.WR_pos_to_vel,"ax",%progbits
 881              		.align	2
 882              		.global	WR_pos_to_vel
 883              		.code	16
 884              		.thumb_func
 885              		.type	WR_pos_to_vel, %function
 886              	WR_pos_to_vel:
 887              	.LFB40:
 117:.\main.c      **** 
 118:.\main.c      **** uint16 WR_pos_to_vel(uint16 new_command, uint16 recent_command)
 119:.\main.c      **** {
 888              		.loc 2 119 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 20


 889              		.cfi_startproc
 890 0000 80B5     		push	{r7, lr}
 891              		.cfi_def_cfa_offset 8
 892              		.cfi_offset 7, -8
 893              		.cfi_offset 14, -4
 894 0002 84B0     		sub	sp, sp, #16
 895              		.cfi_def_cfa_offset 24
 896 0004 00AF     		add	r7, sp, #0
 897              		.cfi_def_cfa_register 7
 898 0006 0A1C     		mov	r2, r1
 899 0008 BB1D     		add	r3, r7, #6
 900 000a 011C     		add	r1, r0, #0
 901 000c 1980     		strh	r1, [r3]
 902 000e 3B1D     		add	r3, r7, #4
 903 0010 1A80     		strh	r2, [r3]
 120:.\main.c      ****     uint16 cur_command;
 121:.\main.c      ****     uint16 change = 12;
 904              		.loc 2 121 0
 905 0012 3B1C     		mov	r3, r7
 906 0014 0C33     		add	r3, r3, #12
 907 0016 0C22     		mov	r2, #12
 908 0018 1A80     		strh	r2, [r3]
 122:.\main.c      ****     
 123:.\main.c      ****     if(new_command >= 0 && new_command < 2000)
 909              		.loc 2 123 0
 910 001a BB1D     		add	r3, r7, #6
 911 001c 1A88     		ldrh	r2, [r3]
 912 001e 2C4B     		ldr	r3, .L47
 913 0020 9A42     		cmp	r2, r3
 914 0022 15D8     		bhi	.L38
 124:.\main.c      ****     {
 125:.\main.c      ****         if(recent_command > (0+change))
 915              		.loc 2 125 0
 916 0024 3B1D     		add	r3, r7, #4
 917 0026 1A88     		ldrh	r2, [r3]
 918 0028 3B1C     		mov	r3, r7
 919 002a 0C33     		add	r3, r3, #12
 920 002c 1B88     		ldrh	r3, [r3]
 921 002e 9A42     		cmp	r2, r3
 922 0030 09DD     		ble	.L39
 126:.\main.c      ****         {
 127:.\main.c      ****             cur_command = recent_command - change;
 923              		.loc 2 127 0
 924 0032 3B1C     		mov	r3, r7
 925 0034 0E33     		add	r3, r3, #14
 926 0036 391D     		add	r1, r7, #4
 927 0038 3A1C     		mov	r2, r7
 928 003a 0C32     		add	r2, r2, #12
 929 003c 0988     		ldrh	r1, [r1]
 930 003e 1288     		ldrh	r2, [r2]
 931 0040 8A1A     		sub	r2, r1, r2
 932 0042 1A80     		strh	r2, [r3]
 933 0044 3DE0     		b	.L41
 934              	.L39:
 128:.\main.c      ****         }
 129:.\main.c      ****         else
 130:.\main.c      ****         {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 21


 131:.\main.c      ****             cur_command = 0;
 935              		.loc 2 131 0
 936 0046 3B1C     		mov	r3, r7
 937 0048 0E33     		add	r3, r3, #14
 938 004a 0022     		mov	r2, #0
 939 004c 1A80     		strh	r2, [r3]
 940 004e 38E0     		b	.L41
 941              	.L38:
 132:.\main.c      ****         }  
 133:.\main.c      ****     }
 134:.\main.c      ****     else if(new_command <= 2096 && new_command >= 2000)
 942              		.loc 2 134 0
 943 0050 BB1D     		add	r3, r7, #6
 944 0052 1A88     		ldrh	r2, [r3]
 945 0054 8323     		mov	r3, #131
 946 0056 1B01     		lsl	r3, r3, #4
 947 0058 9A42     		cmp	r2, r3
 948 005a 0AD8     		bhi	.L42
 949              		.loc 2 134 0 is_stmt 0 discriminator 1
 950 005c BB1D     		add	r3, r7, #6
 951 005e 1A88     		ldrh	r2, [r3]
 952 0060 1B4B     		ldr	r3, .L47
 953 0062 9A42     		cmp	r2, r3
 954 0064 05D9     		bls	.L42
 135:.\main.c      ****     {
 136:.\main.c      ****         cur_command = recent_command;
 955              		.loc 2 136 0 is_stmt 1
 956 0066 3B1C     		mov	r3, r7
 957 0068 0E33     		add	r3, r3, #14
 958 006a 3A1D     		add	r2, r7, #4
 959 006c 1288     		ldrh	r2, [r2]
 960 006e 1A80     		strh	r2, [r3]
 961 0070 27E0     		b	.L41
 962              	.L42:
 137:.\main.c      ****     }
 138:.\main.c      ****     else if(new_command > 2096 && new_command <= 4095)
 963              		.loc 2 138 0
 964 0072 BB1D     		add	r3, r7, #6
 965 0074 1A88     		ldrh	r2, [r3]
 966 0076 8323     		mov	r3, #131
 967 0078 1B01     		lsl	r3, r3, #4
 968 007a 9A42     		cmp	r2, r3
 969 007c 1CD9     		bls	.L43
 970              		.loc 2 138 0 is_stmt 0 discriminator 1
 971 007e BB1D     		add	r3, r7, #6
 972 0080 1A88     		ldrh	r2, [r3]
 973 0082 144B     		ldr	r3, .L47+4
 974 0084 9A42     		cmp	r2, r3
 975 0086 17D8     		bhi	.L43
 139:.\main.c      ****     {
 140:.\main.c      ****         if(recent_command < (4095 - change))
 976              		.loc 2 140 0 is_stmt 1
 977 0088 3B1D     		add	r3, r7, #4
 978 008a 1A88     		ldrh	r2, [r3]
 979 008c 3B1C     		mov	r3, r7
 980 008e 0C33     		add	r3, r3, #12
 981 0090 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 22


 982 0092 1049     		ldr	r1, .L47+4
 983 0094 CB1A     		sub	r3, r1, r3
 984 0096 9A42     		cmp	r2, r3
 985 0098 09DA     		bge	.L44
 141:.\main.c      ****         {
 142:.\main.c      ****             cur_command = recent_command + change;
 986              		.loc 2 142 0
 987 009a 3B1C     		mov	r3, r7
 988 009c 0E33     		add	r3, r3, #14
 989 009e 391D     		add	r1, r7, #4
 990 00a0 3A1C     		mov	r2, r7
 991 00a2 0C32     		add	r2, r2, #12
 992 00a4 0988     		ldrh	r1, [r1]
 993 00a6 1288     		ldrh	r2, [r2]
 994 00a8 8A18     		add	r2, r1, r2
 995 00aa 1A80     		strh	r2, [r3]
 140:.\main.c      ****         if(recent_command < (4095 - change))
 996              		.loc 2 140 0
 997 00ac 09E0     		b	.L41
 998              	.L44:
 143:.\main.c      ****         }
 144:.\main.c      ****         else
 145:.\main.c      ****         {
 146:.\main.c      ****             cur_command = 4095;
 999              		.loc 2 146 0
 1000 00ae 3B1C     		mov	r3, r7
 1001 00b0 0E33     		add	r3, r3, #14
 1002 00b2 084A     		ldr	r2, .L47+4
 1003 00b4 1A80     		strh	r2, [r3]
 140:.\main.c      ****         if(recent_command < (4095 - change))
 1004              		.loc 2 140 0
 1005 00b6 04E0     		b	.L41
 1006              	.L43:
 147:.\main.c      ****         }
 148:.\main.c      ****     }
 149:.\main.c      ****     else
 150:.\main.c      ****     {
 151:.\main.c      ****         //increment error variable
 152:.\main.c      ****         cur_command = 2048;
 1007              		.loc 2 152 0
 1008 00b8 3B1C     		mov	r3, r7
 1009 00ba 0E33     		add	r3, r3, #14
 1010 00bc 8022     		mov	r2, #128
 1011 00be 1201     		lsl	r2, r2, #4
 1012 00c0 1A80     		strh	r2, [r3]
 1013              	.L41:
 153:.\main.c      ****     }
 154:.\main.c      ****     return cur_command;
 1014              		.loc 2 154 0
 1015 00c2 3B1C     		mov	r3, r7
 1016 00c4 0E33     		add	r3, r3, #14
 1017 00c6 1B88     		ldrh	r3, [r3]
 155:.\main.c      **** }
 1018              		.loc 2 155 0
 1019 00c8 181C     		mov	r0, r3
 1020 00ca BD46     		mov	sp, r7
 1021 00cc 04B0     		add	sp, sp, #16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 23


 1022              		@ sp needed
 1023 00ce 80BD     		pop	{r7, pc}
 1024              	.L48:
 1025              		.align	2
 1026              	.L47:
 1027 00d0 CF070000 		.word	1999
 1028 00d4 FF0F0000 		.word	4095
 1029              		.cfi_endproc
 1030              	.LFE40:
 1031              		.size	WR_pos_to_vel, .-WR_pos_to_vel
 1032              		.section	.text.make_command,"ax",%progbits
 1033              		.align	2
 1034              		.global	make_command
 1035              		.code	16
 1036              		.thumb_func
 1037              		.type	make_command, %function
 1038              	make_command:
 1039              	.LFB41:
 156:.\main.c      **** 
 157:.\main.c      **** uint16 make_command(uint8* info_array, uint8 byte1, uint8 byte2)
 158:.\main.c      **** {
 1040              		.loc 2 158 0
 1041              		.cfi_startproc
 1042 0000 80B5     		push	{r7, lr}
 1043              		.cfi_def_cfa_offset 8
 1044              		.cfi_offset 7, -8
 1045              		.cfi_offset 14, -4
 1046 0002 84B0     		sub	sp, sp, #16
 1047              		.cfi_def_cfa_offset 24
 1048 0004 00AF     		add	r7, sp, #0
 1049              		.cfi_def_cfa_register 7
 1050 0006 7860     		str	r0, [r7, #4]
 1051 0008 FB1C     		add	r3, r7, #3
 1052 000a 1970     		strb	r1, [r3]
 1053 000c BB1C     		add	r3, r7, #2
 1054 000e 1A70     		strb	r2, [r3]
 159:.\main.c      ****     uint16 command;
 160:.\main.c      ****     uint16 temp1; //&&&&&&&&&&&&&&&&&&&&& from int16 to uint16 for temp 1 and 2
 161:.\main.c      ****     uint16 temp2;
 162:.\main.c      ****     int16 temp3;
 163:.\main.c      ****     
 164:.\main.c      ****     temp1 = (info_array[byte1] << 8) & 0xFF00;
 1055              		.loc 2 164 0
 1056 0010 FB1C     		add	r3, r7, #3
 1057 0012 1B78     		ldrb	r3, [r3]
 1058 0014 7A68     		ldr	r2, [r7, #4]
 1059 0016 D318     		add	r3, r2, r3
 1060 0018 1B78     		ldrb	r3, [r3]
 1061 001a 1A02     		lsl	r2, r3, #8
 1062 001c 3B1C     		mov	r3, r7
 1063 001e 0E33     		add	r3, r3, #14
 1064 0020 1A80     		strh	r2, [r3]
 165:.\main.c      ****     temp2 = 0x00FF & (info_array[byte2]);
 1065              		.loc 2 165 0
 1066 0022 BB1C     		add	r3, r7, #2
 1067 0024 1B78     		ldrb	r3, [r3]
 1068 0026 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 24


 1069 0028 D318     		add	r3, r2, r3
 1070 002a 1A78     		ldrb	r2, [r3]
 1071 002c 3B1C     		mov	r3, r7
 1072 002e 0C33     		add	r3, r3, #12
 1073 0030 1A80     		strh	r2, [r3]
 166:.\main.c      ****     temp3 = (int16)(temp1 | temp2);
 1074              		.loc 2 166 0
 1075 0032 3A1C     		mov	r2, r7
 1076 0034 0E32     		add	r2, r2, #14
 1077 0036 3B1C     		mov	r3, r7
 1078 0038 0C33     		add	r3, r3, #12
 1079 003a 1288     		ldrh	r2, [r2]
 1080 003c 1B88     		ldrh	r3, [r3]
 1081 003e 1343     		orr	r3, r2
 1082 0040 9AB2     		uxth	r2, r3
 1083 0042 3B1C     		mov	r3, r7
 1084 0044 0A33     		add	r3, r3, #10
 1085 0046 1A80     		strh	r2, [r3]
 167:.\main.c      ****     command = (uint16)((temp3/2) + 1500);
 1086              		.loc 2 167 0
 1087 0048 3B1C     		mov	r3, r7
 1088 004a 0A33     		add	r3, r3, #10
 1089 004c 0021     		mov	r1, #0
 1090 004e 5B5E     		ldrsh	r3, [r3, r1]
 1091 0050 002B     		cmp	r3, #0
 1092 0052 00DA     		bge	.L50
 1093 0054 0133     		add	r3, r3, #1
 1094              	.L50:
 1095 0056 5B10     		asr	r3, r3, #1
 1096 0058 9BB2     		uxth	r3, r3
 1097 005a 9AB2     		uxth	r2, r3
 1098 005c 3B1C     		mov	r3, r7
 1099 005e 0833     		add	r3, r3, #8
 1100 0060 0449     		ldr	r1, .L52
 1101 0062 5218     		add	r2, r2, r1
 1102 0064 1A80     		strh	r2, [r3]
 168:.\main.c      ****     return command;
 1103              		.loc 2 168 0
 1104 0066 3B1C     		mov	r3, r7
 1105 0068 0833     		add	r3, r3, #8
 1106 006a 1B88     		ldrh	r3, [r3]
 169:.\main.c      **** }
 1107              		.loc 2 169 0
 1108 006c 181C     		mov	r0, r3
 1109 006e BD46     		mov	sp, r7
 1110 0070 04B0     		add	sp, sp, #16
 1111              		@ sp needed
 1112 0072 80BD     		pop	{r7, pc}
 1113              	.L53:
 1114              		.align	2
 1115              	.L52:
 1116 0074 DC050000 		.word	1500
 1117              		.cfi_endproc
 1118              	.LFE41:
 1119              		.size	make_command, .-make_command
 1120              		.section	.text.make_wristRotate_command,"ax",%progbits
 1121              		.align	2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 25


 1122              		.global	make_wristRotate_command
 1123              		.code	16
 1124              		.thumb_func
 1125              		.type	make_wristRotate_command, %function
 1126              	make_wristRotate_command:
 1127              	.LFB42:
 170:.\main.c      **** 
 171:.\main.c      **** uint16 make_wristRotate_command(uint8* info_array, uint8 byte1, uint8 byte2)
 172:.\main.c      **** {
 1128              		.loc 2 172 0
 1129              		.cfi_startproc
 1130 0000 80B5     		push	{r7, lr}
 1131              		.cfi_def_cfa_offset 8
 1132              		.cfi_offset 7, -8
 1133              		.cfi_offset 14, -4
 1134 0002 84B0     		sub	sp, sp, #16
 1135              		.cfi_def_cfa_offset 24
 1136 0004 00AF     		add	r7, sp, #0
 1137              		.cfi_def_cfa_register 7
 1138 0006 7860     		str	r0, [r7, #4]
 1139 0008 FB1C     		add	r3, r7, #3
 1140 000a 1970     		strb	r1, [r3]
 1141 000c BB1C     		add	r3, r7, #2
 1142 000e 1A70     		strb	r2, [r3]
 173:.\main.c      ****     uint16 command;
 174:.\main.c      ****     uint16 temp1; //&&&&&&&&&&&&&&&&&&&&& from int16 to uint16 for temp 1 and 2
 175:.\main.c      ****     uint16 temp2;
 176:.\main.c      ****     int16 temp3;
 177:.\main.c      ****     
 178:.\main.c      ****     temp1 = (info_array[byte1] << 8) & 0xFF00;
 1143              		.loc 2 178 0
 1144 0010 FB1C     		add	r3, r7, #3
 1145 0012 1B78     		ldrb	r3, [r3]
 1146 0014 7A68     		ldr	r2, [r7, #4]
 1147 0016 D318     		add	r3, r2, r3
 1148 0018 1B78     		ldrb	r3, [r3]
 1149 001a 1A02     		lsl	r2, r3, #8
 1150 001c 3B1C     		mov	r3, r7
 1151 001e 0E33     		add	r3, r3, #14
 1152 0020 1A80     		strh	r2, [r3]
 179:.\main.c      ****     temp2 = 0x00FF & (info_array[byte2]);
 1153              		.loc 2 179 0
 1154 0022 BB1C     		add	r3, r7, #2
 1155 0024 1B78     		ldrb	r3, [r3]
 1156 0026 7A68     		ldr	r2, [r7, #4]
 1157 0028 D318     		add	r3, r2, r3
 1158 002a 1A78     		ldrb	r2, [r3]
 1159 002c 3B1C     		mov	r3, r7
 1160 002e 0C33     		add	r3, r3, #12
 1161 0030 1A80     		strh	r2, [r3]
 180:.\main.c      ****     temp3 = (int16)(temp1 | temp2);
 1162              		.loc 2 180 0
 1163 0032 3A1C     		mov	r2, r7
 1164 0034 0E32     		add	r2, r2, #14
 1165 0036 3B1C     		mov	r3, r7
 1166 0038 0C33     		add	r3, r3, #12
 1167 003a 1288     		ldrh	r2, [r2]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 26


 1168 003c 1B88     		ldrh	r3, [r3]
 1169 003e 1343     		orr	r3, r2
 1170 0040 9AB2     		uxth	r2, r3
 1171 0042 3B1C     		mov	r3, r7
 1172 0044 0A33     		add	r3, r3, #10
 1173 0046 1A80     		strh	r2, [r3]
 181:.\main.c      ****     command = (uint16)((2*temp3) + 2048);
 1174              		.loc 2 181 0
 1175 0048 3B1C     		mov	r3, r7
 1176 004a 0A33     		add	r3, r3, #10
 1177 004c 1B88     		ldrh	r3, [r3]
 1178 004e 8022     		mov	r2, #128
 1179 0050 D200     		lsl	r2, r2, #3
 1180 0052 9B18     		add	r3, r3, r2
 1181 0054 9BB2     		uxth	r3, r3
 1182 0056 3A1C     		mov	r2, r7
 1183 0058 0832     		add	r2, r2, #8
 1184 005a DB18     		add	r3, r3, r3
 1185 005c 1380     		strh	r3, [r2]
 182:.\main.c      ****     return command;
 1186              		.loc 2 182 0
 1187 005e 3B1C     		mov	r3, r7
 1188 0060 0833     		add	r3, r3, #8
 1189 0062 1B88     		ldrh	r3, [r3]
 183:.\main.c      **** }
 1190              		.loc 2 183 0
 1191 0064 181C     		mov	r0, r3
 1192 0066 BD46     		mov	sp, r7
 1193 0068 04B0     		add	sp, sp, #16
 1194              		@ sp needed
 1195 006a 80BD     		pop	{r7, pc}
 1196              		.cfi_endproc
 1197              	.LFE42:
 1198              		.size	make_wristRotate_command, .-make_wristRotate_command
 1199              		.section	.text.make_wristTilt_command,"ax",%progbits
 1200              		.align	2
 1201              		.global	make_wristTilt_command
 1202              		.code	16
 1203              		.thumb_func
 1204              		.type	make_wristTilt_command, %function
 1205              	make_wristTilt_command:
 1206              	.LFB43:
 184:.\main.c      **** 
 185:.\main.c      **** uint16 make_wristTilt_command(uint8* info_array, uint8 byte1, uint8 byte2)
 186:.\main.c      **** {
 1207              		.loc 2 186 0
 1208              		.cfi_startproc
 1209 0000 80B5     		push	{r7, lr}
 1210              		.cfi_def_cfa_offset 8
 1211              		.cfi_offset 7, -8
 1212              		.cfi_offset 14, -4
 1213 0002 84B0     		sub	sp, sp, #16
 1214              		.cfi_def_cfa_offset 24
 1215 0004 00AF     		add	r7, sp, #0
 1216              		.cfi_def_cfa_register 7
 1217 0006 7860     		str	r0, [r7, #4]
 1218 0008 FB1C     		add	r3, r7, #3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 27


 1219 000a 1970     		strb	r1, [r3]
 1220 000c BB1C     		add	r3, r7, #2
 1221 000e 1A70     		strb	r2, [r3]
 187:.\main.c      ****     uint16 command;
 188:.\main.c      ****     uint16 temp1; //&&&&&&&&&&&&&&&&&&&&& from int16 to uint16 for temp 1 and 2
 189:.\main.c      ****     uint16 temp2;
 190:.\main.c      ****     int16 temp3;
 191:.\main.c      ****     
 192:.\main.c      ****     temp1 = (info_array[byte1] << 8) & 0xFF00;
 1222              		.loc 2 192 0
 1223 0010 FB1C     		add	r3, r7, #3
 1224 0012 1B78     		ldrb	r3, [r3]
 1225 0014 7A68     		ldr	r2, [r7, #4]
 1226 0016 D318     		add	r3, r2, r3
 1227 0018 1B78     		ldrb	r3, [r3]
 1228 001a 1A02     		lsl	r2, r3, #8
 1229 001c 3B1C     		mov	r3, r7
 1230 001e 0E33     		add	r3, r3, #14
 1231 0020 1A80     		strh	r2, [r3]
 193:.\main.c      ****     temp2 = 0x00FF & (info_array[byte2]);
 1232              		.loc 2 193 0
 1233 0022 BB1C     		add	r3, r7, #2
 1234 0024 1B78     		ldrb	r3, [r3]
 1235 0026 7A68     		ldr	r2, [r7, #4]
 1236 0028 D318     		add	r3, r2, r3
 1237 002a 1A78     		ldrb	r2, [r3]
 1238 002c 3B1C     		mov	r3, r7
 1239 002e 0C33     		add	r3, r3, #12
 1240 0030 1A80     		strh	r2, [r3]
 194:.\main.c      ****     temp3 = (int16)(temp1 | temp2);
 1241              		.loc 2 194 0
 1242 0032 3A1C     		mov	r2, r7
 1243 0034 0E32     		add	r2, r2, #14
 1244 0036 3B1C     		mov	r3, r7
 1245 0038 0C33     		add	r3, r3, #12
 1246 003a 1288     		ldrh	r2, [r2]
 1247 003c 1B88     		ldrh	r3, [r3]
 1248 003e 1343     		orr	r3, r2
 1249 0040 9AB2     		uxth	r2, r3
 1250 0042 3B1C     		mov	r3, r7
 1251 0044 0A33     		add	r3, r3, #10
 1252 0046 1A80     		strh	r2, [r3]
 195:.\main.c      ****     command = (uint16)(temp3 + 2048);
 1253              		.loc 2 195 0
 1254 0048 3B1C     		mov	r3, r7
 1255 004a 0A33     		add	r3, r3, #10
 1256 004c 1A88     		ldrh	r2, [r3]
 1257 004e 3B1C     		mov	r3, r7
 1258 0050 0833     		add	r3, r3, #8
 1259 0052 8021     		mov	r1, #128
 1260 0054 0901     		lsl	r1, r1, #4
 1261 0056 5218     		add	r2, r2, r1
 1262 0058 1A80     		strh	r2, [r3]
 196:.\main.c      ****     return command;
 1263              		.loc 2 196 0
 1264 005a 3B1C     		mov	r3, r7
 1265 005c 0833     		add	r3, r3, #8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 28


 1266 005e 1B88     		ldrh	r3, [r3]
 197:.\main.c      **** }
 1267              		.loc 2 197 0
 1268 0060 181C     		mov	r0, r3
 1269 0062 BD46     		mov	sp, r7
 1270 0064 04B0     		add	sp, sp, #16
 1271              		@ sp needed
 1272 0066 80BD     		pop	{r7, pc}
 1273              		.cfi_endproc
 1274              	.LFE43:
 1275              		.size	make_wristTilt_command, .-make_wristTilt_command
 1276              		.comm	send_packet_state,1,1
 1277              		.section	.text.send_packet,"ax",%progbits
 1278              		.align	2
 1279              		.global	send_packet
 1280              		.code	16
 1281              		.thumb_func
 1282              		.type	send_packet, %function
 1283              	send_packet:
 1284              	.LFB44:
 198:.\main.c      **** 
 199:.\main.c      **** enum send_packet_states {send_start, send_init, send_feedback, send_heartbeat, send_wait} send_pack
 200:.\main.c      **** void send_packet()
 201:.\main.c      **** {
 1285              		.loc 2 201 0
 1286              		.cfi_startproc
 1287 0000 80B5     		push	{r7, lr}
 1288              		.cfi_def_cfa_offset 8
 1289              		.cfi_offset 7, -8
 1290              		.cfi_offset 14, -4
 1291 0002 00AF     		add	r7, sp, #0
 1292              		.cfi_def_cfa_register 7
 202:.\main.c      ****     //compile all of the most recent feedback variables into a packet
 203:.\main.c      ****     //necessary feedback variables: system state, dynamixel read write errors, PID errors
 204:.\main.c      ****     //TODO define system state
 205:.\main.c      ****     //send packet via serial to wiznet
 206:.\main.c      ****     
 207:.\main.c      ****     switch(send_packet_state)
 1293              		.loc 2 207 0
 1294 0004 554B     		ldr	r3, .L79
 1295 0006 1B78     		ldrb	r3, [r3]
 1296 0008 042B     		cmp	r3, #4
 1297 000a 60D8     		bhi	.L59
 1298 000c 9A00     		lsl	r2, r3, #2
 1299 000e 544B     		ldr	r3, .L79+4
 1300 0010 D318     		add	r3, r2, r3
 1301 0012 1B68     		ldr	r3, [r3]
 1302 0014 9F46     		mov	pc, r3
 1303              		.section	.rodata
 1304              		.align	2
 1305              	.L61:
 1306 0000 D6000000 		.word	.L78
 1307 0004 16000000 		.word	.L62
 1308 0008 A8000000 		.word	.L63
 1309 000c B8000000 		.word	.L64
 1310 0010 D6000000 		.word	.L78
 1311              		.section	.text.send_packet
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 29


 1312              	.L62:
 208:.\main.c      ****     {
 209:.\main.c      ****         case send_start:
 210:.\main.c      ****             break;
 211:.\main.c      ****         
 212:.\main.c      ****         case send_init:
 213:.\main.c      ****             feedback_array[0] = 0x02; //0x02
 1313              		.loc 2 213 0
 1314 0016 534B     		ldr	r3, .L79+8
 1315 0018 0222     		mov	r2, #2
 1316 001a 1A70     		strb	r2, [r3]
 214:.\main.c      ****             feedback_array[1] = 0xCA; //0xCA
 1317              		.loc 2 214 0
 1318 001c 514B     		ldr	r3, .L79+8
 1319 001e CA22     		mov	r2, #202
 1320 0020 5A70     		strb	r2, [r3, #1]
 215:.\main.c      ****             feedback_array[2] = 0;
 1321              		.loc 2 215 0
 1322 0022 504B     		ldr	r3, .L79+8
 1323 0024 0022     		mov	r2, #0
 1324 0026 9A70     		strb	r2, [r3, #2]
 216:.\main.c      ****             feedback_array[3] = 0;
 1325              		.loc 2 216 0
 1326 0028 4E4B     		ldr	r3, .L79+8
 1327 002a 0022     		mov	r2, #0
 1328 002c DA70     		strb	r2, [r3, #3]
 217:.\main.c      ****             feedback_array[4] = 0;
 1329              		.loc 2 217 0
 1330 002e 4D4B     		ldr	r3, .L79+8
 1331 0030 0022     		mov	r2, #0
 1332 0032 1A71     		strb	r2, [r3, #4]
 218:.\main.c      ****             feedback_array[5] = 0;
 1333              		.loc 2 218 0
 1334 0034 4B4B     		ldr	r3, .L79+8
 1335 0036 0022     		mov	r2, #0
 1336 0038 5A71     		strb	r2, [r3, #5]
 219:.\main.c      ****             feedback_array[6] = 0;
 1337              		.loc 2 219 0
 1338 003a 4A4B     		ldr	r3, .L79+8
 1339 003c 0022     		mov	r2, #0
 1340 003e 9A71     		strb	r2, [r3, #6]
 220:.\main.c      ****             feedback_array[7] = 0;
 1341              		.loc 2 220 0
 1342 0040 484B     		ldr	r3, .L79+8
 1343 0042 0022     		mov	r2, #0
 1344 0044 DA71     		strb	r2, [r3, #7]
 221:.\main.c      ****             feedback_array[8] = 0;
 1345              		.loc 2 221 0
 1346 0046 474B     		ldr	r3, .L79+8
 1347 0048 0022     		mov	r2, #0
 1348 004a 1A72     		strb	r2, [r3, #8]
 222:.\main.c      ****             feedback_array[9] = 0;
 1349              		.loc 2 222 0
 1350 004c 454B     		ldr	r3, .L79+8
 1351 004e 0022     		mov	r2, #0
 1352 0050 5A72     		strb	r2, [r3, #9]
 223:.\main.c      ****             feedback_array[10] = 0;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 30


 1353              		.loc 2 223 0
 1354 0052 444B     		ldr	r3, .L79+8
 1355 0054 0022     		mov	r2, #0
 1356 0056 9A72     		strb	r2, [r3, #10]
 224:.\main.c      ****             feedback_array[11] = 0;
 1357              		.loc 2 224 0
 1358 0058 424B     		ldr	r3, .L79+8
 1359 005a 0022     		mov	r2, #0
 1360 005c DA72     		strb	r2, [r3, #11]
 225:.\main.c      ****             feedback_array[12] = 0;
 1361              		.loc 2 225 0
 1362 005e 414B     		ldr	r3, .L79+8
 1363 0060 0022     		mov	r2, #0
 1364 0062 1A73     		strb	r2, [r3, #12]
 226:.\main.c      ****             feedback_array[13] = 0;
 1365              		.loc 2 226 0
 1366 0064 3F4B     		ldr	r3, .L79+8
 1367 0066 0022     		mov	r2, #0
 1368 0068 5A73     		strb	r2, [r3, #13]
 227:.\main.c      ****             feedback_array[14] = 0;
 1369              		.loc 2 227 0
 1370 006a 3E4B     		ldr	r3, .L79+8
 1371 006c 0022     		mov	r2, #0
 1372 006e 9A73     		strb	r2, [r3, #14]
 228:.\main.c      ****             feedback_array[15] = 0;
 1373              		.loc 2 228 0
 1374 0070 3C4B     		ldr	r3, .L79+8
 1375 0072 0022     		mov	r2, #0
 1376 0074 DA73     		strb	r2, [r3, #15]
 229:.\main.c      ****             feedback_array[16] = 0;
 1377              		.loc 2 229 0
 1378 0076 3B4B     		ldr	r3, .L79+8
 1379 0078 0022     		mov	r2, #0
 1380 007a 1A74     		strb	r2, [r3, #16]
 230:.\main.c      ****             feedback_array[17] = 0;
 1381              		.loc 2 230 0
 1382 007c 394B     		ldr	r3, .L79+8
 1383 007e 0022     		mov	r2, #0
 1384 0080 5A74     		strb	r2, [r3, #17]
 231:.\main.c      ****             feedback_array[18] = 0;
 1385              		.loc 2 231 0
 1386 0082 384B     		ldr	r3, .L79+8
 1387 0084 0022     		mov	r2, #0
 1388 0086 9A74     		strb	r2, [r3, #18]
 232:.\main.c      ****             feedback_array[19] = 0;
 1389              		.loc 2 232 0
 1390 0088 364B     		ldr	r3, .L79+8
 1391 008a 0022     		mov	r2, #0
 1392 008c DA74     		strb	r2, [r3, #19]
 233:.\main.c      ****             feedback_array[20] = 0;            
 1393              		.loc 2 233 0
 1394 008e 354B     		ldr	r3, .L79+8
 1395 0090 0022     		mov	r2, #0
 1396 0092 1A75     		strb	r2, [r3, #20]
 234:.\main.c      ****             //feedback_array[13] = 0xee;
 235:.\main.c      ****             
 236:.\main.c      ****             heartbeat_array[0] = 0x03;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 31


 1397              		.loc 2 236 0
 1398 0094 344B     		ldr	r3, .L79+12
 1399 0096 0322     		mov	r2, #3
 1400 0098 1A70     		strb	r2, [r3]
 237:.\main.c      ****             heartbeat_array[1] = 0xCA;
 1401              		.loc 2 237 0
 1402 009a 334B     		ldr	r3, .L79+12
 1403 009c CA22     		mov	r2, #202
 1404 009e 5A70     		strb	r2, [r3, #1]
 238:.\main.c      ****             heartbeat_array[2] = 7;
 1405              		.loc 2 238 0
 1406 00a0 314B     		ldr	r3, .L79+12
 1407 00a2 0722     		mov	r2, #7
 1408 00a4 9A70     		strb	r2, [r3, #2]
 239:.\main.c      **** //            heartbeat_array[3] = 7;
 240:.\main.c      **** //            heartbeat_array[4] = 7;
 241:.\main.c      **** //            heartbeat_array[5] = 7;
 242:.\main.c      **** //            heartbeat_array[6] = 7;
 243:.\main.c      **** //            heartbeat_array[7] = 7;
 244:.\main.c      **** //            heartbeat_array[8] = 7;
 245:.\main.c      **** //            heartbeat_array[9] = 7;
 246:.\main.c      **** //            heartbeat_array[10] = 7;
 247:.\main.c      **** //            heartbeat_array[11] = 7;
 248:.\main.c      **** //            heartbeat_array[12] = 7;
 249:.\main.c      **** //            heartbeat_array[13] = 0xee;
 250:.\main.c      ****             break;
 1409              		.loc 2 250 0
 1410 00a6 17E0     		b	.L66
 1411              	.L63:
 251:.\main.c      ****         
 252:.\main.c      ****         case send_feedback:
 253:.\main.c      ****             wiznetWriteUdpFrame(feedback_array, FEEDBACK_ARRAY_SIZE);
 1412              		.loc 2 253 0
 1413 00a8 2E4B     		ldr	r3, .L79+8
 1414 00aa 181C     		mov	r0, r3
 1415 00ac 1521     		mov	r1, #21
 1416 00ae FFF7FEFF 		bl	wiznetWriteUdpFrame
 254:.\main.c      ****             wiznetSend();
 1417              		.loc 2 254 0
 1418 00b2 FFF7FEFF 		bl	wiznetSend
 255:.\main.c      ****             break;
 1419              		.loc 2 255 0
 1420 00b6 0FE0     		b	.L66
 1421              	.L64:
 256:.\main.c      ****         
 257:.\main.c      ****         case send_heartbeat:
 258:.\main.c      ****             wiznetWriteUdpFrame(heartbeat_array, HEARTBEAT_ARRAY_SIZE);
 1422              		.loc 2 258 0
 1423 00b8 2B4B     		ldr	r3, .L79+12
 1424 00ba 181C     		mov	r0, r3
 1425 00bc 0321     		mov	r1, #3
 1426 00be FFF7FEFF 		bl	wiznetWriteUdpFrame
 259:.\main.c      ****             wiznetSend();
 1427              		.loc 2 259 0
 1428 00c2 FFF7FEFF 		bl	wiznetSend
 260:.\main.c      ****             HEARTBEAT_FLAG = 0;
 1429              		.loc 2 260 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 32


 1430 00c6 294B     		ldr	r3, .L79+16
 1431 00c8 0022     		mov	r2, #0
 1432 00ca 1A70     		strb	r2, [r3]
 261:.\main.c      ****             break;
 1433              		.loc 2 261 0
 1434 00cc 04E0     		b	.L66
 1435              	.L59:
 262:.\main.c      ****         
 263:.\main.c      ****         case send_wait:
 264:.\main.c      ****             break;
 265:.\main.c      ****         
 266:.\main.c      ****         default:
 267:.\main.c      ****             send_packet_state = send_start;
 1436              		.loc 2 267 0
 1437 00ce 234B     		ldr	r3, .L79
 1438 00d0 0022     		mov	r2, #0
 1439 00d2 1A70     		strb	r2, [r3]
 268:.\main.c      ****             break;
 1440              		.loc 2 268 0
 1441 00d4 00E0     		b	.L66
 1442              	.L78:
 264:.\main.c      ****             break;
 1443              		.loc 2 264 0
 1444 00d6 C046     		mov	r8, r8
 1445              	.L66:
 269:.\main.c      ****     }
 270:.\main.c      ****     
 271:.\main.c      ****     switch(send_packet_state)
 1446              		.loc 2 271 0
 1447 00d8 204B     		ldr	r3, .L79
 1448 00da 1B78     		ldrb	r3, [r3]
 1449 00dc 042B     		cmp	r3, #4
 1450 00de 37D8     		bhi	.L67
 1451 00e0 9A00     		lsl	r2, r3, #2
 1452 00e2 234B     		ldr	r3, .L79+20
 1453 00e4 D318     		add	r3, r2, r3
 1454 00e6 1B68     		ldr	r3, [r3]
 1455 00e8 9F46     		mov	pc, r3
 1456              		.section	.rodata
 1457              		.align	2
 1458              	.L69:
 1459 0014 EA000000 		.word	.L68
 1460 0018 F2000000 		.word	.L70
 1461 001c FA000000 		.word	.L71
 1462 0020 02010000 		.word	.L72
 1463 0024 0A010000 		.word	.L73
 1464              		.section	.text.send_packet
 1465              	.L68:
 272:.\main.c      ****     {
 273:.\main.c      ****         case send_start:
 274:.\main.c      ****             send_packet_state = send_init;
 1466              		.loc 2 274 0
 1467 00ea 1C4B     		ldr	r3, .L79
 1468 00ec 0122     		mov	r2, #1
 1469 00ee 1A70     		strb	r2, [r3]
 275:.\main.c      ****             break;
 1470              		.loc 2 275 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 33


 1471 00f0 32E0     		b	.L58
 1472              	.L70:
 276:.\main.c      ****         
 277:.\main.c      ****         case send_init:
 278:.\main.c      ****             send_packet_state = send_heartbeat;
 1473              		.loc 2 278 0
 1474 00f2 1A4B     		ldr	r3, .L79
 1475 00f4 0322     		mov	r2, #3
 1476 00f6 1A70     		strb	r2, [r3]
 279:.\main.c      ****             break;
 1477              		.loc 2 279 0
 1478 00f8 2EE0     		b	.L58
 1479              	.L71:
 280:.\main.c      ****         
 281:.\main.c      ****         case send_feedback:
 282:.\main.c      ****             send_packet_state = send_wait;            
 1480              		.loc 2 282 0
 1481 00fa 184B     		ldr	r3, .L79
 1482 00fc 0422     		mov	r2, #4
 1483 00fe 1A70     		strb	r2, [r3]
 283:.\main.c      ****             break;
 1484              		.loc 2 283 0
 1485 0100 2AE0     		b	.L58
 1486              	.L72:
 284:.\main.c      ****         
 285:.\main.c      ****         case send_heartbeat:
 286:.\main.c      ****             send_packet_state = send_wait;
 1487              		.loc 2 286 0
 1488 0102 164B     		ldr	r3, .L79
 1489 0104 0422     		mov	r2, #4
 1490 0106 1A70     		strb	r2, [r3]
 287:.\main.c      ****             break;
 1491              		.loc 2 287 0
 1492 0108 26E0     		b	.L58
 1493              	.L73:
 288:.\main.c      ****         
 289:.\main.c      ****         case send_wait:
 290:.\main.c      ****             if(HEARTBEAT_FLAG && (WIZ_INT_Read() == 0))
 1494              		.loc 2 290 0
 1495 010a 184B     		ldr	r3, .L79+16
 1496 010c 1B78     		ldrb	r3, [r3]
 1497 010e 002B     		cmp	r3, #0
 1498 0110 0AD0     		beq	.L75
 1499              		.loc 2 290 0 is_stmt 0 discriminator 1
 1500 0112 FFF7FEFF 		bl	WIZ_INT_Read
 1501 0116 031C     		mov	r3, r0
 1502 0118 002B     		cmp	r3, #0
 1503 011a 05D1     		bne	.L75
 291:.\main.c      ****             {
 292:.\main.c      ****                 wiznetClearInterrupts();    
 1504              		.loc 2 292 0 is_stmt 1
 1505 011c FFF7FEFF 		bl	wiznetClearInterrupts
 293:.\main.c      ****                 send_packet_state = send_heartbeat;
 1506              		.loc 2 293 0
 1507 0120 0E4B     		ldr	r3, .L79
 1508 0122 0322     		mov	r2, #3
 1509 0124 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 34


 1510 0126 12E0     		b	.L76
 1511              	.L75:
 294:.\main.c      ****             }
 295:.\main.c      ****             else if(!HEARTBEAT_FLAG && (WIZ_INT_Read() == 0))
 1512              		.loc 2 295 0
 1513 0128 104B     		ldr	r3, .L79+16
 1514 012a 1B78     		ldrb	r3, [r3]
 1515 012c 002B     		cmp	r3, #0
 1516 012e 0AD1     		bne	.L77
 1517              		.loc 2 295 0 is_stmt 0 discriminator 1
 1518 0130 FFF7FEFF 		bl	WIZ_INT_Read
 1519 0134 031C     		mov	r3, r0
 1520 0136 002B     		cmp	r3, #0
 1521 0138 05D1     		bne	.L77
 296:.\main.c      ****             {
 297:.\main.c      ****                 wiznetClearInterrupts();    
 1522              		.loc 2 297 0 is_stmt 1
 1523 013a FFF7FEFF 		bl	wiznetClearInterrupts
 298:.\main.c      ****                 send_packet_state = send_feedback;
 1524              		.loc 2 298 0
 1525 013e 074B     		ldr	r3, .L79
 1526 0140 0222     		mov	r2, #2
 1527 0142 1A70     		strb	r2, [r3]
 1528 0144 03E0     		b	.L76
 1529              	.L77:
 299:.\main.c      ****             }
 300:.\main.c      ****             else
 301:.\main.c      ****             {
 302:.\main.c      ****                 send_packet_state = send_wait;
 1530              		.loc 2 302 0
 1531 0146 054B     		ldr	r3, .L79
 1532 0148 0422     		mov	r2, #4
 1533 014a 1A70     		strb	r2, [r3]
 303:.\main.c      ****             }
 304:.\main.c      ****             break;
 1534              		.loc 2 304 0
 1535 014c 04E0     		b	.L58
 1536              	.L76:
 1537 014e 03E0     		b	.L58
 1538              	.L67:
 305:.\main.c      **** 
 306:.\main.c      ****         default:
 307:.\main.c      ****             send_packet_state = send_start;
 1539              		.loc 2 307 0
 1540 0150 024B     		ldr	r3, .L79
 1541 0152 0022     		mov	r2, #0
 1542 0154 1A70     		strb	r2, [r3]
 308:.\main.c      ****             break;
 1543              		.loc 2 308 0
 1544 0156 C046     		mov	r8, r8
 1545              	.L58:
 309:.\main.c      ****     }    
 310:.\main.c      **** }
 1546              		.loc 2 310 0
 1547 0158 BD46     		mov	sp, r7
 1548              		@ sp needed
 1549 015a 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 35


 1550              	.L80:
 1551              		.align	2
 1552              	.L79:
 1553 015c 00000000 		.word	send_packet_state
 1554 0160 00000000 		.word	.L61
 1555 0164 00000000 		.word	feedback_array
 1556 0168 00000000 		.word	heartbeat_array
 1557 016c 00000000 		.word	HEARTBEAT_FLAG
 1558 0170 14000000 		.word	.L69
 1559              		.cfi_endproc
 1560              	.LFE44:
 1561              		.size	send_packet, .-send_packet
 1562              		.section	.text.fill_data_array,"ax",%progbits
 1563              		.align	2
 1564              		.global	fill_data_array
 1565              		.code	16
 1566              		.thumb_func
 1567              		.type	fill_data_array, %function
 1568              	fill_data_array:
 1569              	.LFB45:
 311:.\main.c      **** 
 312:.\main.c      **** //to be used for parsing reading/parsing the data from the wiznet
 313:.\main.c      **** void fill_data_array()
 314:.\main.c      **** {
 1570              		.loc 2 314 0
 1571              		.cfi_startproc
 1572 0000 80B5     		push	{r7, lr}
 1573              		.cfi_def_cfa_offset 8
 1574              		.cfi_offset 7, -8
 1575              		.cfi_offset 14, -4
 1576 0002 00AF     		add	r7, sp, #0
 1577              		.cfi_def_cfa_register 7
 315:.\main.c      ****     wiznetReadUdpFrame(data_array, DATA_ARRAY_SIZE);
 1578              		.loc 2 315 0
 1579 0004 034B     		ldr	r3, .L82
 1580 0006 181C     		mov	r0, r3
 1581 0008 1821     		mov	r1, #24
 1582 000a FFF7FEFF 		bl	wiznetReadUdpFrame
 316:.\main.c      **** }
 1583              		.loc 2 316 0
 1584 000e BD46     		mov	sp, r7
 1585              		@ sp needed
 1586 0010 80BD     		pop	{r7, pc}
 1587              	.L83:
 1588 0012 C046     		.align	2
 1589              	.L82:
 1590 0014 00000000 		.word	data_array
 1591              		.cfi_endproc
 1592              	.LFE45:
 1593              		.size	fill_data_array, .-fill_data_array
 1594              		.comm	wristTilt_state,1,1
 1595              		.section	.text.wristTilt,"ax",%progbits
 1596              		.align	2
 1597              		.global	wristTilt
 1598              		.code	16
 1599              		.thumb_func
 1600              		.type	wristTilt, %function
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 36


 1601              	wristTilt:
 1602              	.LFB46:
 317:.\main.c      **** 
 318:.\main.c      **** enum wristTilt_states {tilt_start, tilt_init, tilt_control, tilt_wait} wristTilt_state;
 319:.\main.c      **** //control the tilting motion of the wrist
 320:.\main.c      **** void wristTilt()
 321:.\main.c      **** {
 1603              		.loc 2 321 0
 1604              		.cfi_startproc
 1605 0000 90B5     		push	{r4, r7, lr}
 1606              		.cfi_def_cfa_offset 12
 1607              		.cfi_offset 4, -12
 1608              		.cfi_offset 7, -8
 1609              		.cfi_offset 14, -4
 1610 0002 83B0     		sub	sp, sp, #12
 1611              		.cfi_def_cfa_offset 24
 1612 0004 00AF     		add	r7, sp, #0
 1613              		.cfi_def_cfa_register 7
 322:.\main.c      ****     uint16 newest_command;
 323:.\main.c      ****     uint16 temp_command;
 324:.\main.c      ****     
 325:.\main.c      ****     switch(wristTilt_state){ //actions
 1614              		.loc 2 325 0
 1615 0006 4A4B     		ldr	r3, .L107
 1616 0008 1B78     		ldrb	r3, [r3]
 1617 000a 012B     		cmp	r3, #1
 1618 000c 08D0     		beq	.L86
 1619 000e 02DC     		bgt	.L87
 1620 0010 002B     		cmp	r3, #0
 1621 0012 56D0     		beq	.L105
 1622 0014 51E0     		b	.L85
 1623              	.L87:
 1624 0016 022B     		cmp	r3, #2
 1625 0018 0DD0     		beq	.L89
 1626 001a 032B     		cmp	r3, #3
 1627 001c 53D0     		beq	.L106
 1628 001e 4CE0     		b	.L85
 1629              	.L86:
 326:.\main.c      ****         case tilt_start:
 327:.\main.c      ****             break;
 328:.\main.c      **** 
 329:.\main.c      ****         case tilt_init:      
 330:.\main.c      ****             ServoGoalPosition(0x02, 2048);
 1630              		.loc 2 330 0
 1631 0020 8023     		mov	r3, #128
 1632 0022 1B01     		lsl	r3, r3, #4
 1633 0024 0220     		mov	r0, #2
 1634 0026 191C     		mov	r1, r3
 1635 0028 FFF7FEFF 		bl	ServoGoalPosition
 331:.\main.c      ****             latest_WT_command = 2048;
 1636              		.loc 2 331 0
 1637 002c 414B     		ldr	r3, .L107+4
 1638 002e 8022     		mov	r2, #128
 1639 0030 1201     		lsl	r2, r2, #4
 1640 0032 1A80     		strh	r2, [r3]
 332:.\main.c      ****             break;
 1641              		.loc 2 332 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 37


 1642 0034 48E0     		b	.L91
 1643              	.L89:
 333:.\main.c      **** 
 334:.\main.c      ****         case tilt_control:
 335:.\main.c      ****             newest_command = make_wristTilt_command(data_array, WT_BYTE_1, WT_BYTE_2);
 1644              		.loc 2 335 0
 1645 0036 BC1D     		add	r4, r7, #6
 1646 0038 3F4B     		ldr	r3, .L107+8
 1647 003a 181C     		mov	r0, r3
 1648 003c 1021     		mov	r1, #16
 1649 003e 1122     		mov	r2, #17
 1650 0040 FFF7FEFF 		bl	make_wristTilt_command
 1651 0044 031C     		mov	r3, r0
 1652 0046 2380     		strh	r3, [r4]
 336:.\main.c      ****             
 337:.\main.c      ****             if(newest_command <= 3072 && newest_command >= 1024)
 1653              		.loc 2 337 0
 1654 0048 BB1D     		add	r3, r7, #6
 1655 004a 1A88     		ldrh	r2, [r3]
 1656 004c C023     		mov	r3, #192
 1657 004e 1B01     		lsl	r3, r3, #4
 1658 0050 9A42     		cmp	r2, r3
 1659 0052 1AD8     		bhi	.L92
 1660              		.loc 2 337 0 is_stmt 0 discriminator 1
 1661 0054 BB1D     		add	r3, r7, #6
 1662 0056 1A88     		ldrh	r2, [r3]
 1663 0058 384B     		ldr	r3, .L107+12
 1664 005a 9A42     		cmp	r2, r3
 1665 005c 15D9     		bls	.L92
 338:.\main.c      ****             {
 339:.\main.c      ****                 LED_Write(0);
 1666              		.loc 2 339 0 is_stmt 1
 1667 005e 0020     		mov	r0, #0
 1668 0060 FFF7FEFF 		bl	LED_Write
 340:.\main.c      ****                 latest_WT_command = WT_pos_to_vel(newest_command, latest_WT_command);
 1669              		.loc 2 340 0
 1670 0064 334B     		ldr	r3, .L107+4
 1671 0066 1B88     		ldrh	r3, [r3]
 1672 0068 BA1D     		add	r2, r7, #6
 1673 006a 1288     		ldrh	r2, [r2]
 1674 006c 101C     		mov	r0, r2
 1675 006e 191C     		mov	r1, r3
 1676 0070 FFF7FEFF 		bl	WT_pos_to_vel
 1677 0074 031C     		mov	r3, r0
 1678 0076 1A1C     		mov	r2, r3
 1679 0078 2E4B     		ldr	r3, .L107+4
 1680 007a 1A80     		strh	r2, [r3]
 341:.\main.c      ****                 ServoGoalPosition(0x02, latest_WT_command);            
 1681              		.loc 2 341 0
 1682 007c 2D4B     		ldr	r3, .L107+4
 1683 007e 1B88     		ldrh	r3, [r3]
 1684 0080 0220     		mov	r0, #2
 1685 0082 191C     		mov	r1, r3
 1686 0084 FFF7FEFF 		bl	ServoGoalPosition
 1687 0088 13E0     		b	.L93
 1688              	.L92:
 342:.\main.c      ****             }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 38


 343:.\main.c      ****             else
 344:.\main.c      ****             {
 345:.\main.c      ****                 //increment error variable
 346:.\main.c      ****                 LED_Write(1);
 1689              		.loc 2 346 0
 1690 008a 0120     		mov	r0, #1
 1691 008c FFF7FEFF 		bl	LED_Write
 347:.\main.c      ****                 temp_command = WT_pos_to_vel(2048, latest_WT_command);
 1692              		.loc 2 347 0
 1693 0090 284B     		ldr	r3, .L107+4
 1694 0092 1B88     		ldrh	r3, [r3]
 1695 0094 3C1D     		add	r4, r7, #4
 1696 0096 8022     		mov	r2, #128
 1697 0098 1201     		lsl	r2, r2, #4
 1698 009a 101C     		mov	r0, r2
 1699 009c 191C     		mov	r1, r3
 1700 009e FFF7FEFF 		bl	WT_pos_to_vel
 1701 00a2 031C     		mov	r3, r0
 1702 00a4 2380     		strh	r3, [r4]
 348:.\main.c      ****                 ServoGoalPosition(0x02, temp_command);
 1703              		.loc 2 348 0
 1704 00a6 3B1D     		add	r3, r7, #4
 1705 00a8 1B88     		ldrh	r3, [r3]
 1706 00aa 0220     		mov	r0, #2
 1707 00ac 191C     		mov	r1, r3
 1708 00ae FFF7FEFF 		bl	ServoGoalPosition
 1709              	.L93:
 349:.\main.c      ****             }
 350:.\main.c      ****             
 351:.\main.c      ****             WT_FLAG = 0;
 1710              		.loc 2 351 0
 1711 00b2 234B     		ldr	r3, .L107+16
 1712 00b4 0022     		mov	r2, #0
 1713 00b6 1A70     		strb	r2, [r3]
 352:.\main.c      ****             break;
 1714              		.loc 2 352 0
 1715 00b8 06E0     		b	.L91
 1716              	.L85:
 353:.\main.c      ****             
 354:.\main.c      ****         case tilt_wait:
 355:.\main.c      ****             break;
 356:.\main.c      ****                         
 357:.\main.c      ****         default:
 358:.\main.c      ****             wristTilt_state = tilt_start;
 1717              		.loc 2 358 0
 1718 00ba 1D4B     		ldr	r3, .L107
 1719 00bc 0022     		mov	r2, #0
 1720 00be 1A70     		strb	r2, [r3]
 359:.\main.c      ****             break;
 1721              		.loc 2 359 0
 1722 00c0 02E0     		b	.L91
 1723              	.L105:
 327:.\main.c      ****             break;
 1724              		.loc 2 327 0
 1725 00c2 C046     		mov	r8, r8
 1726 00c4 00E0     		b	.L91
 1727              	.L106:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 39


 355:.\main.c      ****             break;
 1728              		.loc 2 355 0
 1729 00c6 C046     		mov	r8, r8
 1730              	.L91:
 360:.\main.c      ****     }
 361:.\main.c      ****     
 362:.\main.c      ****     switch(wristTilt_state){ //transitions
 1731              		.loc 2 362 0
 1732 00c8 194B     		ldr	r3, .L107
 1733 00ca 1B78     		ldrb	r3, [r3]
 1734 00cc 012B     		cmp	r3, #1
 1735 00ce 0CD0     		beq	.L95
 1736 00d0 02DC     		bgt	.L96
 1737 00d2 002B     		cmp	r3, #0
 1738 00d4 05D0     		beq	.L97
 1739 00d6 24E0     		b	.L94
 1740              	.L96:
 1741 00d8 022B     		cmp	r3, #2
 1742 00da 0AD0     		beq	.L98
 1743 00dc 032B     		cmp	r3, #3
 1744 00de 14D0     		beq	.L99
 1745 00e0 1FE0     		b	.L94
 1746              	.L97:
 363:.\main.c      ****         case tilt_start:
 364:.\main.c      ****             wristTilt_state = tilt_init;
 1747              		.loc 2 364 0
 1748 00e2 134B     		ldr	r3, .L107
 1749 00e4 0122     		mov	r2, #1
 1750 00e6 1A70     		strb	r2, [r3]
 365:.\main.c      ****             break;
 1751              		.loc 2 365 0
 1752 00e8 1FE0     		b	.L84
 1753              	.L95:
 366:.\main.c      ****         
 367:.\main.c      ****         case tilt_init:
 368:.\main.c      ****             wristTilt_state = tilt_wait;
 1754              		.loc 2 368 0
 1755 00ea 114B     		ldr	r3, .L107
 1756 00ec 0322     		mov	r2, #3
 1757 00ee 1A70     		strb	r2, [r3]
 369:.\main.c      ****             break;
 1758              		.loc 2 369 0
 1759 00f0 1BE0     		b	.L84
 1760              	.L98:
 370:.\main.c      ****         
 371:.\main.c      ****         case tilt_control:
 372:.\main.c      ****             if(WT_FLAG)
 1761              		.loc 2 372 0
 1762 00f2 134B     		ldr	r3, .L107+16
 1763 00f4 1B78     		ldrb	r3, [r3]
 1764 00f6 002B     		cmp	r3, #0
 1765 00f8 03D0     		beq	.L101
 373:.\main.c      ****             {
 374:.\main.c      ****                 wristTilt_state = tilt_control;
 1766              		.loc 2 374 0
 1767 00fa 0D4B     		ldr	r3, .L107
 1768 00fc 0222     		mov	r2, #2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 40


 1769 00fe 1A70     		strb	r2, [r3]
 375:.\main.c      ****             }
 376:.\main.c      ****             else
 377:.\main.c      ****             {
 378:.\main.c      ****                 wristTilt_state = tilt_wait;
 379:.\main.c      ****             }
 380:.\main.c      ****             break;
 1770              		.loc 2 380 0
 1771 0100 13E0     		b	.L84
 1772              	.L101:
 378:.\main.c      ****                 wristTilt_state = tilt_wait;
 1773              		.loc 2 378 0
 1774 0102 0B4B     		ldr	r3, .L107
 1775 0104 0322     		mov	r2, #3
 1776 0106 1A70     		strb	r2, [r3]
 1777              		.loc 2 380 0
 1778 0108 0FE0     		b	.L84
 1779              	.L99:
 381:.\main.c      ****         
 382:.\main.c      ****         case tilt_wait:
 383:.\main.c      ****             if(WT_FLAG)
 1780              		.loc 2 383 0
 1781 010a 0D4B     		ldr	r3, .L107+16
 1782 010c 1B78     		ldrb	r3, [r3]
 1783 010e 002B     		cmp	r3, #0
 1784 0110 03D0     		beq	.L103
 384:.\main.c      ****             {
 385:.\main.c      ****                 wristTilt_state = tilt_control;
 1785              		.loc 2 385 0
 1786 0112 074B     		ldr	r3, .L107
 1787 0114 0222     		mov	r2, #2
 1788 0116 1A70     		strb	r2, [r3]
 386:.\main.c      ****             }
 387:.\main.c      ****             else
 388:.\main.c      ****             {
 389:.\main.c      ****                 wristTilt_state = tilt_wait; 
 390:.\main.c      ****             }
 391:.\main.c      ****             break;
 1789              		.loc 2 391 0
 1790 0118 07E0     		b	.L84
 1791              	.L103:
 389:.\main.c      ****                 wristTilt_state = tilt_wait; 
 1792              		.loc 2 389 0
 1793 011a 054B     		ldr	r3, .L107
 1794 011c 0322     		mov	r2, #3
 1795 011e 1A70     		strb	r2, [r3]
 1796              		.loc 2 391 0
 1797 0120 03E0     		b	.L84
 1798              	.L94:
 392:.\main.c      ****             
 393:.\main.c      ****         default:
 394:.\main.c      ****             wristTilt_state = tilt_start;
 1799              		.loc 2 394 0
 1800 0122 034B     		ldr	r3, .L107
 1801 0124 0022     		mov	r2, #0
 1802 0126 1A70     		strb	r2, [r3]
 395:.\main.c      ****             break;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 41


 1803              		.loc 2 395 0
 1804 0128 C046     		mov	r8, r8
 1805              	.L84:
 396:.\main.c      ****     }  
 397:.\main.c      **** }
 1806              		.loc 2 397 0
 1807 012a BD46     		mov	sp, r7
 1808 012c 03B0     		add	sp, sp, #12
 1809              		@ sp needed
 1810 012e 90BD     		pop	{r4, r7, pc}
 1811              	.L108:
 1812              		.align	2
 1813              	.L107:
 1814 0130 00000000 		.word	wristTilt_state
 1815 0134 00000000 		.word	latest_WT_command
 1816 0138 00000000 		.word	data_array
 1817 013c FF030000 		.word	1023
 1818 0140 00000000 		.word	WT_FLAG
 1819              		.cfi_endproc
 1820              	.LFE46:
 1821              		.size	wristTilt, .-wristTilt
 1822              		.comm	wristRotate_state,1,1
 1823              		.section	.text.wristRotate,"ax",%progbits
 1824              		.align	2
 1825              		.global	wristRotate
 1826              		.code	16
 1827              		.thumb_func
 1828              		.type	wristRotate, %function
 1829              	wristRotate:
 1830              	.LFB47:
 398:.\main.c      **** 
 399:.\main.c      **** enum wristRotate_states {rotate_start, rotate_init, rotate_control, rotate_wait} wristRotate_state;
 400:.\main.c      **** //control the rotating motion of the wrist
 401:.\main.c      **** void wristRotate()
 402:.\main.c      **** {
 1831              		.loc 2 402 0
 1832              		.cfi_startproc
 1833 0000 90B5     		push	{r4, r7, lr}
 1834              		.cfi_def_cfa_offset 12
 1835              		.cfi_offset 4, -12
 1836              		.cfi_offset 7, -8
 1837              		.cfi_offset 14, -4
 1838 0002 83B0     		sub	sp, sp, #12
 1839              		.cfi_def_cfa_offset 24
 1840 0004 00AF     		add	r7, sp, #0
 1841              		.cfi_def_cfa_register 7
 403:.\main.c      ****     uint16 newest_command;
 404:.\main.c      ****     uint16 temp_command;
 405:.\main.c      ****     
 406:.\main.c      ****     switch(wristRotate_state){ //actions
 1842              		.loc 2 406 0
 1843 0006 474B     		ldr	r3, .L132
 1844 0008 1B78     		ldrb	r3, [r3]
 1845 000a 012B     		cmp	r3, #1
 1846 000c 08D0     		beq	.L111
 1847 000e 02DC     		bgt	.L112
 1848 0010 002B     		cmp	r3, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 42


 1849 0012 50D0     		beq	.L130
 1850 0014 4BE0     		b	.L110
 1851              	.L112:
 1852 0016 022B     		cmp	r3, #2
 1853 0018 0DD0     		beq	.L114
 1854 001a 032B     		cmp	r3, #3
 1855 001c 4DD0     		beq	.L131
 1856 001e 46E0     		b	.L110
 1857              	.L111:
 407:.\main.c      ****         case rotate_start:
 408:.\main.c      ****             break;
 409:.\main.c      **** 
 410:.\main.c      ****         case rotate_init:
 411:.\main.c      ****             ServoGoalPosition(0x01, 2048);
 1858              		.loc 2 411 0
 1859 0020 8023     		mov	r3, #128
 1860 0022 1B01     		lsl	r3, r3, #4
 1861 0024 0120     		mov	r0, #1
 1862 0026 191C     		mov	r1, r3
 1863 0028 FFF7FEFF 		bl	ServoGoalPosition
 412:.\main.c      ****             latest_WR_command = 2048;
 1864              		.loc 2 412 0
 1865 002c 3E4B     		ldr	r3, .L132+4
 1866 002e 8022     		mov	r2, #128
 1867 0030 1201     		lsl	r2, r2, #4
 1868 0032 1A80     		strh	r2, [r3]
 413:.\main.c      ****             break;
 1869              		.loc 2 413 0
 1870 0034 42E0     		b	.L116
 1871              	.L114:
 414:.\main.c      **** 
 415:.\main.c      ****         case rotate_control:
 416:.\main.c      ****             newest_command = make_wristRotate_command(data_array, WR_BYTE_1, WR_BYTE_2);
 1872              		.loc 2 416 0
 1873 0036 BC1D     		add	r4, r7, #6
 1874 0038 3C4B     		ldr	r3, .L132+8
 1875 003a 181C     		mov	r0, r3
 1876 003c 1221     		mov	r1, #18
 1877 003e 1322     		mov	r2, #19
 1878 0040 FFF7FEFF 		bl	make_wristRotate_command
 1879 0044 031C     		mov	r3, r0
 1880 0046 2380     		strh	r3, [r4]
 417:.\main.c      ****             
 418:.\main.c      ****             if(newest_command <= 4095 && newest_command >= 0)
 1881              		.loc 2 418 0
 1882 0048 BB1D     		add	r3, r7, #6
 1883 004a 1A88     		ldrh	r2, [r3]
 1884 004c 384B     		ldr	r3, .L132+12
 1885 004e 9A42     		cmp	r2, r3
 1886 0050 15D8     		bhi	.L117
 419:.\main.c      ****             {
 420:.\main.c      ****                 LED_Write(0);
 1887              		.loc 2 420 0
 1888 0052 0020     		mov	r0, #0
 1889 0054 FFF7FEFF 		bl	LED_Write
 421:.\main.c      ****                 latest_WR_command = WR_pos_to_vel(newest_command,latest_WR_command);
 1890              		.loc 2 421 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 43


 1891 0058 334B     		ldr	r3, .L132+4
 1892 005a 1B88     		ldrh	r3, [r3]
 1893 005c BA1D     		add	r2, r7, #6
 1894 005e 1288     		ldrh	r2, [r2]
 1895 0060 101C     		mov	r0, r2
 1896 0062 191C     		mov	r1, r3
 1897 0064 FFF7FEFF 		bl	WR_pos_to_vel
 1898 0068 031C     		mov	r3, r0
 1899 006a 1A1C     		mov	r2, r3
 1900 006c 2E4B     		ldr	r3, .L132+4
 1901 006e 1A80     		strh	r2, [r3]
 422:.\main.c      ****                 ServoGoalPosition(0x01, latest_WR_command);            
 1902              		.loc 2 422 0
 1903 0070 2D4B     		ldr	r3, .L132+4
 1904 0072 1B88     		ldrh	r3, [r3]
 1905 0074 0120     		mov	r0, #1
 1906 0076 191C     		mov	r1, r3
 1907 0078 FFF7FEFF 		bl	ServoGoalPosition
 1908 007c 13E0     		b	.L118
 1909              	.L117:
 423:.\main.c      ****             }
 424:.\main.c      ****             else
 425:.\main.c      ****             {
 426:.\main.c      ****                 //increment error variable
 427:.\main.c      ****                 LED_Write(1);
 1910              		.loc 2 427 0
 1911 007e 0120     		mov	r0, #1
 1912 0080 FFF7FEFF 		bl	LED_Write
 428:.\main.c      ****                 temp_command = WR_pos_to_vel(2048,latest_WR_command);
 1913              		.loc 2 428 0
 1914 0084 284B     		ldr	r3, .L132+4
 1915 0086 1B88     		ldrh	r3, [r3]
 1916 0088 3C1D     		add	r4, r7, #4
 1917 008a 8022     		mov	r2, #128
 1918 008c 1201     		lsl	r2, r2, #4
 1919 008e 101C     		mov	r0, r2
 1920 0090 191C     		mov	r1, r3
 1921 0092 FFF7FEFF 		bl	WR_pos_to_vel
 1922 0096 031C     		mov	r3, r0
 1923 0098 2380     		strh	r3, [r4]
 429:.\main.c      ****                 ServoGoalPosition(0x01, temp_command);
 1924              		.loc 2 429 0
 1925 009a 3B1D     		add	r3, r7, #4
 1926 009c 1B88     		ldrh	r3, [r3]
 1927 009e 0120     		mov	r0, #1
 1928 00a0 191C     		mov	r1, r3
 1929 00a2 FFF7FEFF 		bl	ServoGoalPosition
 1930              	.L118:
 430:.\main.c      ****             }
 431:.\main.c      ****             WR_FLAG = 0;
 1931              		.loc 2 431 0
 1932 00a6 234B     		ldr	r3, .L132+16
 1933 00a8 0022     		mov	r2, #0
 1934 00aa 1A70     		strb	r2, [r3]
 432:.\main.c      ****             break;
 1935              		.loc 2 432 0
 1936 00ac 06E0     		b	.L116
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 44


 1937              	.L110:
 433:.\main.c      ****             
 434:.\main.c      ****         case rotate_wait:
 435:.\main.c      ****             break;
 436:.\main.c      ****  
 437:.\main.c      ****         default:
 438:.\main.c      ****             wristRotate_state = rotate_start;
 1938              		.loc 2 438 0
 1939 00ae 1D4B     		ldr	r3, .L132
 1940 00b0 0022     		mov	r2, #0
 1941 00b2 1A70     		strb	r2, [r3]
 439:.\main.c      ****             break;
 1942              		.loc 2 439 0
 1943 00b4 02E0     		b	.L116
 1944              	.L130:
 408:.\main.c      ****             break;
 1945              		.loc 2 408 0
 1946 00b6 C046     		mov	r8, r8
 1947 00b8 00E0     		b	.L116
 1948              	.L131:
 435:.\main.c      ****             break;
 1949              		.loc 2 435 0
 1950 00ba C046     		mov	r8, r8
 1951              	.L116:
 440:.\main.c      ****     }
 441:.\main.c      ****     
 442:.\main.c      ****     switch(wristRotate_state){ //transitions
 1952              		.loc 2 442 0
 1953 00bc 194B     		ldr	r3, .L132
 1954 00be 1B78     		ldrb	r3, [r3]
 1955 00c0 012B     		cmp	r3, #1
 1956 00c2 0CD0     		beq	.L120
 1957 00c4 02DC     		bgt	.L121
 1958 00c6 002B     		cmp	r3, #0
 1959 00c8 05D0     		beq	.L122
 1960 00ca 24E0     		b	.L119
 1961              	.L121:
 1962 00cc 022B     		cmp	r3, #2
 1963 00ce 0AD0     		beq	.L123
 1964 00d0 032B     		cmp	r3, #3
 1965 00d2 14D0     		beq	.L124
 1966 00d4 1FE0     		b	.L119
 1967              	.L122:
 443:.\main.c      ****         case rotate_start:
 444:.\main.c      ****             wristRotate_state = rotate_init;
 1968              		.loc 2 444 0
 1969 00d6 134B     		ldr	r3, .L132
 1970 00d8 0122     		mov	r2, #1
 1971 00da 1A70     		strb	r2, [r3]
 445:.\main.c      ****             break;
 1972              		.loc 2 445 0
 1973 00dc 1FE0     		b	.L109
 1974              	.L120:
 446:.\main.c      ****         
 447:.\main.c      ****         case rotate_init:
 448:.\main.c      ****             wristRotate_state = rotate_wait;
 1975              		.loc 2 448 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 45


 1976 00de 114B     		ldr	r3, .L132
 1977 00e0 0322     		mov	r2, #3
 1978 00e2 1A70     		strb	r2, [r3]
 449:.\main.c      ****             break;
 1979              		.loc 2 449 0
 1980 00e4 1BE0     		b	.L109
 1981              	.L123:
 450:.\main.c      ****         
 451:.\main.c      ****         case rotate_control:
 452:.\main.c      ****             if(WR_FLAG)
 1982              		.loc 2 452 0
 1983 00e6 134B     		ldr	r3, .L132+16
 1984 00e8 1B78     		ldrb	r3, [r3]
 1985 00ea 002B     		cmp	r3, #0
 1986 00ec 03D0     		beq	.L126
 453:.\main.c      ****             {
 454:.\main.c      ****                 wristRotate_state = rotate_control;
 1987              		.loc 2 454 0
 1988 00ee 0D4B     		ldr	r3, .L132
 1989 00f0 0222     		mov	r2, #2
 1990 00f2 1A70     		strb	r2, [r3]
 455:.\main.c      ****             }
 456:.\main.c      ****             else
 457:.\main.c      ****             {
 458:.\main.c      ****                 wristRotate_state = rotate_wait;
 459:.\main.c      ****             }
 460:.\main.c      ****             break;
 1991              		.loc 2 460 0
 1992 00f4 13E0     		b	.L109
 1993              	.L126:
 458:.\main.c      ****                 wristRotate_state = rotate_wait;
 1994              		.loc 2 458 0
 1995 00f6 0B4B     		ldr	r3, .L132
 1996 00f8 0322     		mov	r2, #3
 1997 00fa 1A70     		strb	r2, [r3]
 1998              		.loc 2 460 0
 1999 00fc 0FE0     		b	.L109
 2000              	.L124:
 461:.\main.c      ****         
 462:.\main.c      ****         case rotate_wait:
 463:.\main.c      ****             if(WR_FLAG)
 2001              		.loc 2 463 0
 2002 00fe 0D4B     		ldr	r3, .L132+16
 2003 0100 1B78     		ldrb	r3, [r3]
 2004 0102 002B     		cmp	r3, #0
 2005 0104 03D0     		beq	.L128
 464:.\main.c      ****             {
 465:.\main.c      ****                 wristRotate_state = rotate_control;
 2006              		.loc 2 465 0
 2007 0106 074B     		ldr	r3, .L132
 2008 0108 0222     		mov	r2, #2
 2009 010a 1A70     		strb	r2, [r3]
 466:.\main.c      ****             }
 467:.\main.c      ****             else
 468:.\main.c      ****             {
 469:.\main.c      ****                 wristRotate_state = rotate_wait;
 470:.\main.c      ****             }
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 46


 471:.\main.c      ****             break;
 2010              		.loc 2 471 0
 2011 010c 07E0     		b	.L109
 2012              	.L128:
 469:.\main.c      ****                 wristRotate_state = rotate_wait;
 2013              		.loc 2 469 0
 2014 010e 054B     		ldr	r3, .L132
 2015 0110 0322     		mov	r2, #3
 2016 0112 1A70     		strb	r2, [r3]
 2017              		.loc 2 471 0
 2018 0114 03E0     		b	.L109
 2019              	.L119:
 472:.\main.c      ****             
 473:.\main.c      ****         default:
 474:.\main.c      ****             wristRotate_state = rotate_start;
 2020              		.loc 2 474 0
 2021 0116 034B     		ldr	r3, .L132
 2022 0118 0022     		mov	r2, #0
 2023 011a 1A70     		strb	r2, [r3]
 475:.\main.c      ****             break;
 2024              		.loc 2 475 0
 2025 011c C046     		mov	r8, r8
 2026              	.L109:
 476:.\main.c      ****     }  
 477:.\main.c      **** }
 2027              		.loc 2 477 0
 2028 011e BD46     		mov	sp, r7
 2029 0120 03B0     		add	sp, sp, #12
 2030              		@ sp needed
 2031 0122 90BD     		pop	{r4, r7, pc}
 2032              	.L133:
 2033              		.align	2
 2034              	.L132:
 2035 0124 00000000 		.word	wristRotate_state
 2036 0128 00000000 		.word	latest_WR_command
 2037 012c 00000000 		.word	data_array
 2038 0130 FF0F0000 		.word	4095
 2039 0134 00000000 		.word	WR_FLAG
 2040              		.cfi_endproc
 2041              	.LFE47:
 2042              		.size	wristRotate, .-wristRotate
 2043              		.comm	elbow_state,1,1
 2044              		.section	.text.elbow,"ax",%progbits
 2045              		.align	2
 2046              		.global	elbow
 2047              		.code	16
 2048              		.thumb_func
 2049              		.type	elbow, %function
 2050              	elbow:
 2051              	.LFB48:
 478:.\main.c      **** 
 479:.\main.c      **** //control the elbow
 480:.\main.c      **** enum elbow_states {elbw_start,elbw_init,elbw_execute,elbw_wait} elbow_state;
 481:.\main.c      **** void elbow()
 482:.\main.c      **** { 
 2052              		.loc 2 482 0
 2053              		.cfi_startproc
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 47


 2054 0000 90B5     		push	{r4, r7, lr}
 2055              		.cfi_def_cfa_offset 12
 2056              		.cfi_offset 4, -12
 2057              		.cfi_offset 7, -8
 2058              		.cfi_offset 14, -4
 2059 0002 83B0     		sub	sp, sp, #12
 2060              		.cfi_def_cfa_offset 24
 2061 0004 00AF     		add	r7, sp, #0
 2062              		.cfi_def_cfa_register 7
 483:.\main.c      ****     uint16 command;
 484:.\main.c      ****         
 485:.\main.c      ****     switch(elbow_state){ //actions
 2063              		.loc 2 485 0
 2064 0006 3B4B     		ldr	r3, .L157
 2065 0008 1B78     		ldrb	r3, [r3]
 2066 000a 012B     		cmp	r3, #1
 2067 000c 08D0     		beq	.L136
 2068 000e 02DC     		bgt	.L137
 2069 0010 002B     		cmp	r3, #0
 2070 0012 38D0     		beq	.L155
 2071 0014 33E0     		b	.L135
 2072              	.L137:
 2073 0016 022B     		cmp	r3, #2
 2074 0018 08D0     		beq	.L139
 2075 001a 032B     		cmp	r3, #3
 2076 001c 35D0     		beq	.L156
 2077 001e 2EE0     		b	.L135
 2078              	.L136:
 486:.\main.c      ****         case elbw_start:
 487:.\main.c      ****             break;
 488:.\main.c      **** 
 489:.\main.c      ****         case elbw_init:
 490:.\main.c      ****             ELBW_PWM_WriteCompare(NEUTRAL);
 2079              		.loc 2 490 0
 2080 0020 354B     		ldr	r3, .L157+4
 2081 0022 1B88     		ldrh	r3, [r3]
 2082 0024 181C     		mov	r0, r3
 2083 0026 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 491:.\main.c      ****             break;
 2084              		.loc 2 491 0
 2085 002a 2FE0     		b	.L141
 2086              	.L139:
 492:.\main.c      **** 
 493:.\main.c      ****         case elbw_execute:
 494:.\main.c      ****             command = make_command(data_array, ELBW_BYTE_1, ELBW_BYTE_2);
 2087              		.loc 2 494 0
 2088 002c BC1D     		add	r4, r7, #6
 2089 002e 334B     		ldr	r3, .L157+8
 2090 0030 181C     		mov	r0, r3
 2091 0032 0E21     		mov	r1, #14
 2092 0034 0F22     		mov	r2, #15
 2093 0036 FFF7FEFF 		bl	make_command
 2094 003a 031C     		mov	r3, r0
 2095 003c 2380     		strh	r3, [r4]
 495:.\main.c      ****             
 496:.\main.c      ****             if(command <= 2000 && command >= 1000)
 2096              		.loc 2 496 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 48


 2097 003e BB1D     		add	r3, r7, #6
 2098 0040 1A88     		ldrh	r2, [r3]
 2099 0042 FA23     		mov	r3, #250
 2100 0044 DB00     		lsl	r3, r3, #3
 2101 0046 9A42     		cmp	r2, r3
 2102 0048 0DD8     		bhi	.L142
 2103              		.loc 2 496 0 is_stmt 0 discriminator 1
 2104 004a BB1D     		add	r3, r7, #6
 2105 004c 1A88     		ldrh	r2, [r3]
 2106 004e 2C4B     		ldr	r3, .L157+12
 2107 0050 9A42     		cmp	r2, r3
 2108 0052 08D9     		bls	.L142
 497:.\main.c      ****             {
 498:.\main.c      ****                 LED_Write(0);
 2109              		.loc 2 498 0 is_stmt 1
 2110 0054 0020     		mov	r0, #0
 2111 0056 FFF7FEFF 		bl	LED_Write
 499:.\main.c      ****                 ELBW_PWM_WriteCompare(command);
 2112              		.loc 2 499 0
 2113 005a BB1D     		add	r3, r7, #6
 2114 005c 1B88     		ldrh	r3, [r3]
 2115 005e 181C     		mov	r0, r3
 2116 0060 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2117 0064 07E0     		b	.L143
 2118              	.L142:
 500:.\main.c      ****             }
 501:.\main.c      ****             else
 502:.\main.c      ****             {
 503:.\main.c      ****                 //increment error variable
 504:.\main.c      ****                 LED_Write(1);
 2119              		.loc 2 504 0
 2120 0066 0120     		mov	r0, #1
 2121 0068 FFF7FEFF 		bl	LED_Write
 505:.\main.c      ****                 ELBW_PWM_WriteCompare(NEUTRAL);
 2122              		.loc 2 505 0
 2123 006c 224B     		ldr	r3, .L157+4
 2124 006e 1B88     		ldrh	r3, [r3]
 2125 0070 181C     		mov	r0, r3
 2126 0072 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 2127              	.L143:
 506:.\main.c      ****             }
 507:.\main.c      ****             ELBOW_FLAG = 0;
 2128              		.loc 2 507 0
 2129 0076 234B     		ldr	r3, .L157+16
 2130 0078 0022     		mov	r2, #0
 2131 007a 1A70     		strb	r2, [r3]
 508:.\main.c      ****             break;
 2132              		.loc 2 508 0
 2133 007c 06E0     		b	.L141
 2134              	.L135:
 509:.\main.c      ****             
 510:.\main.c      ****         case elbw_wait:
 511:.\main.c      ****             break;
 512:.\main.c      ****                         
 513:.\main.c      ****         default:
 514:.\main.c      ****             elbow_state = elbw_start;
 2135              		.loc 2 514 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 49


 2136 007e 1D4B     		ldr	r3, .L157
 2137 0080 0022     		mov	r2, #0
 2138 0082 1A70     		strb	r2, [r3]
 515:.\main.c      ****             break;
 2139              		.loc 2 515 0
 2140 0084 02E0     		b	.L141
 2141              	.L155:
 487:.\main.c      ****             break;
 2142              		.loc 2 487 0
 2143 0086 C046     		mov	r8, r8
 2144 0088 00E0     		b	.L141
 2145              	.L156:
 511:.\main.c      ****             break;
 2146              		.loc 2 511 0
 2147 008a C046     		mov	r8, r8
 2148              	.L141:
 516:.\main.c      ****     }
 517:.\main.c      ****     
 518:.\main.c      ****     switch(elbow_state){ //transitions
 2149              		.loc 2 518 0
 2150 008c 194B     		ldr	r3, .L157
 2151 008e 1B78     		ldrb	r3, [r3]
 2152 0090 012B     		cmp	r3, #1
 2153 0092 0CD0     		beq	.L145
 2154 0094 02DC     		bgt	.L146
 2155 0096 002B     		cmp	r3, #0
 2156 0098 05D0     		beq	.L147
 2157 009a 24E0     		b	.L144
 2158              	.L146:
 2159 009c 022B     		cmp	r3, #2
 2160 009e 0AD0     		beq	.L148
 2161 00a0 032B     		cmp	r3, #3
 2162 00a2 14D0     		beq	.L149
 2163 00a4 1FE0     		b	.L144
 2164              	.L147:
 519:.\main.c      ****         case elbw_start:
 520:.\main.c      ****             elbow_state = elbw_init;
 2165              		.loc 2 520 0
 2166 00a6 134B     		ldr	r3, .L157
 2167 00a8 0122     		mov	r2, #1
 2168 00aa 1A70     		strb	r2, [r3]
 521:.\main.c      ****             break;
 2169              		.loc 2 521 0
 2170 00ac 1FE0     		b	.L134
 2171              	.L145:
 522:.\main.c      ****         
 523:.\main.c      ****         case elbw_init:
 524:.\main.c      ****             elbow_state = elbw_wait;
 2172              		.loc 2 524 0
 2173 00ae 114B     		ldr	r3, .L157
 2174 00b0 0322     		mov	r2, #3
 2175 00b2 1A70     		strb	r2, [r3]
 525:.\main.c      ****             break;
 2176              		.loc 2 525 0
 2177 00b4 1BE0     		b	.L134
 2178              	.L148:
 526:.\main.c      ****         
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 50


 527:.\main.c      ****         case elbw_execute:
 528:.\main.c      ****             if(ELBOW_FLAG)
 2179              		.loc 2 528 0
 2180 00b6 134B     		ldr	r3, .L157+16
 2181 00b8 1B78     		ldrb	r3, [r3]
 2182 00ba 002B     		cmp	r3, #0
 2183 00bc 03D0     		beq	.L151
 529:.\main.c      ****             {
 530:.\main.c      ****                 elbow_state = elbw_execute;
 2184              		.loc 2 530 0
 2185 00be 0D4B     		ldr	r3, .L157
 2186 00c0 0222     		mov	r2, #2
 2187 00c2 1A70     		strb	r2, [r3]
 531:.\main.c      ****             }
 532:.\main.c      ****             else
 533:.\main.c      ****             {
 534:.\main.c      ****                 elbow_state = elbw_wait;
 535:.\main.c      ****             }
 536:.\main.c      ****             break;
 2188              		.loc 2 536 0
 2189 00c4 13E0     		b	.L134
 2190              	.L151:
 534:.\main.c      ****                 elbow_state = elbw_wait;
 2191              		.loc 2 534 0
 2192 00c6 0B4B     		ldr	r3, .L157
 2193 00c8 0322     		mov	r2, #3
 2194 00ca 1A70     		strb	r2, [r3]
 2195              		.loc 2 536 0
 2196 00cc 0FE0     		b	.L134
 2197              	.L149:
 537:.\main.c      ****         
 538:.\main.c      ****         case elbw_wait:
 539:.\main.c      ****             if(ELBOW_FLAG)
 2198              		.loc 2 539 0
 2199 00ce 0D4B     		ldr	r3, .L157+16
 2200 00d0 1B78     		ldrb	r3, [r3]
 2201 00d2 002B     		cmp	r3, #0
 2202 00d4 03D0     		beq	.L153
 540:.\main.c      ****             {
 541:.\main.c      ****                 elbow_state = elbw_execute;
 2203              		.loc 2 541 0
 2204 00d6 074B     		ldr	r3, .L157
 2205 00d8 0222     		mov	r2, #2
 2206 00da 1A70     		strb	r2, [r3]
 542:.\main.c      ****             }
 543:.\main.c      ****             else
 544:.\main.c      ****             {
 545:.\main.c      ****                 elbow_state = elbw_wait; 
 546:.\main.c      ****             }
 547:.\main.c      ****             break;
 2207              		.loc 2 547 0
 2208 00dc 07E0     		b	.L134
 2209              	.L153:
 545:.\main.c      ****                 elbow_state = elbw_wait; 
 2210              		.loc 2 545 0
 2211 00de 054B     		ldr	r3, .L157
 2212 00e0 0322     		mov	r2, #3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 51


 2213 00e2 1A70     		strb	r2, [r3]
 2214              		.loc 2 547 0
 2215 00e4 03E0     		b	.L134
 2216              	.L144:
 548:.\main.c      ****             
 549:.\main.c      ****         default:
 550:.\main.c      ****             elbow_state = elbw_start;
 2217              		.loc 2 550 0
 2218 00e6 034B     		ldr	r3, .L157
 2219 00e8 0022     		mov	r2, #0
 2220 00ea 1A70     		strb	r2, [r3]
 551:.\main.c      ****             break;
 2221              		.loc 2 551 0
 2222 00ec C046     		mov	r8, r8
 2223              	.L134:
 552:.\main.c      ****     }
 553:.\main.c      **** }
 2224              		.loc 2 553 0
 2225 00ee BD46     		mov	sp, r7
 2226 00f0 03B0     		add	sp, sp, #12
 2227              		@ sp needed
 2228 00f2 90BD     		pop	{r4, r7, pc}
 2229              	.L158:
 2230              		.align	2
 2231              	.L157:
 2232 00f4 00000000 		.word	elbow_state
 2233 00f8 00000000 		.word	NEUTRAL
 2234 00fc 00000000 		.word	data_array
 2235 0100 E7030000 		.word	999
 2236 0104 00000000 		.word	ELBOW_FLAG
 2237              		.cfi_endproc
 2238              	.LFE48:
 2239              		.size	elbow, .-elbow
 2240              		.comm	shoulder_state,1,1
 2241              		.section	.text.shoulder,"ax",%progbits
 2242              		.align	2
 2243              		.global	shoulder
 2244              		.code	16
 2245              		.thumb_func
 2246              		.type	shoulder, %function
 2247              	shoulder:
 2248              	.LFB49:
 554:.\main.c      **** 
 555:.\main.c      **** //control the shoulder
 556:.\main.c      **** enum shoulder_states {shldr_start,shldr_init,shldr_execute,shldr_wait} shoulder_state;
 557:.\main.c      **** void shoulder()
 558:.\main.c      **** { 
 2249              		.loc 2 558 0
 2250              		.cfi_startproc
 2251 0000 90B5     		push	{r4, r7, lr}
 2252              		.cfi_def_cfa_offset 12
 2253              		.cfi_offset 4, -12
 2254              		.cfi_offset 7, -8
 2255              		.cfi_offset 14, -4
 2256 0002 83B0     		sub	sp, sp, #12
 2257              		.cfi_def_cfa_offset 24
 2258 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 52


 2259              		.cfi_def_cfa_register 7
 559:.\main.c      ****     uint16 command;
 560:.\main.c      ****         
 561:.\main.c      ****     switch(shoulder_state){ //actions
 2260              		.loc 2 561 0
 2261 0006 3B4B     		ldr	r3, .L182
 2262 0008 1B78     		ldrb	r3, [r3]
 2263 000a 012B     		cmp	r3, #1
 2264 000c 08D0     		beq	.L161
 2265 000e 02DC     		bgt	.L162
 2266 0010 002B     		cmp	r3, #0
 2267 0012 38D0     		beq	.L180
 2268 0014 33E0     		b	.L160
 2269              	.L162:
 2270 0016 022B     		cmp	r3, #2
 2271 0018 08D0     		beq	.L164
 2272 001a 032B     		cmp	r3, #3
 2273 001c 35D0     		beq	.L181
 2274 001e 2EE0     		b	.L160
 2275              	.L161:
 562:.\main.c      ****         case shldr_start:
 563:.\main.c      ****             break;
 564:.\main.c      **** 
 565:.\main.c      ****         case shldr_init:
 566:.\main.c      ****             SHLDR_PWM_WriteCompare(NEUTRAL);
 2276              		.loc 2 566 0
 2277 0020 354B     		ldr	r3, .L182+4
 2278 0022 1B88     		ldrh	r3, [r3]
 2279 0024 181C     		mov	r0, r3
 2280 0026 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 567:.\main.c      ****             break;
 2281              		.loc 2 567 0
 2282 002a 2FE0     		b	.L166
 2283              	.L164:
 568:.\main.c      **** 
 569:.\main.c      ****         case shldr_execute:
 570:.\main.c      ****             command = make_command(data_array, SHLDR_BYTE_1, SHLDR_BYTE_2);
 2284              		.loc 2 570 0
 2285 002c BC1D     		add	r4, r7, #6
 2286 002e 334B     		ldr	r3, .L182+8
 2287 0030 181C     		mov	r0, r3
 2288 0032 0C21     		mov	r1, #12
 2289 0034 0D22     		mov	r2, #13
 2290 0036 FFF7FEFF 		bl	make_command
 2291 003a 031C     		mov	r3, r0
 2292 003c 2380     		strh	r3, [r4]
 571:.\main.c      ****             
 572:.\main.c      ****             if(command <= 2000 && command >= 1000) //changed from avg
 2293              		.loc 2 572 0
 2294 003e BB1D     		add	r3, r7, #6
 2295 0040 1A88     		ldrh	r2, [r3]
 2296 0042 FA23     		mov	r3, #250
 2297 0044 DB00     		lsl	r3, r3, #3
 2298 0046 9A42     		cmp	r2, r3
 2299 0048 0DD8     		bhi	.L167
 2300              		.loc 2 572 0 is_stmt 0 discriminator 1
 2301 004a BB1D     		add	r3, r7, #6
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 53


 2302 004c 1A88     		ldrh	r2, [r3]
 2303 004e 2C4B     		ldr	r3, .L182+12
 2304 0050 9A42     		cmp	r2, r3
 2305 0052 08D9     		bls	.L167
 573:.\main.c      ****             {
 574:.\main.c      ****                 LED_Write(0);
 2306              		.loc 2 574 0 is_stmt 1
 2307 0054 0020     		mov	r0, #0
 2308 0056 FFF7FEFF 		bl	LED_Write
 575:.\main.c      ****                 SHLDR_PWM_WriteCompare(command);
 2309              		.loc 2 575 0
 2310 005a BB1D     		add	r3, r7, #6
 2311 005c 1B88     		ldrh	r3, [r3]
 2312 005e 181C     		mov	r0, r3
 2313 0060 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2314 0064 07E0     		b	.L168
 2315              	.L167:
 576:.\main.c      ****             }
 577:.\main.c      ****             else
 578:.\main.c      ****             {
 579:.\main.c      ****                 //increment error variable
 580:.\main.c      ****                 LED_Write(1);
 2316              		.loc 2 580 0
 2317 0066 0120     		mov	r0, #1
 2318 0068 FFF7FEFF 		bl	LED_Write
 581:.\main.c      ****                 SHLDR_PWM_WriteCompare(NEUTRAL);
 2319              		.loc 2 581 0
 2320 006c 224B     		ldr	r3, .L182+4
 2321 006e 1B88     		ldrh	r3, [r3]
 2322 0070 181C     		mov	r0, r3
 2323 0072 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 2324              	.L168:
 582:.\main.c      ****             }
 583:.\main.c      ****             SHOULDER_FLAG = 0;
 2325              		.loc 2 583 0
 2326 0076 234B     		ldr	r3, .L182+16
 2327 0078 0022     		mov	r2, #0
 2328 007a 1A70     		strb	r2, [r3]
 584:.\main.c      ****             break;
 2329              		.loc 2 584 0
 2330 007c 06E0     		b	.L166
 2331              	.L160:
 585:.\main.c      ****             
 586:.\main.c      ****         case shldr_wait:
 587:.\main.c      ****             break;
 588:.\main.c      ****                         
 589:.\main.c      ****         default:
 590:.\main.c      ****             shoulder_state = shldr_start;
 2332              		.loc 2 590 0
 2333 007e 1D4B     		ldr	r3, .L182
 2334 0080 0022     		mov	r2, #0
 2335 0082 1A70     		strb	r2, [r3]
 591:.\main.c      ****             break;
 2336              		.loc 2 591 0
 2337 0084 02E0     		b	.L166
 2338              	.L180:
 563:.\main.c      ****             break;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 54


 2339              		.loc 2 563 0
 2340 0086 C046     		mov	r8, r8
 2341 0088 00E0     		b	.L166
 2342              	.L181:
 587:.\main.c      ****             break;
 2343              		.loc 2 587 0
 2344 008a C046     		mov	r8, r8
 2345              	.L166:
 592:.\main.c      ****     }
 593:.\main.c      ****     
 594:.\main.c      ****     switch(shoulder_state){ //transitions
 2346              		.loc 2 594 0
 2347 008c 194B     		ldr	r3, .L182
 2348 008e 1B78     		ldrb	r3, [r3]
 2349 0090 012B     		cmp	r3, #1
 2350 0092 0CD0     		beq	.L170
 2351 0094 02DC     		bgt	.L171
 2352 0096 002B     		cmp	r3, #0
 2353 0098 05D0     		beq	.L172
 2354 009a 24E0     		b	.L169
 2355              	.L171:
 2356 009c 022B     		cmp	r3, #2
 2357 009e 0AD0     		beq	.L173
 2358 00a0 032B     		cmp	r3, #3
 2359 00a2 14D0     		beq	.L174
 2360 00a4 1FE0     		b	.L169
 2361              	.L172:
 595:.\main.c      ****         case shldr_start:
 596:.\main.c      ****             shoulder_state = shldr_init;
 2362              		.loc 2 596 0
 2363 00a6 134B     		ldr	r3, .L182
 2364 00a8 0122     		mov	r2, #1
 2365 00aa 1A70     		strb	r2, [r3]
 597:.\main.c      ****             break;
 2366              		.loc 2 597 0
 2367 00ac 1FE0     		b	.L159
 2368              	.L170:
 598:.\main.c      ****         
 599:.\main.c      ****         case shldr_init:
 600:.\main.c      ****             shoulder_state = shldr_wait;
 2369              		.loc 2 600 0
 2370 00ae 114B     		ldr	r3, .L182
 2371 00b0 0322     		mov	r2, #3
 2372 00b2 1A70     		strb	r2, [r3]
 601:.\main.c      ****             break;
 2373              		.loc 2 601 0
 2374 00b4 1BE0     		b	.L159
 2375              	.L173:
 602:.\main.c      ****         
 603:.\main.c      ****         case shldr_execute:
 604:.\main.c      ****             if(SHOULDER_FLAG)
 2376              		.loc 2 604 0
 2377 00b6 134B     		ldr	r3, .L182+16
 2378 00b8 1B78     		ldrb	r3, [r3]
 2379 00ba 002B     		cmp	r3, #0
 2380 00bc 03D0     		beq	.L176
 605:.\main.c      ****             {
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 55


 606:.\main.c      ****                 shoulder_state = shldr_execute;
 2381              		.loc 2 606 0
 2382 00be 0D4B     		ldr	r3, .L182
 2383 00c0 0222     		mov	r2, #2
 2384 00c2 1A70     		strb	r2, [r3]
 607:.\main.c      ****             }
 608:.\main.c      ****             else
 609:.\main.c      ****             {
 610:.\main.c      ****                 shoulder_state = shldr_wait;
 611:.\main.c      ****             }
 612:.\main.c      ****             break;
 2385              		.loc 2 612 0
 2386 00c4 13E0     		b	.L159
 2387              	.L176:
 610:.\main.c      ****                 shoulder_state = shldr_wait;
 2388              		.loc 2 610 0
 2389 00c6 0B4B     		ldr	r3, .L182
 2390 00c8 0322     		mov	r2, #3
 2391 00ca 1A70     		strb	r2, [r3]
 2392              		.loc 2 612 0
 2393 00cc 0FE0     		b	.L159
 2394              	.L174:
 613:.\main.c      ****         
 614:.\main.c      ****         case shldr_wait:
 615:.\main.c      ****             if(SHOULDER_FLAG)
 2395              		.loc 2 615 0
 2396 00ce 0D4B     		ldr	r3, .L182+16
 2397 00d0 1B78     		ldrb	r3, [r3]
 2398 00d2 002B     		cmp	r3, #0
 2399 00d4 03D0     		beq	.L178
 616:.\main.c      ****             {
 617:.\main.c      ****                 shoulder_state = shldr_execute;
 2400              		.loc 2 617 0
 2401 00d6 074B     		ldr	r3, .L182
 2402 00d8 0222     		mov	r2, #2
 2403 00da 1A70     		strb	r2, [r3]
 618:.\main.c      ****             }
 619:.\main.c      ****             else
 620:.\main.c      ****             {
 621:.\main.c      ****                 shoulder_state = shldr_wait; 
 622:.\main.c      ****             }
 623:.\main.c      ****             break;
 2404              		.loc 2 623 0
 2405 00dc 07E0     		b	.L159
 2406              	.L178:
 621:.\main.c      ****                 shoulder_state = shldr_wait; 
 2407              		.loc 2 621 0
 2408 00de 054B     		ldr	r3, .L182
 2409 00e0 0322     		mov	r2, #3
 2410 00e2 1A70     		strb	r2, [r3]
 2411              		.loc 2 623 0
 2412 00e4 03E0     		b	.L159
 2413              	.L169:
 624:.\main.c      ****             
 625:.\main.c      ****         default:
 626:.\main.c      ****             shoulder_state = shldr_start;
 2414              		.loc 2 626 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 56


 2415 00e6 034B     		ldr	r3, .L182
 2416 00e8 0022     		mov	r2, #0
 2417 00ea 1A70     		strb	r2, [r3]
 627:.\main.c      ****             break;
 2418              		.loc 2 627 0
 2419 00ec C046     		mov	r8, r8
 2420              	.L159:
 628:.\main.c      ****     }  
 629:.\main.c      **** }
 2421              		.loc 2 629 0
 2422 00ee BD46     		mov	sp, r7
 2423 00f0 03B0     		add	sp, sp, #12
 2424              		@ sp needed
 2425 00f2 90BD     		pop	{r4, r7, pc}
 2426              	.L183:
 2427              		.align	2
 2428              	.L182:
 2429 00f4 00000000 		.word	shoulder_state
 2430 00f8 00000000 		.word	NEUTRAL
 2431 00fc 00000000 		.word	data_array
 2432 0100 E7030000 		.word	999
 2433 0104 00000000 		.word	SHOULDER_FLAG
 2434              		.cfi_endproc
 2435              	.LFE49:
 2436              		.size	shoulder, .-shoulder
 2437              		.comm	baseAzimuth_state,1,1
 2438              		.section	.text.baseAzimuth,"ax",%progbits
 2439              		.align	2
 2440              		.global	baseAzimuth
 2441              		.code	16
 2442              		.thumb_func
 2443              		.type	baseAzimuth, %function
 2444              	baseAzimuth:
 2445              	.LFB50:
 630:.\main.c      **** 
 631:.\main.c      **** //control the turret
 632:.\main.c      **** enum baseAzimuth_states {BA_start,BA_init,BA_execute,BA_wait} baseAzimuth_state;
 633:.\main.c      **** void baseAzimuth()
 634:.\main.c      **** { 
 2446              		.loc 2 634 0
 2447              		.cfi_startproc
 2448 0000 90B5     		push	{r4, r7, lr}
 2449              		.cfi_def_cfa_offset 12
 2450              		.cfi_offset 4, -12
 2451              		.cfi_offset 7, -8
 2452              		.cfi_offset 14, -4
 2453 0002 83B0     		sub	sp, sp, #12
 2454              		.cfi_def_cfa_offset 24
 2455 0004 00AF     		add	r7, sp, #0
 2456              		.cfi_def_cfa_register 7
 635:.\main.c      ****     uint16 newest_command;
 636:.\main.c      ****     uint16 temp_command;
 637:.\main.c      ****     
 638:.\main.c      ****     switch(baseAzimuth_state){ //actions
 2457              		.loc 2 638 0
 2458 0006 484B     		ldr	r3, .L207
 2459 0008 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 57


 2460 000a 012B     		cmp	r3, #1
 2461 000c 08D0     		beq	.L186
 2462 000e 02DC     		bgt	.L187
 2463 0010 002B     		cmp	r3, #0
 2464 0012 51D0     		beq	.L205
 2465 0014 4CE0     		b	.L185
 2466              	.L187:
 2467 0016 022B     		cmp	r3, #2
 2468 0018 0BD0     		beq	.L189
 2469 001a 032B     		cmp	r3, #3
 2470 001c 4ED0     		beq	.L206
 2471 001e 47E0     		b	.L185
 2472              	.L186:
 639:.\main.c      ****         case BA_start:
 640:.\main.c      ****             break;
 641:.\main.c      **** 
 642:.\main.c      ****         case BA_init:
 643:.\main.c      ****             BA_PWM_WriteCompare(NEUTRAL);
 2473              		.loc 2 643 0
 2474 0020 424B     		ldr	r3, .L207+4
 2475 0022 1B88     		ldrh	r3, [r3]
 2476 0024 181C     		mov	r0, r3
 2477 0026 FFF7FEFF 		bl	BA_PWM_WriteCompare
 644:.\main.c      ****             latest_command = 1500;
 2478              		.loc 2 644 0
 2479 002a 414B     		ldr	r3, .L207+8
 2480 002c 414A     		ldr	r2, .L207+12
 2481 002e 1A80     		strh	r2, [r3]
 645:.\main.c      ****             break;
 2482              		.loc 2 645 0
 2483 0030 45E0     		b	.L191
 2484              	.L189:
 646:.\main.c      **** 
 647:.\main.c      ****         case BA_execute:
 648:.\main.c      ****             newest_command = make_command(data_array, BA_BYTE_1, BA_BYTE_2);
 2485              		.loc 2 648 0
 2486 0032 BC1D     		add	r4, r7, #6
 2487 0034 404B     		ldr	r3, .L207+16
 2488 0036 181C     		mov	r0, r3
 2489 0038 0A21     		mov	r1, #10
 2490 003a 0B22     		mov	r2, #11
 2491 003c FFF7FEFF 		bl	make_command
 2492 0040 031C     		mov	r3, r0
 2493 0042 2380     		strh	r3, [r4]
 649:.\main.c      **** 
 650:.\main.c      ****             if(newest_command <= 2000 && newest_command >= 1000)
 2494              		.loc 2 650 0
 2495 0044 BB1D     		add	r3, r7, #6
 2496 0046 1A88     		ldrh	r2, [r3]
 2497 0048 FA23     		mov	r3, #250
 2498 004a DB00     		lsl	r3, r3, #3
 2499 004c 9A42     		cmp	r2, r3
 2500 004e 19D8     		bhi	.L192
 2501              		.loc 2 650 0 is_stmt 0 discriminator 1
 2502 0050 BB1D     		add	r3, r7, #6
 2503 0052 1A88     		ldrh	r2, [r3]
 2504 0054 394B     		ldr	r3, .L207+20
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 58


 2505 0056 9A42     		cmp	r2, r3
 2506 0058 14D9     		bls	.L192
 651:.\main.c      ****             {
 652:.\main.c      ****                 BA_PWM_WriteCompare(latest_command);
 2507              		.loc 2 652 0 is_stmt 1
 2508 005a 354B     		ldr	r3, .L207+8
 2509 005c 1B88     		ldrh	r3, [r3]
 2510 005e 181C     		mov	r0, r3
 2511 0060 FFF7FEFF 		bl	BA_PWM_WriteCompare
 653:.\main.c      ****                 latest_command = simple_pos_to_vel(newest_command, latest_command);
 2512              		.loc 2 653 0
 2513 0064 324B     		ldr	r3, .L207+8
 2514 0066 1B88     		ldrh	r3, [r3]
 2515 0068 BA1D     		add	r2, r7, #6
 2516 006a 1288     		ldrh	r2, [r2]
 2517 006c 101C     		mov	r0, r2
 2518 006e 191C     		mov	r1, r3
 2519 0070 FFF7FEFF 		bl	simple_pos_to_vel
 2520 0074 031C     		mov	r3, r0
 2521 0076 1A1C     		mov	r2, r3
 2522 0078 2D4B     		ldr	r3, .L207+8
 2523 007a 1A80     		strh	r2, [r3]
 654:.\main.c      ****                 LED_Write(0);
 2524              		.loc 2 654 0
 2525 007c 0020     		mov	r0, #0
 2526 007e FFF7FEFF 		bl	LED_Write
 2527 0082 11E0     		b	.L193
 2528              	.L192:
 655:.\main.c      ****             }
 656:.\main.c      ****             else
 657:.\main.c      ****             {
 658:.\main.c      ****                 LED_Write(1);
 2529              		.loc 2 658 0
 2530 0084 0120     		mov	r0, #1
 2531 0086 FFF7FEFF 		bl	LED_Write
 659:.\main.c      ****                 //increment error variable
 660:.\main.c      ****                 temp_command = simple_pos_to_vel(1500, latest_command);
 2532              		.loc 2 660 0
 2533 008a 294B     		ldr	r3, .L207+8
 2534 008c 1B88     		ldrh	r3, [r3]
 2535 008e 3C1D     		add	r4, r7, #4
 2536 0090 284A     		ldr	r2, .L207+12
 2537 0092 101C     		mov	r0, r2
 2538 0094 191C     		mov	r1, r3
 2539 0096 FFF7FEFF 		bl	simple_pos_to_vel
 2540 009a 031C     		mov	r3, r0
 2541 009c 2380     		strh	r3, [r4]
 661:.\main.c      ****                 BA_PWM_WriteCompare(temp_command);
 2542              		.loc 2 661 0
 2543 009e 3B1D     		add	r3, r7, #4
 2544 00a0 1B88     		ldrh	r3, [r3]
 2545 00a2 181C     		mov	r0, r3
 2546 00a4 FFF7FEFF 		bl	BA_PWM_WriteCompare
 2547              	.L193:
 662:.\main.c      ****             }
 663:.\main.c      ****             BA_FLAG = 0;
 2548              		.loc 2 663 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 59


 2549 00a8 254B     		ldr	r3, .L207+24
 2550 00aa 0022     		mov	r2, #0
 2551 00ac 1A70     		strb	r2, [r3]
 664:.\main.c      ****             break;
 2552              		.loc 2 664 0
 2553 00ae 06E0     		b	.L191
 2554              	.L185:
 665:.\main.c      ****             
 666:.\main.c      ****         case BA_wait:
 667:.\main.c      ****             break;
 668:.\main.c      ****             
 669:.\main.c      ****         default:
 670:.\main.c      ****             baseAzimuth_state = BA_start;
 2555              		.loc 2 670 0
 2556 00b0 1D4B     		ldr	r3, .L207
 2557 00b2 0022     		mov	r2, #0
 2558 00b4 1A70     		strb	r2, [r3]
 671:.\main.c      ****             break;
 2559              		.loc 2 671 0
 2560 00b6 02E0     		b	.L191
 2561              	.L205:
 640:.\main.c      ****             break;
 2562              		.loc 2 640 0
 2563 00b8 C046     		mov	r8, r8
 2564 00ba 00E0     		b	.L191
 2565              	.L206:
 667:.\main.c      ****             break;
 2566              		.loc 2 667 0
 2567 00bc C046     		mov	r8, r8
 2568              	.L191:
 672:.\main.c      ****     }
 673:.\main.c      ****     
 674:.\main.c      ****     switch(baseAzimuth_state)
 2569              		.loc 2 674 0
 2570 00be 1A4B     		ldr	r3, .L207
 2571 00c0 1B78     		ldrb	r3, [r3]
 2572 00c2 012B     		cmp	r3, #1
 2573 00c4 0CD0     		beq	.L195
 2574 00c6 02DC     		bgt	.L196
 2575 00c8 002B     		cmp	r3, #0
 2576 00ca 05D0     		beq	.L197
 2577 00cc 24E0     		b	.L194
 2578              	.L196:
 2579 00ce 022B     		cmp	r3, #2
 2580 00d0 0AD0     		beq	.L198
 2581 00d2 032B     		cmp	r3, #3
 2582 00d4 14D0     		beq	.L199
 2583 00d6 1FE0     		b	.L194
 2584              	.L197:
 675:.\main.c      ****     { //transitions
 676:.\main.c      ****         case BA_start:
 677:.\main.c      ****             baseAzimuth_state = BA_init;
 2585              		.loc 2 677 0
 2586 00d8 134B     		ldr	r3, .L207
 2587 00da 0122     		mov	r2, #1
 2588 00dc 1A70     		strb	r2, [r3]
 678:.\main.c      ****             break;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 60


 2589              		.loc 2 678 0
 2590 00de 1FE0     		b	.L184
 2591              	.L195:
 679:.\main.c      ****         
 680:.\main.c      ****         case BA_init:
 681:.\main.c      ****             baseAzimuth_state = BA_wait;
 2592              		.loc 2 681 0
 2593 00e0 114B     		ldr	r3, .L207
 2594 00e2 0322     		mov	r2, #3
 2595 00e4 1A70     		strb	r2, [r3]
 682:.\main.c      ****             break;
 2596              		.loc 2 682 0
 2597 00e6 1BE0     		b	.L184
 2598              	.L198:
 683:.\main.c      ****         
 684:.\main.c      ****         case BA_execute:
 685:.\main.c      ****             if(BA_FLAG)
 2599              		.loc 2 685 0
 2600 00e8 154B     		ldr	r3, .L207+24
 2601 00ea 1B78     		ldrb	r3, [r3]
 2602 00ec 002B     		cmp	r3, #0
 2603 00ee 03D0     		beq	.L201
 686:.\main.c      ****             {
 687:.\main.c      ****                 baseAzimuth_state = BA_execute;
 2604              		.loc 2 687 0
 2605 00f0 0D4B     		ldr	r3, .L207
 2606 00f2 0222     		mov	r2, #2
 2607 00f4 1A70     		strb	r2, [r3]
 688:.\main.c      ****             }
 689:.\main.c      ****             else
 690:.\main.c      ****             {
 691:.\main.c      ****                 baseAzimuth_state = BA_wait;
 692:.\main.c      ****             }
 693:.\main.c      ****             break;
 2608              		.loc 2 693 0
 2609 00f6 13E0     		b	.L184
 2610              	.L201:
 691:.\main.c      ****                 baseAzimuth_state = BA_wait;
 2611              		.loc 2 691 0
 2612 00f8 0B4B     		ldr	r3, .L207
 2613 00fa 0322     		mov	r2, #3
 2614 00fc 1A70     		strb	r2, [r3]
 2615              		.loc 2 693 0
 2616 00fe 0FE0     		b	.L184
 2617              	.L199:
 694:.\main.c      ****         
 695:.\main.c      ****         case BA_wait:
 696:.\main.c      ****             if(BA_FLAG)
 2618              		.loc 2 696 0
 2619 0100 0F4B     		ldr	r3, .L207+24
 2620 0102 1B78     		ldrb	r3, [r3]
 2621 0104 002B     		cmp	r3, #0
 2622 0106 03D0     		beq	.L203
 697:.\main.c      ****             {
 698:.\main.c      ****                 baseAzimuth_state = BA_execute;
 2623              		.loc 2 698 0
 2624 0108 074B     		ldr	r3, .L207
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 61


 2625 010a 0222     		mov	r2, #2
 2626 010c 1A70     		strb	r2, [r3]
 699:.\main.c      ****             }
 700:.\main.c      ****             else
 701:.\main.c      ****             {
 702:.\main.c      ****                 baseAzimuth_state = BA_wait; 
 703:.\main.c      ****             }
 704:.\main.c      ****             break;
 2627              		.loc 2 704 0
 2628 010e 07E0     		b	.L184
 2629              	.L203:
 702:.\main.c      ****                 baseAzimuth_state = BA_wait; 
 2630              		.loc 2 702 0
 2631 0110 054B     		ldr	r3, .L207
 2632 0112 0322     		mov	r2, #3
 2633 0114 1A70     		strb	r2, [r3]
 2634              		.loc 2 704 0
 2635 0116 03E0     		b	.L184
 2636              	.L194:
 705:.\main.c      ****             
 706:.\main.c      ****         default:
 707:.\main.c      ****             baseAzimuth_state = BA_start;
 2637              		.loc 2 707 0
 2638 0118 034B     		ldr	r3, .L207
 2639 011a 0022     		mov	r2, #0
 2640 011c 1A70     		strb	r2, [r3]
 708:.\main.c      ****             break;
 2641              		.loc 2 708 0
 2642 011e C046     		mov	r8, r8
 2643              	.L184:
 709:.\main.c      ****     }
 710:.\main.c      **** }
 2644              		.loc 2 710 0
 2645 0120 BD46     		mov	sp, r7
 2646 0122 03B0     		add	sp, sp, #12
 2647              		@ sp needed
 2648 0124 90BD     		pop	{r4, r7, pc}
 2649              	.L208:
 2650 0126 C046     		.align	2
 2651              	.L207:
 2652 0128 00000000 		.word	baseAzimuth_state
 2653 012c 00000000 		.word	NEUTRAL
 2654 0130 00000000 		.word	latest_command
 2655 0134 DC050000 		.word	1500
 2656 0138 00000000 		.word	data_array
 2657 013c E7030000 		.word	999
 2658 0140 00000000 		.word	BA_FLAG
 2659              		.cfi_endproc
 2660              	.LFE50:
 2661              		.size	baseAzimuth, .-baseAzimuth
 2662              		.comm	effector_state,1,1
 2663              		.section	.text.effector,"ax",%progbits
 2664              		.align	2
 2665              		.global	effector
 2666              		.code	16
 2667              		.thumb_func
 2668              		.type	effector, %function
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 62


 2669              	effector:
 2670              	.LFB51:
 711:.\main.c      **** 
 712:.\main.c      **** enum effector_states {eff_start, eff_init, eff_execute, eff_wait} effector_state;
 713:.\main.c      **** void effector()
 714:.\main.c      **** {
 2671              		.loc 2 714 0
 2672              		.cfi_startproc
 2673 0000 90B5     		push	{r4, r7, lr}
 2674              		.cfi_def_cfa_offset 12
 2675              		.cfi_offset 4, -12
 2676              		.cfi_offset 7, -8
 2677              		.cfi_offset 14, -4
 2678 0002 83B0     		sub	sp, sp, #12
 2679              		.cfi_def_cfa_offset 24
 2680 0004 00AF     		add	r7, sp, #0
 2681              		.cfi_def_cfa_register 7
 715:.\main.c      ****     uint16 command;
 716:.\main.c      **** 
 717:.\main.c      ****     switch(effector_state){ //actions
 2682              		.loc 2 717 0
 2683 0006 384B     		ldr	r3, .L232
 2684 0008 1B78     		ldrb	r3, [r3]
 2685 000a 012B     		cmp	r3, #1
 2686 000c 08D0     		beq	.L211
 2687 000e 02DC     		bgt	.L212
 2688 0010 002B     		cmp	r3, #0
 2689 0012 32D0     		beq	.L230
 2690 0014 2DE0     		b	.L210
 2691              	.L212:
 2692 0016 022B     		cmp	r3, #2
 2693 0018 08D0     		beq	.L214
 2694 001a 032B     		cmp	r3, #3
 2695 001c 2FD0     		beq	.L231
 2696 001e 28E0     		b	.L210
 2697              	.L211:
 718:.\main.c      ****         case eff_start:
 719:.\main.c      ****             break;
 720:.\main.c      **** 
 721:.\main.c      ****         case eff_init:           
 722:.\main.c      ****            EFFECTOR_PWM_WriteCompare(NEUTRAL);
 2698              		.loc 2 722 0
 2699 0020 324B     		ldr	r3, .L232+4
 2700 0022 1B88     		ldrh	r3, [r3]
 2701 0024 181C     		mov	r0, r3
 2702 0026 FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare
 723:.\main.c      ****            break;
 2703              		.loc 2 723 0
 2704 002a 29E0     		b	.L216
 2705              	.L214:
 724:.\main.c      **** 
 725:.\main.c      ****         case eff_execute:
 726:.\main.c      ****             command = make_command(data_array, EFF_BYTE_1, EFF_BYTE_2);
 2706              		.loc 2 726 0
 2707 002c BC1D     		add	r4, r7, #6
 2708 002e 304B     		ldr	r3, .L232+8
 2709 0030 181C     		mov	r0, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 63


 2710 0032 1421     		mov	r1, #20
 2711 0034 1522     		mov	r2, #21
 2712 0036 FFF7FEFF 		bl	make_command
 2713 003a 031C     		mov	r3, r0
 2714 003c 2380     		strh	r3, [r4]
 727:.\main.c      **** 
 728:.\main.c      ****             if(command <= 2000 && command >= 1000)
 2715              		.loc 2 728 0
 2716 003e BB1D     		add	r3, r7, #6
 2717 0040 1A88     		ldrh	r2, [r3]
 2718 0042 FA23     		mov	r3, #250
 2719 0044 DB00     		lsl	r3, r3, #3
 2720 0046 9A42     		cmp	r2, r3
 2721 0048 0AD8     		bhi	.L217
 2722              		.loc 2 728 0 is_stmt 0 discriminator 1
 2723 004a BB1D     		add	r3, r7, #6
 2724 004c 1A88     		ldrh	r2, [r3]
 2725 004e 294B     		ldr	r3, .L232+12
 2726 0050 9A42     		cmp	r2, r3
 2727 0052 05D9     		bls	.L217
 729:.\main.c      ****             {
 730:.\main.c      ****                 EFFECTOR_PWM_WriteCompare(command);
 2728              		.loc 2 730 0 is_stmt 1
 2729 0054 BB1D     		add	r3, r7, #6
 2730 0056 1B88     		ldrh	r3, [r3]
 2731 0058 181C     		mov	r0, r3
 2732 005a FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare
 2733 005e 04E0     		b	.L218
 2734              	.L217:
 731:.\main.c      ****             }
 732:.\main.c      ****             else
 733:.\main.c      ****             {
 734:.\main.c      ****                 EFFECTOR_PWM_WriteCompare(1000);
 2735              		.loc 2 734 0
 2736 0060 FA23     		mov	r3, #250
 2737 0062 9B00     		lsl	r3, r3, #2
 2738 0064 181C     		mov	r0, r3
 2739 0066 FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare
 2740              	.L218:
 735:.\main.c      ****             }
 736:.\main.c      ****             
 737:.\main.c      ****             EFFECTOR_FLAG = 0;
 2741              		.loc 2 737 0
 2742 006a 234B     		ldr	r3, .L232+16
 2743 006c 0022     		mov	r2, #0
 2744 006e 1A70     		strb	r2, [r3]
 738:.\main.c      ****             break;
 2745              		.loc 2 738 0
 2746 0070 06E0     		b	.L216
 2747              	.L210:
 739:.\main.c      ****             
 740:.\main.c      ****         case eff_wait:
 741:.\main.c      ****             break;
 742:.\main.c      ****         
 743:.\main.c      ****         default:
 744:.\main.c      ****             effector_state = eff_start;
 2748              		.loc 2 744 0
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 64


 2749 0072 1D4B     		ldr	r3, .L232
 2750 0074 0022     		mov	r2, #0
 2751 0076 1A70     		strb	r2, [r3]
 745:.\main.c      ****             break;
 2752              		.loc 2 745 0
 2753 0078 02E0     		b	.L216
 2754              	.L230:
 719:.\main.c      ****             break;
 2755              		.loc 2 719 0
 2756 007a C046     		mov	r8, r8
 2757 007c 00E0     		b	.L216
 2758              	.L231:
 741:.\main.c      ****             break;
 2759              		.loc 2 741 0
 2760 007e C046     		mov	r8, r8
 2761              	.L216:
 746:.\main.c      ****     }
 747:.\main.c      ****     
 748:.\main.c      ****     switch(effector_state){ //transitions
 2762              		.loc 2 748 0
 2763 0080 194B     		ldr	r3, .L232
 2764 0082 1B78     		ldrb	r3, [r3]
 2765 0084 012B     		cmp	r3, #1
 2766 0086 0CD0     		beq	.L220
 2767 0088 02DC     		bgt	.L221
 2768 008a 002B     		cmp	r3, #0
 2769 008c 05D0     		beq	.L222
 2770 008e 24E0     		b	.L219
 2771              	.L221:
 2772 0090 022B     		cmp	r3, #2
 2773 0092 0AD0     		beq	.L223
 2774 0094 032B     		cmp	r3, #3
 2775 0096 14D0     		beq	.L224
 2776 0098 1FE0     		b	.L219
 2777              	.L222:
 749:.\main.c      ****         case eff_start:
 750:.\main.c      ****             effector_state = eff_init;
 2778              		.loc 2 750 0
 2779 009a 134B     		ldr	r3, .L232
 2780 009c 0122     		mov	r2, #1
 2781 009e 1A70     		strb	r2, [r3]
 751:.\main.c      ****             break;
 2782              		.loc 2 751 0
 2783 00a0 1FE0     		b	.L209
 2784              	.L220:
 752:.\main.c      ****         
 753:.\main.c      ****         case eff_init:
 754:.\main.c      ****             effector_state = eff_wait;
 2785              		.loc 2 754 0
 2786 00a2 114B     		ldr	r3, .L232
 2787 00a4 0322     		mov	r2, #3
 2788 00a6 1A70     		strb	r2, [r3]
 755:.\main.c      ****             break;
 2789              		.loc 2 755 0
 2790 00a8 1BE0     		b	.L209
 2791              	.L223:
 756:.\main.c      ****         
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 65


 757:.\main.c      ****         case eff_execute:
 758:.\main.c      ****             if(EFFECTOR_FLAG)
 2792              		.loc 2 758 0
 2793 00aa 134B     		ldr	r3, .L232+16
 2794 00ac 1B78     		ldrb	r3, [r3]
 2795 00ae 002B     		cmp	r3, #0
 2796 00b0 03D0     		beq	.L226
 759:.\main.c      ****             {
 760:.\main.c      ****                 effector_state = eff_execute;
 2797              		.loc 2 760 0
 2798 00b2 0D4B     		ldr	r3, .L232
 2799 00b4 0222     		mov	r2, #2
 2800 00b6 1A70     		strb	r2, [r3]
 761:.\main.c      ****             }
 762:.\main.c      ****             else
 763:.\main.c      ****             {
 764:.\main.c      ****                 effector_state = eff_wait;
 765:.\main.c      ****             }
 766:.\main.c      ****             break;
 2801              		.loc 2 766 0
 2802 00b8 13E0     		b	.L209
 2803              	.L226:
 764:.\main.c      ****                 effector_state = eff_wait;
 2804              		.loc 2 764 0
 2805 00ba 0B4B     		ldr	r3, .L232
 2806 00bc 0322     		mov	r2, #3
 2807 00be 1A70     		strb	r2, [r3]
 2808              		.loc 2 766 0
 2809 00c0 0FE0     		b	.L209
 2810              	.L224:
 767:.\main.c      ****         
 768:.\main.c      ****         case eff_wait:
 769:.\main.c      ****             if(EFFECTOR_FLAG)
 2811              		.loc 2 769 0
 2812 00c2 0D4B     		ldr	r3, .L232+16
 2813 00c4 1B78     		ldrb	r3, [r3]
 2814 00c6 002B     		cmp	r3, #0
 2815 00c8 03D0     		beq	.L228
 770:.\main.c      ****             {
 771:.\main.c      ****                 effector_state = eff_execute;
 2816              		.loc 2 771 0
 2817 00ca 074B     		ldr	r3, .L232
 2818 00cc 0222     		mov	r2, #2
 2819 00ce 1A70     		strb	r2, [r3]
 772:.\main.c      ****             }
 773:.\main.c      ****             else
 774:.\main.c      ****             {
 775:.\main.c      ****                 effector_state = eff_wait; 
 776:.\main.c      ****             }
 777:.\main.c      ****             break;
 2820              		.loc 2 777 0
 2821 00d0 07E0     		b	.L209
 2822              	.L228:
 775:.\main.c      ****                 effector_state = eff_wait; 
 2823              		.loc 2 775 0
 2824 00d2 054B     		ldr	r3, .L232
 2825 00d4 0322     		mov	r2, #3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 66


 2826 00d6 1A70     		strb	r2, [r3]
 2827              		.loc 2 777 0
 2828 00d8 03E0     		b	.L209
 2829              	.L219:
 778:.\main.c      ****         
 779:.\main.c      ****         default:
 780:.\main.c      ****             effector_state = eff_start;
 2830              		.loc 2 780 0
 2831 00da 034B     		ldr	r3, .L232
 2832 00dc 0022     		mov	r2, #0
 2833 00de 1A70     		strb	r2, [r3]
 781:.\main.c      ****             break;
 2834              		.loc 2 781 0
 2835 00e0 C046     		mov	r8, r8
 2836              	.L209:
 782:.\main.c      ****     }    
 783:.\main.c      **** }
 2837              		.loc 2 783 0
 2838 00e2 BD46     		mov	sp, r7
 2839 00e4 03B0     		add	sp, sp, #12
 2840              		@ sp needed
 2841 00e6 90BD     		pop	{r4, r7, pc}
 2842              	.L233:
 2843              		.align	2
 2844              	.L232:
 2845 00e8 00000000 		.word	effector_state
 2846 00ec 00000000 		.word	NEUTRAL
 2847 00f0 00000000 		.word	data_array
 2848 00f4 E7030000 		.word	999
 2849 00f8 00000000 		.word	EFFECTOR_FLAG
 2850              		.cfi_endproc
 2851              	.LFE51:
 2852              		.size	effector, .-effector
 2853              		.comm	arduino_state,1,1
 2854              		.section	.text.arduino,"ax",%progbits
 2855              		.align	2
 2856              		.global	arduino
 2857              		.code	16
 2858              		.thumb_func
 2859              		.type	arduino, %function
 2860              	arduino:
 2861              	.LFB52:
 784:.\main.c      **** 
 785:.\main.c      **** enum arduino_states {ard_start, ard_init, ard_wait, ard_read, ard_write} arduino_state;
 786:.\main.c      **** void arduino()
 787:.\main.c      **** {
 2862              		.loc 2 787 0
 2863              		.cfi_startproc
 2864 0000 80B5     		push	{r7, lr}
 2865              		.cfi_def_cfa_offset 8
 2866              		.cfi_offset 7, -8
 2867              		.cfi_offset 14, -4
 2868 0002 82B0     		sub	sp, sp, #8
 2869              		.cfi_def_cfa_offset 16
 2870 0004 00AF     		add	r7, sp, #0
 2871              		.cfi_def_cfa_register 7
 788:.\main.c      ****     uint8 video_mux;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 67


 789:.\main.c      ****     uint8 laser;
 790:.\main.c      ****     uint8 pack_for_rover;
 791:.\main.c      ****     uint8 ARD_ARRAY_SIZE = 12;
 2872              		.loc 2 791 0
 2873 0006 FB1C     		add	r3, r7, #3
 2874 0008 0C22     		mov	r2, #12
 2875 000a 1A70     		strb	r2, [r3]
 792:.\main.c      ****     
 793:.\main.c      ****     switch(arduino_state) //state actions
 2876              		.loc 2 793 0
 2877 000c 404B     		ldr	r3, .L258
 2878 000e 1B78     		ldrb	r3, [r3]
 2879 0010 042B     		cmp	r3, #4
 2880 0012 43D8     		bhi	.L235
 2881 0014 9A00     		lsl	r2, r3, #2
 2882 0016 3F4B     		ldr	r3, .L258+4
 2883 0018 D318     		add	r3, r2, r3
 2884 001a 1B68     		ldr	r3, [r3]
 2885 001c 9F46     		mov	pc, r3
 2886              		.section	.rodata
 2887              		.align	2
 2888              	.L237:
 2889 0028 A4000000 		.word	.L257
 2890 002c 1E000000 		.word	.L238
 2891 0030 A4000000 		.word	.L257
 2892 0034 44000000 		.word	.L240
 2893 0038 6C000000 		.word	.L241
 2894              		.section	.text.arduino
 2895              	.L238:
 794:.\main.c      ****     {
 795:.\main.c      ****         case ard_start:
 796:.\main.c      ****             break;
 797:.\main.c      ****         
 798:.\main.c      ****         case ard_init:
 799:.\main.c      ****             video_mux = 0x10;
 2896              		.loc 2 799 0
 2897 001e BB1C     		add	r3, r7, #2
 2898 0020 1022     		mov	r2, #16
 2899 0022 1A70     		strb	r2, [r3]
 800:.\main.c      ****             laser = 0x00;
 2900              		.loc 2 800 0
 2901 0024 7B1C     		add	r3, r7, #1
 2902 0026 0022     		mov	r2, #0
 2903 0028 1A70     		strb	r2, [r3]
 801:.\main.c      ****             pack_for_rover = video_mux | laser;
 2904              		.loc 2 801 0
 2905 002a 3B1C     		mov	r3, r7
 2906 002c B91C     		add	r1, r7, #2
 2907 002e 7A1C     		add	r2, r7, #1
 2908 0030 0978     		ldrb	r1, [r1]
 2909 0032 1278     		ldrb	r2, [r2]
 2910 0034 0A43     		orr	r2, r1
 2911 0036 1A70     		strb	r2, [r3]
 802:.\main.c      ****             //write initial video, laser enable
 803:.\main.c      ****             Arduino_UART_UartPutChar(pack_for_rover); 
 2912              		.loc 2 803 0
 2913 0038 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 68


 2914 003a 1B78     		ldrb	r3, [r3]
 2915 003c 181C     		mov	r0, r3
 2916 003e FFF7FEFF 		bl	Arduino_UART_SpiUartWriteTxData
 804:.\main.c      ****             break;
 2917              		.loc 2 804 0
 2918 0042 30E0     		b	.L242
 2919              	.L240:
 2920              	.LBB2:
 805:.\main.c      ****         
 806:.\main.c      ****         case ard_wait:
 807:.\main.c      ****             break;
 808:.\main.c      ****         
 809:.\main.c      ****         case ard_read:
 810:.\main.c      ****             for(int i = 0; i < ARD_ARRAY_SIZE; i++)
 2921              		.loc 2 810 0
 2922 0044 0023     		mov	r3, #0
 2923 0046 7B60     		str	r3, [r7, #4]
 2924 0048 0AE0     		b	.L243
 2925              	.L244:
 811:.\main.c      ****             {
 812:.\main.c      ****               feedback_array[i] = Arduino_UART_UartGetByte();
 2926              		.loc 2 812 0 discriminator 2
 2927 004a FFF7FEFF 		bl	Arduino_UART_UartGetByte
 2928 004e 031C     		mov	r3, r0
 2929 0050 DAB2     		uxtb	r2, r3
 2930 0052 3149     		ldr	r1, .L258+8
 2931 0054 7B68     		ldr	r3, [r7, #4]
 2932 0056 CB18     		add	r3, r1, r3
 2933 0058 1A70     		strb	r2, [r3]
 810:.\main.c      ****             for(int i = 0; i < ARD_ARRAY_SIZE; i++)
 2934              		.loc 2 810 0 discriminator 2
 2935 005a 7B68     		ldr	r3, [r7, #4]
 2936 005c 0133     		add	r3, r3, #1
 2937 005e 7B60     		str	r3, [r7, #4]
 2938              	.L243:
 810:.\main.c      ****             for(int i = 0; i < ARD_ARRAY_SIZE; i++)
 2939              		.loc 2 810 0 is_stmt 0 discriminator 1
 2940 0060 FB1C     		add	r3, r7, #3
 2941 0062 1A78     		ldrb	r2, [r3]
 2942 0064 7B68     		ldr	r3, [r7, #4]
 2943 0066 9A42     		cmp	r2, r3
 2944 0068 EFDC     		bgt	.L244
 2945              	.LBE2:
 813:.\main.c      ****             }
 814:.\main.c      ****             break;
 2946              		.loc 2 814 0 is_stmt 1
 2947 006a 1CE0     		b	.L242
 2948              	.L241:
 815:.\main.c      ****         
 816:.\main.c      ****         case ard_write:
 817:.\main.c      ****             //write laser
 818:.\main.c      ****             //write video
 819:.\main.c      ****             video_mux = data_array[ARD_BYTE_1];
 2949              		.loc 2 819 0
 2950 006c BB1C     		add	r3, r7, #2
 2951 006e 2B4A     		ldr	r2, .L258+12
 2952 0070 927D     		ldrb	r2, [r2, #22]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 69


 2953 0072 1A70     		strb	r2, [r3]
 820:.\main.c      ****             laser = data_array[ARD_BYTE_2];
 2954              		.loc 2 820 0
 2955 0074 7B1C     		add	r3, r7, #1
 2956 0076 294A     		ldr	r2, .L258+12
 2957 0078 D27D     		ldrb	r2, [r2, #23]
 2958 007a 1A70     		strb	r2, [r3]
 821:.\main.c      ****             
 822:.\main.c      ****             pack_for_rover = video_mux | laser;
 2959              		.loc 2 822 0
 2960 007c 3B1C     		mov	r3, r7
 2961 007e B91C     		add	r1, r7, #2
 2962 0080 7A1C     		add	r2, r7, #1
 2963 0082 0978     		ldrb	r1, [r1]
 2964 0084 1278     		ldrb	r2, [r2]
 2965 0086 0A43     		orr	r2, r1
 2966 0088 1A70     		strb	r2, [r3]
 823:.\main.c      ****             
 824:.\main.c      ****             Arduino_UART_UartPutChar(pack_for_rover); 
 2967              		.loc 2 824 0
 2968 008a 3B1C     		mov	r3, r7
 2969 008c 1B78     		ldrb	r3, [r3]
 2970 008e 181C     		mov	r0, r3
 2971 0090 FFF7FEFF 		bl	Arduino_UART_SpiUartWriteTxData
 825:.\main.c      ****             //Arduino_UART_UartPutChar(((0x10) | (0x00)));
 826:.\main.c      ****             
 827:.\main.c      ****             //pass exactly what was sent to me by basestation
 828:.\main.c      ****             ARD_FLAG = 0;
 2972              		.loc 2 828 0
 2973 0094 224B     		ldr	r3, .L258+16
 2974 0096 0022     		mov	r2, #0
 2975 0098 1A70     		strb	r2, [r3]
 829:.\main.c      ****             break;
 2976              		.loc 2 829 0
 2977 009a 04E0     		b	.L242
 2978              	.L235:
 830:.\main.c      ****         
 831:.\main.c      ****         default:
 832:.\main.c      ****             arduino_state = ard_start;
 2979              		.loc 2 832 0
 2980 009c 1C4B     		ldr	r3, .L258
 2981 009e 0022     		mov	r2, #0
 2982 00a0 1A70     		strb	r2, [r3]
 833:.\main.c      ****             break;
 2983              		.loc 2 833 0
 2984 00a2 00E0     		b	.L242
 2985              	.L257:
 796:.\main.c      ****             break;
 2986              		.loc 2 796 0
 2987 00a4 C046     		mov	r8, r8
 2988              	.L242:
 834:.\main.c      ****     }
 835:.\main.c      ****     switch(arduino_state) //state transitions
 2989              		.loc 2 835 0
 2990 00a6 1A4B     		ldr	r3, .L258
 2991 00a8 1B78     		ldrb	r3, [r3]
 2992 00aa 042B     		cmp	r3, #4
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 70


 2993 00ac 28D8     		bhi	.L245
 2994 00ae 9A00     		lsl	r2, r3, #2
 2995 00b0 1C4B     		ldr	r3, .L258+20
 2996 00b2 D318     		add	r3, r2, r3
 2997 00b4 1B68     		ldr	r3, [r3]
 2998 00b6 9F46     		mov	pc, r3
 2999              		.section	.rodata
 3000              		.align	2
 3001              	.L247:
 3002 003c B8000000 		.word	.L246
 3003 0040 C0000000 		.word	.L248
 3004 0044 C8000000 		.word	.L249
 3005 0048 D0000000 		.word	.L250
 3006 004c E8000000 		.word	.L251
 3007              		.section	.text.arduino
 3008              	.L246:
 836:.\main.c      ****     {
 837:.\main.c      ****         case ard_start:
 838:.\main.c      ****             arduino_state = ard_init;
 3009              		.loc 2 838 0
 3010 00b8 154B     		ldr	r3, .L258
 3011 00ba 0122     		mov	r2, #1
 3012 00bc 1A70     		strb	r2, [r3]
 839:.\main.c      ****             break;
 3013              		.loc 2 839 0
 3014 00be 23E0     		b	.L234
 3015              	.L248:
 840:.\main.c      ****         
 841:.\main.c      ****         case ard_init:
 842:.\main.c      ****             arduino_state = ard_wait;
 3016              		.loc 2 842 0
 3017 00c0 134B     		ldr	r3, .L258
 3018 00c2 0222     		mov	r2, #2
 3019 00c4 1A70     		strb	r2, [r3]
 843:.\main.c      ****             break;
 3020              		.loc 2 843 0
 3021 00c6 1FE0     		b	.L234
 3022              	.L249:
 844:.\main.c      ****         
 845:.\main.c      ****         case ard_wait:
 846:.\main.c      ****             arduino_state = ard_read;
 3023              		.loc 2 846 0
 3024 00c8 114B     		ldr	r3, .L258
 3025 00ca 0322     		mov	r2, #3
 3026 00cc 1A70     		strb	r2, [r3]
 847:.\main.c      ****             break;
 3027              		.loc 2 847 0
 3028 00ce 1BE0     		b	.L234
 3029              	.L250:
 848:.\main.c      ****         
 849:.\main.c      ****         case ard_read:
 850:.\main.c      ****             if(ARD_FLAG)
 3030              		.loc 2 850 0
 3031 00d0 134B     		ldr	r3, .L258+16
 3032 00d2 1B78     		ldrb	r3, [r3]
 3033 00d4 002B     		cmp	r3, #0
 3034 00d6 03D0     		beq	.L253
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 71


 851:.\main.c      ****             {
 852:.\main.c      ****                 arduino_state = ard_write;
 3035              		.loc 2 852 0
 3036 00d8 0D4B     		ldr	r3, .L258
 3037 00da 0422     		mov	r2, #4
 3038 00dc 1A70     		strb	r2, [r3]
 853:.\main.c      ****             }
 854:.\main.c      ****             else
 855:.\main.c      ****             {
 856:.\main.c      ****                 arduino_state = ard_wait;
 857:.\main.c      ****             }
 858:.\main.c      ****             break;
 3039              		.loc 2 858 0
 3040 00de 13E0     		b	.L234
 3041              	.L253:
 856:.\main.c      ****                 arduino_state = ard_wait;
 3042              		.loc 2 856 0
 3043 00e0 0B4B     		ldr	r3, .L258
 3044 00e2 0222     		mov	r2, #2
 3045 00e4 1A70     		strb	r2, [r3]
 3046              		.loc 2 858 0
 3047 00e6 0FE0     		b	.L234
 3048              	.L251:
 859:.\main.c      ****             
 860:.\main.c      ****         case ard_write:
 861:.\main.c      ****             if(ARD_FLAG)
 3049              		.loc 2 861 0
 3050 00e8 0D4B     		ldr	r3, .L258+16
 3051 00ea 1B78     		ldrb	r3, [r3]
 3052 00ec 002B     		cmp	r3, #0
 3053 00ee 03D0     		beq	.L255
 862:.\main.c      ****             {
 863:.\main.c      ****                 arduino_state = ard_write;
 3054              		.loc 2 863 0
 3055 00f0 074B     		ldr	r3, .L258
 3056 00f2 0422     		mov	r2, #4
 3057 00f4 1A70     		strb	r2, [r3]
 864:.\main.c      ****             }
 865:.\main.c      ****             else
 866:.\main.c      ****             {
 867:.\main.c      ****                 arduino_state = ard_wait;
 868:.\main.c      ****             }
 869:.\main.c      ****             break;
 3058              		.loc 2 869 0
 3059 00f6 07E0     		b	.L234
 3060              	.L255:
 867:.\main.c      ****                 arduino_state = ard_wait;
 3061              		.loc 2 867 0
 3062 00f8 054B     		ldr	r3, .L258
 3063 00fa 0222     		mov	r2, #2
 3064 00fc 1A70     		strb	r2, [r3]
 3065              		.loc 2 869 0
 3066 00fe 03E0     		b	.L234
 3067              	.L245:
 870:.\main.c      ****             
 871:.\main.c      ****         default:
 872:.\main.c      ****             arduino_state = ard_start;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 72


 3068              		.loc 2 872 0
 3069 0100 034B     		ldr	r3, .L258
 3070 0102 0022     		mov	r2, #0
 3071 0104 1A70     		strb	r2, [r3]
 873:.\main.c      ****             break;
 3072              		.loc 2 873 0
 3073 0106 C046     		mov	r8, r8
 3074              	.L234:
 874:.\main.c      ****     }   
 875:.\main.c      **** }
 3075              		.loc 2 875 0
 3076 0108 BD46     		mov	sp, r7
 3077 010a 02B0     		add	sp, sp, #8
 3078              		@ sp needed
 3079 010c 80BD     		pop	{r7, pc}
 3080              	.L259:
 3081 010e C046     		.align	2
 3082              	.L258:
 3083 0110 00000000 		.word	arduino_state
 3084 0114 28000000 		.word	.L237
 3085 0118 00000000 		.word	feedback_array
 3086 011c 00000000 		.word	data_array
 3087 0120 00000000 		.word	ARD_FLAG
 3088 0124 3C000000 		.word	.L247
 3089              		.cfi_endproc
 3090              	.LFE52:
 3091              		.size	arduino, .-arduino
 3092              		.section	.text.initialize,"ax",%progbits
 3093              		.align	2
 3094              		.global	initialize
 3095              		.code	16
 3096              		.thumb_func
 3097              		.type	initialize, %function
 3098              	initialize:
 3099              	.LFB53:
 876:.\main.c      **** 
 877:.\main.c      **** //Initialization function for the program
 878:.\main.c      **** void initialize()
 879:.\main.c      **** {
 3100              		.loc 2 879 0
 3101              		.cfi_startproc
 3102 0000 80B5     		push	{r7, lr}
 3103              		.cfi_def_cfa_offset 8
 3104              		.cfi_offset 7, -8
 3105              		.cfi_offset 14, -4
 3106 0002 82B0     		sub	sp, sp, #8
 3107              		.cfi_def_cfa_offset 16
 3108 0004 00AF     		add	r7, sp, #0
 3109              		.cfi_def_cfa_register 7
 880:.\main.c      ****     //initialize the wiznet
 881:.\main.c      ****     WIZ_RST_Write(0);
 3110              		.loc 2 881 0
 3111 0006 0020     		mov	r0, #0
 3112 0008 FFF7FEFF 		bl	WIZ_RST_Write
 882:.\main.c      ****     CyDelay(10);
 3113              		.loc 2 882 0
 3114 000c 0A20     		mov	r0, #10
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 73


 3115 000e FFF7FEFF 		bl	CyDelay
 883:.\main.c      ****     WIZ_RST_Write(1);
 3116              		.loc 2 883 0
 3117 0012 0120     		mov	r0, #1
 3118 0014 FFF7FEFF 		bl	WIZ_RST_Write
 884:.\main.c      ****     WIZ_SS_Write(1);
 3119              		.loc 2 884 0
 3120 0018 0120     		mov	r0, #1
 3121 001a FFF7FEFF 		bl	WIZ_SS_Write
 3122              	.LBB3:
 885:.\main.c      ****     for(uint8 j=0; j<100; j++)
 3123              		.loc 2 885 0
 3124 001e FB1D     		add	r3, r7, #7
 3125 0020 0022     		mov	r2, #0
 3126 0022 1A70     		strb	r2, [r3]
 3127 0024 0DE0     		b	.L261
 3128              	.L264:
 886:.\main.c      ****     {
 887:.\main.c      ****         if(WIZ_RDY_Read())
 3129              		.loc 2 887 0
 3130 0026 FFF7FEFF 		bl	WIZ_RDY_Read
 3131 002a 031C     		mov	r3, r0
 3132 002c 002B     		cmp	r3, #0
 3133 002e 00D0     		beq	.L262
 888:.\main.c      ****         {
 889:.\main.c      ****             break;
 3134              		.loc 2 889 0
 3135 0030 0BE0     		b	.L263
 3136              	.L262:
 890:.\main.c      ****         }
 891:.\main.c      ****         else
 892:.\main.c      ****         {
 893:.\main.c      ****             CyDelay(4);
 3137              		.loc 2 893 0
 3138 0032 0420     		mov	r0, #4
 3139 0034 FFF7FEFF 		bl	CyDelay
 885:.\main.c      ****     for(uint8 j=0; j<100; j++)
 3140              		.loc 2 885 0
 3141 0038 FB1D     		add	r3, r7, #7
 3142 003a 1A78     		ldrb	r2, [r3]
 3143 003c FB1D     		add	r3, r7, #7
 3144 003e 0132     		add	r2, r2, #1
 3145 0040 1A70     		strb	r2, [r3]
 3146              	.L261:
 885:.\main.c      ****     for(uint8 j=0; j<100; j++)
 3147              		.loc 2 885 0 is_stmt 0 discriminator 1
 3148 0042 FB1D     		add	r3, r7, #7
 3149 0044 1B78     		ldrb	r3, [r3]
 3150 0046 632B     		cmp	r3, #99
 3151 0048 EDD9     		bls	.L264
 3152              	.L263:
 3153              	.LBE3:
 894:.\main.c      ****         }
 895:.\main.c      ****     }
 896:.\main.c      ****     
 897:.\main.c      ****     //Initialize state variables
 898:.\main.c      ****     baseAzimuth_state = BA_start;
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 74


 3154              		.loc 2 898 0 is_stmt 1
 3155 004a 2C4B     		ldr	r3, .L265
 3156 004c 0022     		mov	r2, #0
 3157 004e 1A70     		strb	r2, [r3]
 899:.\main.c      ****     wristTilt_state = tilt_start;
 3158              		.loc 2 899 0
 3159 0050 2B4B     		ldr	r3, .L265+4
 3160 0052 0022     		mov	r2, #0
 3161 0054 1A70     		strb	r2, [r3]
 900:.\main.c      ****     wristRotate_state = rotate_start;
 3162              		.loc 2 900 0
 3163 0056 2B4B     		ldr	r3, .L265+8
 3164 0058 0022     		mov	r2, #0
 3165 005a 1A70     		strb	r2, [r3]
 901:.\main.c      ****     shoulder_state = shldr_start;
 3166              		.loc 2 901 0
 3167 005c 2A4B     		ldr	r3, .L265+12
 3168 005e 0022     		mov	r2, #0
 3169 0060 1A70     		strb	r2, [r3]
 902:.\main.c      ****     elbow_state = elbw_start;
 3170              		.loc 2 902 0
 3171 0062 2A4B     		ldr	r3, .L265+16
 3172 0064 0022     		mov	r2, #0
 3173 0066 1A70     		strb	r2, [r3]
 903:.\main.c      ****     effector_state = eff_start;
 3174              		.loc 2 903 0
 3175 0068 294B     		ldr	r3, .L265+20
 3176 006a 0022     		mov	r2, #0
 3177 006c 1A70     		strb	r2, [r3]
 904:.\main.c      ****     arduino_state = ard_start;
 3178              		.loc 2 904 0
 3179 006e 294B     		ldr	r3, .L265+24
 3180 0070 0022     		mov	r2, #0
 3181 0072 1A70     		strb	r2, [r3]
 905:.\main.c      ****     send_packet_state = send_start;
 3182              		.loc 2 905 0
 3183 0074 284B     		ldr	r3, .L265+28
 3184 0076 0022     		mov	r2, #0
 3185 0078 1A70     		strb	r2, [r3]
 906:.\main.c      ****     
 907:.\main.c      ****     //start all of our components
 908:.\main.c      ****     SPIM_1_Start();
 3186              		.loc 2 908 0
 3187 007a FFF7FEFF 		bl	SPIM_1_Start
 909:.\main.c      ****     Clock_pwm_Start();
 3188              		.loc 2 909 0
 3189 007e FFF7FEFF 		bl	Clock_pwm_Start
 910:.\main.c      ****     Clock_counter_Start();
 3190              		.loc 2 910 0
 3191 0082 FFF7FEFF 		bl	Clock_counter_Start
 911:.\main.c      ****     Wrist_UART_Start();
 3192              		.loc 2 911 0
 3193 0086 FFF7FEFF 		bl	Wrist_UART_Start
 912:.\main.c      ****     SHLDR_PWM_Start();
 3194              		.loc 2 912 0
 3195 008a FFF7FEFF 		bl	SHLDR_PWM_Start
 913:.\main.c      ****     BA_PWM_Start();
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 75


 3196              		.loc 2 913 0
 3197 008e FFF7FEFF 		bl	BA_PWM_Start
 914:.\main.c      ****     ELBW_PWM_Start();
 3198              		.loc 2 914 0
 3199 0092 FFF7FEFF 		bl	ELBW_PWM_Start
 915:.\main.c      ****     EFFECTOR_PWM_Start();
 3200              		.loc 2 915 0
 3201 0096 FFF7FEFF 		bl	EFFECTOR_PWM_Start
 916:.\main.c      ****     //ADC_Start();
 917:.\main.c      ****     //ADC_StartConvert();
 918:.\main.c      ****     Arduino_UART_Start();
 3202              		.loc 2 918 0
 3203 009a FFF7FEFF 		bl	Arduino_UART_Start
 919:.\main.c      ****     
 920:.\main.c      ****     wiznetInit(ownIpAddr, dstIpAddr, udpPort);
 3204              		.loc 2 920 0
 3205 009e 1F4B     		ldr	r3, .L265+32
 3206 00a0 0420     		mov	r0, #4
 3207 00a2 0121     		mov	r1, #1
 3208 00a4 1A1C     		mov	r2, r3
 3209 00a6 FFF7FEFF 		bl	wiznetInit
 921:.\main.c      ****     
 922:.\main.c      ****     //Initialize the dynamixels <-- Will do this on the computer
 923:.\main.c      ****     ServoSpeed(0xFE, 300);
 3210              		.loc 2 923 0
 3211 00aa 9623     		mov	r3, #150
 3212 00ac 5B00     		lsl	r3, r3, #1
 3213 00ae FE20     		mov	r0, #254
 3214 00b0 191C     		mov	r1, r3
 3215 00b2 FFF7FEFF 		bl	ServoSpeed
 924:.\main.c      ****     SetServoTorque(0xFE, 0x03FF);
 3216              		.loc 2 924 0
 3217 00b6 1A4B     		ldr	r3, .L265+36
 3218 00b8 FE20     		mov	r0, #254
 3219 00ba 191C     		mov	r1, r3
 3220 00bc FFF7FEFF 		bl	SetServoTorque
 925:.\main.c      ****     
 926:.\main.c      ****     //Initialize our motor drivers
 927:.\main.c      ****     ELBW_PWM_WriteCompare(NEUTRAL); 
 3221              		.loc 2 927 0
 3222 00c0 184B     		ldr	r3, .L265+40
 3223 00c2 1B88     		ldrh	r3, [r3]
 3224 00c4 181C     		mov	r0, r3
 3225 00c6 FFF7FEFF 		bl	ELBW_PWM_WriteCompare
 928:.\main.c      ****     SHLDR_PWM_WriteCompare(NEUTRAL);
 3226              		.loc 2 928 0
 3227 00ca 164B     		ldr	r3, .L265+40
 3228 00cc 1B88     		ldrh	r3, [r3]
 3229 00ce 181C     		mov	r0, r3
 3230 00d0 FFF7FEFF 		bl	SHLDR_PWM_WriteCompare
 929:.\main.c      ****     EFFECTOR_PWM_WriteCompare(NEUTRAL);
 3231              		.loc 2 929 0
 3232 00d4 134B     		ldr	r3, .L265+40
 3233 00d6 1B88     		ldrh	r3, [r3]
 3234 00d8 181C     		mov	r0, r3
 3235 00da FFF7FEFF 		bl	EFFECTOR_PWM_WriteCompare
 930:.\main.c      ****     CyDelay(3000);
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 76


 3236              		.loc 2 930 0
 3237 00de 124B     		ldr	r3, .L265+44
 3238 00e0 181C     		mov	r0, r3
 3239 00e2 FFF7FEFF 		bl	CyDelay
 931:.\main.c      ****     
 932:.\main.c      ****     //ISR stuff
 933:.\main.c      ****     CyGlobalIntEnable;
 3240              		.loc 2 933 0
 3241              	@ 933 ".\main.c" 1
 3242 00e6 62B6     		CPSIE   i
 3243              	@ 0 "" 2
 934:.\main.c      ****     isr_1_StartEx(timer_isr);
 3244              		.loc 2 934 0
 3245              		.code	16
 3246 00e8 104B     		ldr	r3, .L265+48
 3247 00ea 181C     		mov	r0, r3
 3248 00ec FFF7FEFF 		bl	isr_1_StartEx
 935:.\main.c      ****     Timer_1_Start();    
 3249              		.loc 2 935 0
 3250 00f0 FFF7FEFF 		bl	Timer_1_Start
 936:.\main.c      **** }
 3251              		.loc 2 936 0
 3252 00f4 BD46     		mov	sp, r7
 3253 00f6 02B0     		add	sp, sp, #8
 3254              		@ sp needed
 3255 00f8 80BD     		pop	{r7, pc}
 3256              	.L266:
 3257 00fa C046     		.align	2
 3258              	.L265:
 3259 00fc 00000000 		.word	baseAzimuth_state
 3260 0100 00000000 		.word	wristTilt_state
 3261 0104 00000000 		.word	wristRotate_state
 3262 0108 00000000 		.word	shoulder_state
 3263 010c 00000000 		.word	elbow_state
 3264 0110 00000000 		.word	effector_state
 3265 0114 00000000 		.word	arduino_state
 3266 0118 00000000 		.word	send_packet_state
 3267 011c 87690000 		.word	27015
 3268 0120 FF030000 		.word	1023
 3269 0124 00000000 		.word	NEUTRAL
 3270 0128 B80B0000 		.word	3000
 3271 012c 00000000 		.word	timer_isr
 3272              		.cfi_endproc
 3273              	.LFE53:
 3274              		.size	initialize, .-initialize
 3275              		.section	.text.main,"ax",%progbits
 3276              		.align	2
 3277              		.global	main
 3278              		.code	16
 3279              		.thumb_func
 3280              		.type	main, %function
 3281              	main:
 3282              	.LFB54:
 937:.\main.c      **** int main()
 938:.\main.c      **** {  
 3283              		.loc 2 938 0
 3284              		.cfi_startproc
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 77


 3285 0000 80B5     		push	{r7, lr}
 3286              		.cfi_def_cfa_offset 8
 3287              		.cfi_offset 7, -8
 3288              		.cfi_offset 14, -4
 3289 0002 84B0     		sub	sp, sp, #16
 3290              		.cfi_def_cfa_offset 24
 3291 0004 00AF     		add	r7, sp, #0
 3292              		.cfi_def_cfa_register 7
 939:.\main.c      ****     //Define variables
 940:.\main.c      ****     uint8 fs_count = 0; //fail safe counter to check the interval between receiving packets
 3293              		.loc 2 940 0
 3294 0006 3B1C     		mov	r3, r7
 3295 0008 0F33     		add	r3, r3, #15
 3296 000a 0022     		mov	r2, #0
 3297 000c 1A70     		strb	r2, [r3]
 941:.\main.c      ****     int16 temp_val = NEUTRAL;
 3298              		.loc 2 941 0
 3299 000e 524B     		ldr	r3, .L277
 3300 0010 1A88     		ldrh	r2, [r3]
 3301 0012 BB1D     		add	r3, r7, #6
 3302 0014 1A80     		strh	r2, [r3]
 942:.\main.c      ****     uint8 tick_count = 0;
 3303              		.loc 2 942 0
 3304 0016 3B1C     		mov	r3, r7
 3305 0018 0E33     		add	r3, r3, #14
 3306 001a 0022     		mov	r2, #0
 3307 001c 1A70     		strb	r2, [r3]
 943:.\main.c      ****     
 944:.\main.c      ****     initialize();
 3308              		.loc 2 944 0
 3309 001e FFF7FEFF 		bl	initialize
 3310              	.L276:
 945:.\main.c      **** 
 946:.\main.c      ****     for(;;)
 947:.\main.c      ****     {   
 948:.\main.c      ****         if(WIZ_INT_Read()==0)
 3311              		.loc 2 948 0
 3312 0022 FFF7FEFF 		bl	WIZ_INT_Read
 3313 0026 031C     		mov	r3, r0
 3314 0028 002B     		cmp	r3, #0
 3315 002a 1DD1     		bne	.L268
 949:.\main.c      ****         {
 950:.\main.c      ****             wiznetClearInterrupts();
 3316              		.loc 2 950 0
 3317 002c FFF7FEFF 		bl	wiznetClearInterrupts
 951:.\main.c      ****             fill_data_array();
 3318              		.loc 2 951 0
 3319 0030 FFF7FEFF 		bl	fill_data_array
 952:.\main.c      ****             //TODO: check addresses? -- set up error checking/reporting logic
 953:.\main.c      ****             BA_FLAG = 1;
 3320              		.loc 2 953 0
 3321 0034 494B     		ldr	r3, .L277+4
 3322 0036 0122     		mov	r2, #1
 3323 0038 1A70     		strb	r2, [r3]
 954:.\main.c      ****             WR_FLAG = 1;
 3324              		.loc 2 954 0
 3325 003a 494B     		ldr	r3, .L277+8
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 78


 3326 003c 0122     		mov	r2, #1
 3327 003e 1A70     		strb	r2, [r3]
 955:.\main.c      ****             WT_FLAG = 1;
 3328              		.loc 2 955 0
 3329 0040 484B     		ldr	r3, .L277+12
 3330 0042 0122     		mov	r2, #1
 3331 0044 1A70     		strb	r2, [r3]
 956:.\main.c      ****             SHOULDER_FLAG = 1;
 3332              		.loc 2 956 0
 3333 0046 484B     		ldr	r3, .L277+16
 3334 0048 0122     		mov	r2, #1
 3335 004a 1A70     		strb	r2, [r3]
 957:.\main.c      ****             ELBOW_FLAG = 1;
 3336              		.loc 2 957 0
 3337 004c 474B     		ldr	r3, .L277+20
 3338 004e 0122     		mov	r2, #1
 3339 0050 1A70     		strb	r2, [r3]
 958:.\main.c      ****             EFFECTOR_FLAG = 1;
 3340              		.loc 2 958 0
 3341 0052 474B     		ldr	r3, .L277+24
 3342 0054 0122     		mov	r2, #1
 3343 0056 1A70     		strb	r2, [r3]
 959:.\main.c      ****             ARD_FLAG = 1;
 3344              		.loc 2 959 0
 3345 0058 464B     		ldr	r3, .L277+28
 3346 005a 0122     		mov	r2, #1
 3347 005c 1A70     		strb	r2, [r3]
 960:.\main.c      ****             fs_count = 0;
 3348              		.loc 2 960 0
 3349 005e 3B1C     		mov	r3, r7
 3350 0060 0F33     		add	r3, r3, #15
 3351 0062 0022     		mov	r2, #0
 3352 0064 1A70     		strb	r2, [r3]
 3353 0066 06E0     		b	.L269
 3354              	.L268:
 961:.\main.c      ****             //HEARTBEAT_FLAG = 1;
 962:.\main.c      ****             //send_packet(); //send heartbeat
 963:.\main.c      ****         }
 964:.\main.c      ****         else
 965:.\main.c      ****         {
 966:.\main.c      ****             fs_count += 1;
 3355              		.loc 2 966 0
 3356 0068 3B1C     		mov	r3, r7
 3357 006a 0F33     		add	r3, r3, #15
 3358 006c 3A1C     		mov	r2, r7
 3359 006e 0F32     		add	r2, r2, #15
 3360 0070 1278     		ldrb	r2, [r2]
 3361 0072 0132     		add	r2, r2, #1
 3362 0074 1A70     		strb	r2, [r3]
 3363              	.L269:
 967:.\main.c      ****         }
 968:.\main.c      ****         
 969:.\main.c      ****         if(fs_count >= 50)
 3364              		.loc 2 969 0
 3365 0076 3B1C     		mov	r3, r7
 3366 0078 0F33     		add	r3, r3, #15
 3367 007a 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 79


 3368 007c 312B     		cmp	r3, #49
 3369 007e 1DD9     		bls	.L270
 970:.\main.c      ****         {
 971:.\main.c      ****             temp_val = NEUTRAL;
 3370              		.loc 2 971 0
 3371 0080 354B     		ldr	r3, .L277
 3372 0082 1A88     		ldrh	r2, [r3]
 3373 0084 BB1D     		add	r3, r7, #6
 3374 0086 1A80     		strh	r2, [r3]
 3375              	.LBB4:
 972:.\main.c      ****             for(int i = 0; i < DATA_ARRAY_SIZE; (i+=2))
 3376              		.loc 2 972 0
 3377 0088 0023     		mov	r3, #0
 3378 008a BB60     		str	r3, [r7, #8]
 3379 008c 13E0     		b	.L271
 3380              	.L272:
 973:.\main.c      ****             {
 974:.\main.c      ****                 data_array[i] = temp_val >> 8;
 3381              		.loc 2 974 0 discriminator 2
 3382 008e BB1D     		add	r3, r7, #6
 3383 0090 0022     		mov	r2, #0
 3384 0092 9B5E     		ldrsh	r3, [r3, r2]
 3385 0094 1B12     		asr	r3, r3, #8
 3386 0096 9BB2     		uxth	r3, r3
 3387 0098 DAB2     		uxtb	r2, r3
 3388 009a 3749     		ldr	r1, .L277+32
 3389 009c BB68     		ldr	r3, [r7, #8]
 3390 009e CB18     		add	r3, r1, r3
 3391 00a0 1A70     		strb	r2, [r3]
 975:.\main.c      ****                 data_array[i+1] = temp_val & 0x00FF;
 3392              		.loc 2 975 0 discriminator 2
 3393 00a2 BB68     		ldr	r3, [r7, #8]
 3394 00a4 0133     		add	r3, r3, #1
 3395 00a6 BA1D     		add	r2, r7, #6
 3396 00a8 1288     		ldrh	r2, [r2]
 3397 00aa D1B2     		uxtb	r1, r2
 3398 00ac 324A     		ldr	r2, .L277+32
 3399 00ae D154     		strb	r1, [r2, r3]
 972:.\main.c      ****             for(int i = 0; i < DATA_ARRAY_SIZE; (i+=2))
 3400              		.loc 2 972 0 discriminator 2
 3401 00b0 BB68     		ldr	r3, [r7, #8]
 3402 00b2 0233     		add	r3, r3, #2
 3403 00b4 BB60     		str	r3, [r7, #8]
 3404              	.L271:
 972:.\main.c      ****             for(int i = 0; i < DATA_ARRAY_SIZE; (i+=2))
 3405              		.loc 2 972 0 is_stmt 0 discriminator 1
 3406 00b6 BB68     		ldr	r3, [r7, #8]
 3407 00b8 172B     		cmp	r3, #23
 3408 00ba E8DD     		ble	.L272
 3409              	.L270:
 3410              	.LBE4:
 976:.\main.c      ****             }
 977:.\main.c      ****         }
 978:.\main.c      ****         
 979:.\main.c      ****         baseAzimuth();
 3411              		.loc 2 979 0 is_stmt 1
 3412 00bc FFF7FEFF 		bl	baseAzimuth
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 80


 980:.\main.c      ****         shoulder();
 3413              		.loc 2 980 0
 3414 00c0 FFF7FEFF 		bl	shoulder
 981:.\main.c      ****         elbow();
 3415              		.loc 2 981 0
 3416 00c4 FFF7FEFF 		bl	elbow
 982:.\main.c      ****         effector();
 3417              		.loc 2 982 0
 3418 00c8 FFF7FEFF 		bl	effector
 983:.\main.c      ****         wristTilt();
 3419              		.loc 2 983 0
 3420 00cc FFF7FEFF 		bl	wristTilt
 984:.\main.c      ****         wristRotate();
 3421              		.loc 2 984 0
 3422 00d0 FFF7FEFF 		bl	wristRotate
 985:.\main.c      ****         arduino();
 3423              		.loc 2 985 0
 3424 00d4 FFF7FEFF 		bl	arduino
 986:.\main.c      ****         tick_count += 1;
 3425              		.loc 2 986 0
 3426 00d8 3B1C     		mov	r3, r7
 3427 00da 0E33     		add	r3, r3, #14
 3428 00dc 3A1C     		mov	r2, r7
 3429 00de 0E32     		add	r2, r2, #14
 3430 00e0 1278     		ldrb	r2, [r2]
 3431 00e2 0132     		add	r2, r2, #1
 3432 00e4 1A70     		strb	r2, [r3]
 987:.\main.c      ****         if(tick_count == 100)
 3433              		.loc 2 987 0
 3434 00e6 3B1C     		mov	r3, r7
 3435 00e8 0E33     		add	r3, r3, #14
 3436 00ea 1B78     		ldrb	r3, [r3]
 3437 00ec 642B     		cmp	r3, #100
 3438 00ee 07D1     		bne	.L273
 988:.\main.c      ****         {
 989:.\main.c      ****             tick_count = 0;
 3439              		.loc 2 989 0
 3440 00f0 3B1C     		mov	r3, r7
 3441 00f2 0E33     		add	r3, r3, #14
 3442 00f4 0022     		mov	r2, #0
 3443 00f6 1A70     		strb	r2, [r3]
 990:.\main.c      ****             HEARTBEAT_FLAG = 1;
 3444              		.loc 2 990 0
 3445 00f8 204B     		ldr	r3, .L277+36
 3446 00fa 0122     		mov	r2, #1
 3447 00fc 1A70     		strb	r2, [r3]
 3448 00fe 02E0     		b	.L274
 3449              	.L273:
 991:.\main.c      ****         }
 992:.\main.c      ****         else
 993:.\main.c      ****         {
 994:.\main.c      ****             HEARTBEAT_FLAG = 0;
 3450              		.loc 2 994 0
 3451 0100 1E4B     		ldr	r3, .L277+36
 3452 0102 0022     		mov	r2, #0
 3453 0104 1A70     		strb	r2, [r3]
 3454              	.L274:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 81


 995:.\main.c      ****         }
 996:.\main.c      ****         
 997:.\main.c      ****         feedback_array[14] = fail_safe_errors;
 3455              		.loc 2 997 0
 3456 0106 1E4B     		ldr	r3, .L277+40
 3457 0108 1A78     		ldrb	r2, [r3]
 3458 010a 1E4B     		ldr	r3, .L277+44
 3459 010c 9A73     		strb	r2, [r3, #14]
 998:.\main.c      ****         feedback_array[15] = shldr_errors;
 3460              		.loc 2 998 0
 3461 010e 1E4B     		ldr	r3, .L277+48
 3462 0110 1A78     		ldrb	r2, [r3]
 3463 0112 1C4B     		ldr	r3, .L277+44
 3464 0114 DA73     		strb	r2, [r3, #15]
 999:.\main.c      ****         feedback_array[16] = elbw_errors;
 3465              		.loc 2 999 0
 3466 0116 1D4B     		ldr	r3, .L277+52
 3467 0118 1A78     		ldrb	r2, [r3]
 3468 011a 1A4B     		ldr	r3, .L277+44
 3469 011c 1A74     		strb	r2, [r3, #16]
1000:.\main.c      ****         feedback_array[17] = BA_errors;
 3470              		.loc 2 1000 0
 3471 011e 1C4B     		ldr	r3, .L277+56
 3472 0120 1A78     		ldrb	r2, [r3]
 3473 0122 184B     		ldr	r3, .L277+44
 3474 0124 5A74     		strb	r2, [r3, #17]
1001:.\main.c      ****         feedback_array[18] = WT_errors;
 3475              		.loc 2 1001 0
 3476 0126 1B4B     		ldr	r3, .L277+60
 3477 0128 1A78     		ldrb	r2, [r3]
 3478 012a 164B     		ldr	r3, .L277+44
 3479 012c 9A74     		strb	r2, [r3, #18]
1002:.\main.c      ****         feedback_array[19] = WR_errors;
 3480              		.loc 2 1002 0
 3481 012e 1A4B     		ldr	r3, .L277+64
 3482 0130 1A78     		ldrb	r2, [r3]
 3483 0132 144B     		ldr	r3, .L277+44
 3484 0134 DA74     		strb	r2, [r3, #19]
1003:.\main.c      ****         feedback_array[20] = eff_errors; 
 3485              		.loc 2 1003 0
 3486 0136 194B     		ldr	r3, .L277+68
 3487 0138 1A78     		ldrb	r2, [r3]
 3488 013a 124B     		ldr	r3, .L277+44
 3489 013c 1A75     		strb	r2, [r3, #20]
1004:.\main.c      ****         
1005:.\main.c      ****         send_packet(); //send feedback packet
 3490              		.loc 2 1005 0
 3491 013e FFF7FEFF 		bl	send_packet
1006:.\main.c      ****         
1007:.\main.c      ****         while(!timerFlag){} //this while loop will periodize our code to the time of longest path
 3492              		.loc 2 1007 0
 3493 0142 C046     		mov	r8, r8
 3494              	.L275:
 3495              		.loc 2 1007 0 is_stmt 0 discriminator 1
 3496 0144 164B     		ldr	r3, .L277+72
 3497 0146 1B78     		ldrb	r3, [r3]
 3498 0148 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 82


 3499 014a 002B     		cmp	r3, #0
 3500 014c FAD0     		beq	.L275
1008:.\main.c      ****         timerFlag = 0;
 3501              		.loc 2 1008 0 is_stmt 1
 3502 014e 144B     		ldr	r3, .L277+72
 3503 0150 0022     		mov	r2, #0
 3504 0152 1A70     		strb	r2, [r3]
1009:.\main.c      ****     } 
 3505              		.loc 2 1009 0
 3506 0154 65E7     		b	.L276
 3507              	.L278:
 3508 0156 C046     		.align	2
 3509              	.L277:
 3510 0158 00000000 		.word	NEUTRAL
 3511 015c 00000000 		.word	BA_FLAG
 3512 0160 00000000 		.word	WR_FLAG
 3513 0164 00000000 		.word	WT_FLAG
 3514 0168 00000000 		.word	SHOULDER_FLAG
 3515 016c 00000000 		.word	ELBOW_FLAG
 3516 0170 00000000 		.word	EFFECTOR_FLAG
 3517 0174 00000000 		.word	ARD_FLAG
 3518 0178 00000000 		.word	data_array
 3519 017c 00000000 		.word	HEARTBEAT_FLAG
 3520 0180 00000000 		.word	fail_safe_errors
 3521 0184 00000000 		.word	feedback_array
 3522 0188 00000000 		.word	shldr_errors
 3523 018c 00000000 		.word	elbw_errors
 3524 0190 00000000 		.word	BA_errors
 3525 0194 00000000 		.word	WT_errors
 3526 0198 00000000 		.word	WR_errors
 3527 019c 00000000 		.word	eff_errors
 3528 01a0 00000000 		.word	timerFlag
 3529              		.cfi_endproc
 3530              	.LFE54:
 3531              		.size	main, .-main
 3532              		.text
 3533              	.Letext0:
 3534              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 3535              		.file 4 "c:\\program files (x86)\\cypress\\psoc creator\\3.1\\psoc creator\\import\\gnu_cs\\arm\\4
 3536              		.file 5 ".\\Generated_Source\\PSoC4/cytypes.h"
 3537              		.file 6 ".\\main.h"
 3538              		.section	.debug_info,"",%progbits
 3539              	.Ldebug_info0:
 3540 0000 220A0000 		.4byte	0xa22
 3541 0004 0400     		.2byte	0x4
 3542 0006 00000000 		.4byte	.Ldebug_abbrev0
 3543 000a 04       		.byte	0x4
 3544 000b 01       		.uleb128 0x1
 3545 000c E5050000 		.4byte	.LASF144
 3546 0010 01       		.byte	0x1
 3547 0011 71070000 		.4byte	.LASF145
 3548 0015 AB060000 		.4byte	.LASF146
 3549 0019 00000000 		.4byte	.Ldebug_ranges0+0
 3550 001d 00000000 		.4byte	0
 3551 0021 00000000 		.4byte	.Ldebug_line0
 3552 0025 02       		.uleb128 0x2
 3553 0026 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 83


 3554 0027 06       		.byte	0x6
 3555 0028 7D060000 		.4byte	.LASF0
 3556 002c 03       		.uleb128 0x3
 3557 002d CE040000 		.4byte	.LASF9
 3558 0031 03       		.byte	0x3
 3559 0032 1C       		.byte	0x1c
 3560 0033 37000000 		.4byte	0x37
 3561 0037 02       		.uleb128 0x2
 3562 0038 01       		.byte	0x1
 3563 0039 08       		.byte	0x8
 3564 003a 64050000 		.4byte	.LASF1
 3565 003e 02       		.uleb128 0x2
 3566 003f 02       		.byte	0x2
 3567 0040 05       		.byte	0x5
 3568 0041 35040000 		.4byte	.LASF2
 3569 0045 02       		.uleb128 0x2
 3570 0046 02       		.byte	0x2
 3571 0047 07       		.byte	0x7
 3572 0048 89060000 		.4byte	.LASF3
 3573 004c 02       		.uleb128 0x2
 3574 004d 04       		.byte	0x4
 3575 004e 05       		.byte	0x5
 3576 004f 60040000 		.4byte	.LASF4
 3577 0053 02       		.uleb128 0x2
 3578 0054 04       		.byte	0x4
 3579 0055 07       		.byte	0x7
 3580 0056 1B050000 		.4byte	.LASF5
 3581 005a 02       		.uleb128 0x2
 3582 005b 08       		.byte	0x8
 3583 005c 05       		.byte	0x5
 3584 005d C0020000 		.4byte	.LASF6
 3585 0061 02       		.uleb128 0x2
 3586 0062 08       		.byte	0x8
 3587 0063 07       		.byte	0x7
 3588 0064 1F010000 		.4byte	.LASF7
 3589 0068 04       		.uleb128 0x4
 3590 0069 04       		.byte	0x4
 3591 006a 05       		.byte	0x5
 3592 006b 696E7400 		.ascii	"int\000"
 3593 006f 02       		.uleb128 0x2
 3594 0070 04       		.byte	0x4
 3595 0071 07       		.byte	0x7
 3596 0072 68000000 		.4byte	.LASF8
 3597 0076 03       		.uleb128 0x3
 3598 0077 7E020000 		.4byte	.LASF10
 3599 007b 04       		.byte	0x4
 3600 007c 2A       		.byte	0x2a
 3601 007d 2C000000 		.4byte	0x2c
 3602 0081 03       		.uleb128 0x3
 3603 0082 13070000 		.4byte	.LASF11
 3604 0086 05       		.byte	0x5
 3605 0087 A1       		.byte	0xa1
 3606 0088 37000000 		.4byte	0x37
 3607 008c 03       		.uleb128 0x3
 3608 008d 4F020000 		.4byte	.LASF12
 3609 0091 05       		.byte	0x5
 3610 0092 A2       		.byte	0xa2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 84


 3611 0093 45000000 		.4byte	0x45
 3612 0097 03       		.uleb128 0x3
 3613 0098 66030000 		.4byte	.LASF13
 3614 009c 05       		.byte	0x5
 3615 009d A3       		.byte	0xa3
 3616 009e 53000000 		.4byte	0x53
 3617 00a2 03       		.uleb128 0x3
 3618 00a3 97000000 		.4byte	.LASF14
 3619 00a7 05       		.byte	0x5
 3620 00a8 A5       		.byte	0xa5
 3621 00a9 3E000000 		.4byte	0x3e
 3622 00ad 02       		.uleb128 0x2
 3623 00ae 04       		.byte	0x4
 3624 00af 04       		.byte	0x4
 3625 00b0 F3000000 		.4byte	.LASF15
 3626 00b4 02       		.uleb128 0x2
 3627 00b5 08       		.byte	0x8
 3628 00b6 04       		.byte	0x4
 3629 00b7 19070000 		.4byte	.LASF16
 3630 00bb 02       		.uleb128 0x2
 3631 00bc 01       		.byte	0x1
 3632 00bd 08       		.byte	0x8
 3633 00be 3B020000 		.4byte	.LASF17
 3634 00c2 05       		.uleb128 0x5
 3635 00c3 81000000 		.4byte	0x81
 3636 00c7 02       		.uleb128 0x2
 3637 00c8 04       		.byte	0x4
 3638 00c9 07       		.byte	0x7
 3639 00ca 12050000 		.4byte	.LASF18
 3640 00ce 06       		.uleb128 0x6
 3641 00cf 04       		.byte	0x4
 3642 00d0 81000000 		.4byte	0x81
 3643 00d4 07       		.uleb128 0x7
 3644 00d5 3A050000 		.4byte	.LASF24
 3645 00d9 01       		.byte	0x1
 3646 00da 02       		.byte	0x2
 3647 00db C7       		.byte	0xc7
 3648 00dc FF000000 		.4byte	0xff
 3649 00e0 08       		.uleb128 0x8
 3650 00e1 42030000 		.4byte	.LASF19
 3651 00e5 00       		.sleb128 0
 3652 00e6 08       		.uleb128 0x8
 3653 00e7 2B040000 		.4byte	.LASF20
 3654 00eb 01       		.sleb128 1
 3655 00ec 08       		.uleb128 0x8
 3656 00ed 04050000 		.4byte	.LASF21
 3657 00f1 02       		.sleb128 2
 3658 00f2 08       		.uleb128 0x8
 3659 00f3 73010000 		.4byte	.LASF22
 3660 00f7 03       		.sleb128 3
 3661 00f8 08       		.uleb128 0x8
 3662 00f9 75030000 		.4byte	.LASF23
 3663 00fd 04       		.sleb128 4
 3664 00fe 00       		.byte	0
 3665 00ff 09       		.uleb128 0x9
 3666 0100 A3040000 		.4byte	.LASF25
 3667 0104 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 85


 3668 0105 02       		.byte	0x2
 3669 0106 3E01     		.2byte	0x13e
 3670 0108 25010000 		.4byte	0x125
 3671 010c 08       		.uleb128 0x8
 3672 010d CB000000 		.4byte	.LASF26
 3673 0111 00       		.sleb128 0
 3674 0112 08       		.uleb128 0x8
 3675 0113 0C000000 		.4byte	.LASF27
 3676 0117 01       		.sleb128 1
 3677 0118 08       		.uleb128 0x8
 3678 0119 69040000 		.4byte	.LASF28
 3679 011d 02       		.sleb128 2
 3680 011e 08       		.uleb128 0x8
 3681 011f FC060000 		.4byte	.LASF29
 3682 0123 03       		.sleb128 3
 3683 0124 00       		.byte	0
 3684 0125 09       		.uleb128 0x9
 3685 0126 07030000 		.4byte	.LASF30
 3686 012a 01       		.byte	0x1
 3687 012b 02       		.byte	0x2
 3688 012c 8F01     		.2byte	0x18f
 3689 012e 4B010000 		.4byte	0x14b
 3690 0132 08       		.uleb128 0x8
 3691 0133 A6000000 		.4byte	.LASF31
 3692 0137 00       		.sleb128 0
 3693 0138 08       		.uleb128 0x8
 3694 0139 D9050000 		.4byte	.LASF32
 3695 013d 01       		.sleb128 1
 3696 013e 08       		.uleb128 0x8
 3697 013f 1C040000 		.4byte	.LASF33
 3698 0143 02       		.sleb128 2
 3699 0144 08       		.uleb128 0x8
 3700 0145 D8040000 		.4byte	.LASF34
 3701 0149 03       		.sleb128 3
 3702 014a 00       		.byte	0
 3703 014b 09       		.uleb128 0x9
 3704 014c 48000000 		.4byte	.LASF35
 3705 0150 01       		.byte	0x1
 3706 0151 02       		.byte	0x2
 3707 0152 E001     		.2byte	0x1e0
 3708 0154 71010000 		.4byte	0x171
 3709 0158 08       		.uleb128 0x8
 3710 0159 A4030000 		.4byte	.LASF36
 3711 015d 00       		.sleb128 0
 3712 015e 08       		.uleb128 0x8
 3713 015f 7A070000 		.4byte	.LASF37
 3714 0163 01       		.sleb128 1
 3715 0164 08       		.uleb128 0x8
 3716 0165 2D050000 		.4byte	.LASF38
 3717 0169 02       		.sleb128 2
 3718 016a 08       		.uleb128 0x8
 3719 016b 9C060000 		.4byte	.LASF39
 3720 016f 03       		.sleb128 3
 3721 0170 00       		.byte	0
 3722 0171 09       		.uleb128 0x9
 3723 0172 CE020000 		.4byte	.LASF40
 3724 0176 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 86


 3725 0177 02       		.byte	0x2
 3726 0178 2C02     		.2byte	0x22c
 3727 017a 97010000 		.4byte	0x197
 3728 017e 08       		.uleb128 0x8
 3729 017f 4D050000 		.4byte	.LASF41
 3730 0183 00       		.sleb128 0
 3731 0184 08       		.uleb128 0x8
 3732 0185 95020000 		.4byte	.LASF42
 3733 0189 01       		.sleb128 1
 3734 018a 08       		.uleb128 0x8
 3735 018b C2050000 		.4byte	.LASF43
 3736 018f 02       		.sleb128 2
 3737 0190 08       		.uleb128 0x8
 3738 0191 F8010000 		.4byte	.LASF44
 3739 0195 03       		.sleb128 3
 3740 0196 00       		.byte	0
 3741 0197 09       		.uleb128 0x9
 3742 0198 84000000 		.4byte	.LASF45
 3743 019c 01       		.byte	0x1
 3744 019d 02       		.byte	0x2
 3745 019e 7802     		.2byte	0x278
 3746 01a0 BD010000 		.4byte	0x1bd
 3747 01a4 08       		.uleb128 0x8
 3748 01a5 9D000000 		.4byte	.LASF46
 3749 01a9 00       		.sleb128 0
 3750 01aa 08       		.uleb128 0x8
 3751 01ab F9000000 		.4byte	.LASF47
 3752 01af 01       		.sleb128 1
 3753 01b0 08       		.uleb128 0x8
 3754 01b1 3D000000 		.4byte	.LASF48
 3755 01b5 02       		.sleb128 2
 3756 01b6 08       		.uleb128 0x8
 3757 01b7 9B040000 		.4byte	.LASF49
 3758 01bb 03       		.sleb128 3
 3759 01bc 00       		.byte	0
 3760 01bd 09       		.uleb128 0x9
 3761 01be 32030000 		.4byte	.LASF50
 3762 01c2 01       		.byte	0x1
 3763 01c3 02       		.byte	0x2
 3764 01c4 C802     		.2byte	0x2c8
 3765 01c6 E3010000 		.4byte	0x1e3
 3766 01ca 08       		.uleb128 0x8
 3767 01cb BB010000 		.4byte	.LASF51
 3768 01cf 00       		.sleb128 0
 3769 01d0 08       		.uleb128 0x8
 3770 01d1 B9050000 		.4byte	.LASF52
 3771 01d5 01       		.sleb128 1
 3772 01d6 08       		.uleb128 0x8
 3773 01d7 5B010000 		.4byte	.LASF53
 3774 01db 02       		.sleb128 2
 3775 01dc 08       		.uleb128 0x8
 3776 01dd EF040000 		.4byte	.LASF54
 3777 01e1 03       		.sleb128 3
 3778 01e2 00       		.byte	0
 3779 01e3 09       		.uleb128 0x9
 3780 01e4 E0010000 		.4byte	.LASF55
 3781 01e8 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 87


 3782 01e9 02       		.byte	0x2
 3783 01ea 1103     		.2byte	0x311
 3784 01ec 0F020000 		.4byte	0x20f
 3785 01f0 08       		.uleb128 0x8
 3786 01f1 74020000 		.4byte	.LASF56
 3787 01f5 00       		.sleb128 0
 3788 01f6 08       		.uleb128 0x8
 3789 01f7 2B070000 		.4byte	.LASF57
 3790 01fb 01       		.sleb128 1
 3791 01fc 08       		.uleb128 0x8
 3792 01fd D0050000 		.4byte	.LASF58
 3793 0201 02       		.sleb128 2
 3794 0202 08       		.uleb128 0x8
 3795 0203 16000000 		.4byte	.LASF59
 3796 0207 03       		.sleb128 3
 3797 0208 08       		.uleb128 0x8
 3798 0209 C1000000 		.4byte	.LASF60
 3799 020d 04       		.sleb128 4
 3800 020e 00       		.byte	0
 3801 020f 0A       		.uleb128 0xa
 3802 0210 36010000 		.4byte	.LASF63
 3803 0214 01       		.byte	0x1
 3804 0215 0F       		.byte	0xf
 3805 0216 00000000 		.4byte	.LFB34
 3806 021a 98000000 		.4byte	.LFE34-.LFB34
 3807 021e 01       		.uleb128 0x1
 3808 021f 9C       		.byte	0x9c
 3809 0220 4F020000 		.4byte	0x24f
 3810 0224 0B       		.uleb128 0xb
 3811 0225 34070000 		.4byte	.LASF61
 3812 0229 01       		.byte	0x1
 3813 022a 0F       		.byte	0xf
 3814 022b 81000000 		.4byte	0x81
 3815 022f 02       		.uleb128 0x2
 3816 0230 91       		.byte	0x91
 3817 0231 67       		.sleb128 -25
 3818 0232 0B       		.uleb128 0xb
 3819 0233 60070000 		.4byte	.LASF62
 3820 0237 01       		.byte	0x1
 3821 0238 0F       		.byte	0xf
 3822 0239 8C000000 		.4byte	0x8c
 3823 023d 02       		.uleb128 0x2
 3824 023e 91       		.byte	0x91
 3825 023f 64       		.sleb128 -28
 3826 0240 0C       		.uleb128 0xc
 3827 0241 D1030000 		.4byte	.LASF66
 3828 0245 01       		.byte	0x1
 3829 0246 11       		.byte	0x11
 3830 0247 4F020000 		.4byte	0x24f
 3831 024b 02       		.uleb128 0x2
 3832 024c 91       		.byte	0x91
 3833 024d 6C       		.sleb128 -20
 3834 024e 00       		.byte	0
 3835 024f 0D       		.uleb128 0xd
 3836 0250 81000000 		.4byte	0x81
 3837 0254 5F020000 		.4byte	0x25f
 3838 0258 0E       		.uleb128 0xe
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 88


 3839 0259 C7000000 		.4byte	0xc7
 3840 025d 08       		.byte	0x8
 3841 025e 00       		.byte	0
 3842 025f 0A       		.uleb128 0xa
 3843 0260 51070000 		.4byte	.LASF64
 3844 0264 01       		.byte	0x1
 3845 0265 20       		.byte	0x20
 3846 0266 00000000 		.4byte	.LFB35
 3847 026a 98000000 		.4byte	.LFE35-.LFB35
 3848 026e 01       		.uleb128 0x1
 3849 026f 9C       		.byte	0x9c
 3850 0270 9F020000 		.4byte	0x29f
 3851 0274 0B       		.uleb128 0xb
 3852 0275 34070000 		.4byte	.LASF61
 3853 0279 01       		.byte	0x1
 3854 027a 20       		.byte	0x20
 3855 027b 81000000 		.4byte	0x81
 3856 027f 02       		.uleb128 0x2
 3857 0280 91       		.byte	0x91
 3858 0281 67       		.sleb128 -25
 3859 0282 0B       		.uleb128 0xb
 3860 0283 56020000 		.4byte	.LASF65
 3861 0287 01       		.byte	0x1
 3862 0288 20       		.byte	0x20
 3863 0289 8C000000 		.4byte	0x8c
 3864 028d 02       		.uleb128 0x2
 3865 028e 91       		.byte	0x91
 3866 028f 64       		.sleb128 -28
 3867 0290 0C       		.uleb128 0xc
 3868 0291 D1030000 		.4byte	.LASF66
 3869 0295 01       		.byte	0x1
 3870 0296 22       		.byte	0x22
 3871 0297 4F020000 		.4byte	0x24f
 3872 029b 02       		.uleb128 0x2
 3873 029c 91       		.byte	0x91
 3874 029d 6C       		.sleb128 -20
 3875 029e 00       		.byte	0
 3876 029f 0A       		.uleb128 0xa
 3877 02a0 E4040000 		.4byte	.LASF67
 3878 02a4 01       		.byte	0x1
 3879 02a5 31       		.byte	0x31
 3880 02a6 00000000 		.4byte	.LFB36
 3881 02aa 98000000 		.4byte	.LFE36-.LFB36
 3882 02ae 01       		.uleb128 0x1
 3883 02af 9C       		.byte	0x9c
 3884 02b0 DF020000 		.4byte	0x2df
 3885 02b4 0B       		.uleb128 0xb
 3886 02b5 34070000 		.4byte	.LASF61
 3887 02b9 01       		.byte	0x1
 3888 02ba 31       		.byte	0x31
 3889 02bb 81000000 		.4byte	0x81
 3890 02bf 02       		.uleb128 0x2
 3891 02c0 91       		.byte	0x91
 3892 02c1 67       		.sleb128 -25
 3893 02c2 0B       		.uleb128 0xb
 3894 02c3 B3000000 		.4byte	.LASF68
 3895 02c7 01       		.byte	0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 89


 3896 02c8 31       		.byte	0x31
 3897 02c9 8C000000 		.4byte	0x8c
 3898 02cd 02       		.uleb128 0x2
 3899 02ce 91       		.byte	0x91
 3900 02cf 64       		.sleb128 -28
 3901 02d0 0C       		.uleb128 0xc
 3902 02d1 D1030000 		.4byte	.LASF66
 3903 02d5 01       		.byte	0x1
 3904 02d6 33       		.byte	0x33
 3905 02d7 4F020000 		.4byte	0x24f
 3906 02db 02       		.uleb128 0x2
 3907 02dc 91       		.byte	0x91
 3908 02dd 6C       		.sleb128 -20
 3909 02de 00       		.byte	0
 3910 02df 0A       		.uleb128 0xa
 3911 02e0 76040000 		.4byte	.LASF69
 3912 02e4 02       		.byte	0x2
 3913 02e5 0A       		.byte	0xa
 3914 02e6 00000000 		.4byte	.LFB37
 3915 02ea 28000000 		.4byte	.LFE37-.LFB37
 3916 02ee 01       		.uleb128 0x1
 3917 02ef 9C       		.byte	0x9c
 3918 02f0 03030000 		.4byte	0x303
 3919 02f4 0C       		.uleb128 0xc
 3920 02f5 3C070000 		.4byte	.LASF70
 3921 02f9 02       		.byte	0x2
 3922 02fa 0C       		.byte	0xc
 3923 02fb 97000000 		.4byte	0x97
 3924 02ff 02       		.uleb128 0x2
 3925 0300 91       		.byte	0x91
 3926 0301 74       		.sleb128 -12
 3927 0302 00       		.byte	0
 3928 0303 0F       		.uleb128 0xf
 3929 0304 DE020000 		.4byte	.LASF74
 3930 0308 02       		.byte	0x2
 3931 0309 13       		.byte	0x13
 3932 030a 8C000000 		.4byte	0x8c
 3933 030e 00000000 		.4byte	.LFB38
 3934 0312 54010000 		.4byte	.LFE38-.LFB38
 3935 0316 01       		.uleb128 0x1
 3936 0317 9C       		.byte	0x9c
 3937 0318 47030000 		.4byte	0x347
 3938 031c 0B       		.uleb128 0xb
 3939 031d 5D020000 		.4byte	.LASF71
 3940 0321 02       		.byte	0x2
 3941 0322 13       		.byte	0x13
 3942 0323 8C000000 		.4byte	0x8c
 3943 0327 02       		.uleb128 0x2
 3944 0328 91       		.byte	0x91
 3945 0329 6E       		.sleb128 -18
 3946 032a 0B       		.uleb128 0xb
 3947 032b 40020000 		.4byte	.LASF72
 3948 032f 02       		.byte	0x2
 3949 0330 13       		.byte	0x13
 3950 0331 8C000000 		.4byte	0x8c
 3951 0335 02       		.uleb128 0x2
 3952 0336 91       		.byte	0x91
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 90


 3953 0337 6C       		.sleb128 -20
 3954 0338 0C       		.uleb128 0xc
 3955 0339 B4040000 		.4byte	.LASF73
 3956 033d 02       		.byte	0x2
 3957 033e 15       		.byte	0x15
 3958 033f 8C000000 		.4byte	0x8c
 3959 0343 02       		.uleb128 0x2
 3960 0344 91       		.byte	0x91
 3961 0345 76       		.sleb128 -10
 3962 0346 00       		.byte	0
 3963 0347 0F       		.uleb128 0xf
 3964 0348 03020000 		.4byte	.LASF75
 3965 034c 02       		.byte	0x2
 3966 034d 4F       		.byte	0x4f
 3967 034e 8C000000 		.4byte	0x8c
 3968 0352 00000000 		.4byte	.LFB39
 3969 0356 F0000000 		.4byte	.LFE39-.LFB39
 3970 035a 01       		.uleb128 0x1
 3971 035b 9C       		.byte	0x9c
 3972 035c 99030000 		.4byte	0x399
 3973 0360 0B       		.uleb128 0xb
 3974 0361 5D020000 		.4byte	.LASF71
 3975 0365 02       		.byte	0x2
 3976 0366 4F       		.byte	0x4f
 3977 0367 8C000000 		.4byte	0x8c
 3978 036b 02       		.uleb128 0x2
 3979 036c 91       		.byte	0x91
 3980 036d 6E       		.sleb128 -18
 3981 036e 0B       		.uleb128 0xb
 3982 036f 40020000 		.4byte	.LASF72
 3983 0373 02       		.byte	0x2
 3984 0374 4F       		.byte	0x4f
 3985 0375 8C000000 		.4byte	0x8c
 3986 0379 02       		.uleb128 0x2
 3987 037a 91       		.byte	0x91
 3988 037b 6C       		.sleb128 -20
 3989 037c 0C       		.uleb128 0xc
 3990 037d B4040000 		.4byte	.LASF73
 3991 0381 02       		.byte	0x2
 3992 0382 51       		.byte	0x51
 3993 0383 8C000000 		.4byte	0x8c
 3994 0387 02       		.uleb128 0x2
 3995 0388 91       		.byte	0x91
 3996 0389 76       		.sleb128 -10
 3997 038a 0C       		.uleb128 0xc
 3998 038b F7030000 		.4byte	.LASF76
 3999 038f 02       		.byte	0x2
 4000 0390 52       		.byte	0x52
 4001 0391 8C000000 		.4byte	0x8c
 4002 0395 02       		.uleb128 0x2
 4003 0396 91       		.byte	0x91
 4004 0397 74       		.sleb128 -12
 4005 0398 00       		.byte	0
 4006 0399 0F       		.uleb128 0xf
 4007 039a C0040000 		.4byte	.LASF77
 4008 039e 02       		.byte	0x2
 4009 039f 76       		.byte	0x76
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 91


 4010 03a0 8C000000 		.4byte	0x8c
 4011 03a4 00000000 		.4byte	.LFB40
 4012 03a8 D8000000 		.4byte	.LFE40-.LFB40
 4013 03ac 01       		.uleb128 0x1
 4014 03ad 9C       		.byte	0x9c
 4015 03ae EB030000 		.4byte	0x3eb
 4016 03b2 0B       		.uleb128 0xb
 4017 03b3 5D020000 		.4byte	.LASF71
 4018 03b7 02       		.byte	0x2
 4019 03b8 76       		.byte	0x76
 4020 03b9 8C000000 		.4byte	0x8c
 4021 03bd 02       		.uleb128 0x2
 4022 03be 91       		.byte	0x91
 4023 03bf 6E       		.sleb128 -18
 4024 03c0 0B       		.uleb128 0xb
 4025 03c1 40020000 		.4byte	.LASF72
 4026 03c5 02       		.byte	0x2
 4027 03c6 76       		.byte	0x76
 4028 03c7 8C000000 		.4byte	0x8c
 4029 03cb 02       		.uleb128 0x2
 4030 03cc 91       		.byte	0x91
 4031 03cd 6C       		.sleb128 -20
 4032 03ce 0C       		.uleb128 0xc
 4033 03cf B4040000 		.4byte	.LASF73
 4034 03d3 02       		.byte	0x2
 4035 03d4 78       		.byte	0x78
 4036 03d5 8C000000 		.4byte	0x8c
 4037 03d9 02       		.uleb128 0x2
 4038 03da 91       		.byte	0x91
 4039 03db 76       		.sleb128 -10
 4040 03dc 0C       		.uleb128 0xc
 4041 03dd F7030000 		.4byte	.LASF76
 4042 03e1 02       		.byte	0x2
 4043 03e2 79       		.byte	0x79
 4044 03e3 8C000000 		.4byte	0x8c
 4045 03e7 02       		.uleb128 0x2
 4046 03e8 91       		.byte	0x91
 4047 03e9 74       		.sleb128 -12
 4048 03ea 00       		.byte	0
 4049 03eb 0F       		.uleb128 0xf
 4050 03ec 7F030000 		.4byte	.LASF78
 4051 03f0 02       		.byte	0x2
 4052 03f1 9D       		.byte	0x9d
 4053 03f2 8C000000 		.4byte	0x8c
 4054 03f6 00000000 		.4byte	.LFB41
 4055 03fa 78000000 		.4byte	.LFE41-.LFB41
 4056 03fe 01       		.uleb128 0x1
 4057 03ff 9C       		.byte	0x9c
 4058 0400 67040000 		.4byte	0x467
 4059 0404 0B       		.uleb128 0xb
 4060 0405 59050000 		.4byte	.LASF79
 4061 0409 02       		.byte	0x2
 4062 040a 9D       		.byte	0x9d
 4063 040b CE000000 		.4byte	0xce
 4064 040f 02       		.uleb128 0x2
 4065 0410 91       		.byte	0x91
 4066 0411 6C       		.sleb128 -20
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 92


 4067 0412 0B       		.uleb128 0xb
 4068 0413 67010000 		.4byte	.LASF80
 4069 0417 02       		.byte	0x2
 4070 0418 9D       		.byte	0x9d
 4071 0419 81000000 		.4byte	0x81
 4072 041d 02       		.uleb128 0x2
 4073 041e 91       		.byte	0x91
 4074 041f 6B       		.sleb128 -21
 4075 0420 0B       		.uleb128 0xb
 4076 0421 6D010000 		.4byte	.LASF81
 4077 0425 02       		.byte	0x2
 4078 0426 9D       		.byte	0x9d
 4079 0427 81000000 		.4byte	0x81
 4080 042b 02       		.uleb128 0x2
 4081 042c 91       		.byte	0x91
 4082 042d 6A       		.sleb128 -22
 4083 042e 0C       		.uleb128 0xc
 4084 042f 6C060000 		.4byte	.LASF82
 4085 0433 02       		.byte	0x2
 4086 0434 9F       		.byte	0x9f
 4087 0435 8C000000 		.4byte	0x8c
 4088 0439 02       		.uleb128 0x2
 4089 043a 91       		.byte	0x91
 4090 043b 70       		.sleb128 -16
 4091 043c 0C       		.uleb128 0xc
 4092 043d 8D010000 		.4byte	.LASF83
 4093 0441 02       		.byte	0x2
 4094 0442 A0       		.byte	0xa0
 4095 0443 8C000000 		.4byte	0x8c
 4096 0447 02       		.uleb128 0x2
 4097 0448 91       		.byte	0x91
 4098 0449 76       		.sleb128 -10
 4099 044a 0C       		.uleb128 0xc
 4100 044b 93010000 		.4byte	.LASF84
 4101 044f 02       		.byte	0x2
 4102 0450 A1       		.byte	0xa1
 4103 0451 8C000000 		.4byte	0x8c
 4104 0455 02       		.uleb128 0x2
 4105 0456 91       		.byte	0x91
 4106 0457 74       		.sleb128 -12
 4107 0458 0C       		.uleb128 0xc
 4108 0459 99010000 		.4byte	.LASF85
 4109 045d 02       		.byte	0x2
 4110 045e A2       		.byte	0xa2
 4111 045f A2000000 		.4byte	0xa2
 4112 0463 02       		.uleb128 0x2
 4113 0464 91       		.byte	0x91
 4114 0465 72       		.sleb128 -14
 4115 0466 00       		.byte	0
 4116 0467 0F       		.uleb128 0xf
 4117 0468 A0050000 		.4byte	.LASF86
 4118 046c 02       		.byte	0x2
 4119 046d AB       		.byte	0xab
 4120 046e 8C000000 		.4byte	0x8c
 4121 0472 00000000 		.4byte	.LFB42
 4122 0476 6C000000 		.4byte	.LFE42-.LFB42
 4123 047a 01       		.uleb128 0x1
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 93


 4124 047b 9C       		.byte	0x9c
 4125 047c E3040000 		.4byte	0x4e3
 4126 0480 0B       		.uleb128 0xb
 4127 0481 59050000 		.4byte	.LASF79
 4128 0485 02       		.byte	0x2
 4129 0486 AB       		.byte	0xab
 4130 0487 CE000000 		.4byte	0xce
 4131 048b 02       		.uleb128 0x2
 4132 048c 91       		.byte	0x91
 4133 048d 6C       		.sleb128 -20
 4134 048e 0B       		.uleb128 0xb
 4135 048f 67010000 		.4byte	.LASF80
 4136 0493 02       		.byte	0x2
 4137 0494 AB       		.byte	0xab
 4138 0495 81000000 		.4byte	0x81
 4139 0499 02       		.uleb128 0x2
 4140 049a 91       		.byte	0x91
 4141 049b 6B       		.sleb128 -21
 4142 049c 0B       		.uleb128 0xb
 4143 049d 6D010000 		.4byte	.LASF81
 4144 04a1 02       		.byte	0x2
 4145 04a2 AB       		.byte	0xab
 4146 04a3 81000000 		.4byte	0x81
 4147 04a7 02       		.uleb128 0x2
 4148 04a8 91       		.byte	0x91
 4149 04a9 6A       		.sleb128 -22
 4150 04aa 0C       		.uleb128 0xc
 4151 04ab 6C060000 		.4byte	.LASF82
 4152 04af 02       		.byte	0x2
 4153 04b0 AD       		.byte	0xad
 4154 04b1 8C000000 		.4byte	0x8c
 4155 04b5 02       		.uleb128 0x2
 4156 04b6 91       		.byte	0x91
 4157 04b7 70       		.sleb128 -16
 4158 04b8 0C       		.uleb128 0xc
 4159 04b9 8D010000 		.4byte	.LASF83
 4160 04bd 02       		.byte	0x2
 4161 04be AE       		.byte	0xae
 4162 04bf 8C000000 		.4byte	0x8c
 4163 04c3 02       		.uleb128 0x2
 4164 04c4 91       		.byte	0x91
 4165 04c5 76       		.sleb128 -10
 4166 04c6 0C       		.uleb128 0xc
 4167 04c7 93010000 		.4byte	.LASF84
 4168 04cb 02       		.byte	0x2
 4169 04cc AF       		.byte	0xaf
 4170 04cd 8C000000 		.4byte	0x8c
 4171 04d1 02       		.uleb128 0x2
 4172 04d2 91       		.byte	0x91
 4173 04d3 74       		.sleb128 -12
 4174 04d4 0C       		.uleb128 0xc
 4175 04d5 99010000 		.4byte	.LASF85
 4176 04d9 02       		.byte	0x2
 4177 04da B0       		.byte	0xb0
 4178 04db A2000000 		.4byte	0xa2
 4179 04df 02       		.uleb128 0x2
 4180 04e0 91       		.byte	0x91
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 94


 4181 04e1 72       		.sleb128 -14
 4182 04e2 00       		.byte	0
 4183 04e3 0F       		.uleb128 0xf
 4184 04e4 24020000 		.4byte	.LASF87
 4185 04e8 02       		.byte	0x2
 4186 04e9 B9       		.byte	0xb9
 4187 04ea 8C000000 		.4byte	0x8c
 4188 04ee 00000000 		.4byte	.LFB43
 4189 04f2 68000000 		.4byte	.LFE43-.LFB43
 4190 04f6 01       		.uleb128 0x1
 4191 04f7 9C       		.byte	0x9c
 4192 04f8 5F050000 		.4byte	0x55f
 4193 04fc 0B       		.uleb128 0xb
 4194 04fd 59050000 		.4byte	.LASF79
 4195 0501 02       		.byte	0x2
 4196 0502 B9       		.byte	0xb9
 4197 0503 CE000000 		.4byte	0xce
 4198 0507 02       		.uleb128 0x2
 4199 0508 91       		.byte	0x91
 4200 0509 6C       		.sleb128 -20
 4201 050a 0B       		.uleb128 0xb
 4202 050b 67010000 		.4byte	.LASF80
 4203 050f 02       		.byte	0x2
 4204 0510 B9       		.byte	0xb9
 4205 0511 81000000 		.4byte	0x81
 4206 0515 02       		.uleb128 0x2
 4207 0516 91       		.byte	0x91
 4208 0517 6B       		.sleb128 -21
 4209 0518 0B       		.uleb128 0xb
 4210 0519 6D010000 		.4byte	.LASF81
 4211 051d 02       		.byte	0x2
 4212 051e B9       		.byte	0xb9
 4213 051f 81000000 		.4byte	0x81
 4214 0523 02       		.uleb128 0x2
 4215 0524 91       		.byte	0x91
 4216 0525 6A       		.sleb128 -22
 4217 0526 0C       		.uleb128 0xc
 4218 0527 6C060000 		.4byte	.LASF82
 4219 052b 02       		.byte	0x2
 4220 052c BB       		.byte	0xbb
 4221 052d 8C000000 		.4byte	0x8c
 4222 0531 02       		.uleb128 0x2
 4223 0532 91       		.byte	0x91
 4224 0533 70       		.sleb128 -16
 4225 0534 0C       		.uleb128 0xc
 4226 0535 8D010000 		.4byte	.LASF83
 4227 0539 02       		.byte	0x2
 4228 053a BC       		.byte	0xbc
 4229 053b 8C000000 		.4byte	0x8c
 4230 053f 02       		.uleb128 0x2
 4231 0540 91       		.byte	0x91
 4232 0541 76       		.sleb128 -10
 4233 0542 0C       		.uleb128 0xc
 4234 0543 93010000 		.4byte	.LASF84
 4235 0547 02       		.byte	0x2
 4236 0548 BD       		.byte	0xbd
 4237 0549 8C000000 		.4byte	0x8c
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 95


 4238 054d 02       		.uleb128 0x2
 4239 054e 91       		.byte	0x91
 4240 054f 74       		.sleb128 -12
 4241 0550 0C       		.uleb128 0xc
 4242 0551 99010000 		.4byte	.LASF85
 4243 0555 02       		.byte	0x2
 4244 0556 BE       		.byte	0xbe
 4245 0557 A2000000 		.4byte	0xa2
 4246 055b 02       		.uleb128 0x2
 4247 055c 91       		.byte	0x91
 4248 055d 72       		.sleb128 -14
 4249 055e 00       		.byte	0
 4250 055f 10       		.uleb128 0x10
 4251 0560 EB030000 		.4byte	.LASF88
 4252 0564 02       		.byte	0x2
 4253 0565 C8       		.byte	0xc8
 4254 0566 00000000 		.4byte	.LFB44
 4255 056a 74010000 		.4byte	.LFE44-.LFB44
 4256 056e 01       		.uleb128 0x1
 4257 056f 9C       		.byte	0x9c
 4258 0570 11       		.uleb128 0x11
 4259 0571 84050000 		.4byte	.LASF89
 4260 0575 02       		.byte	0x2
 4261 0576 3901     		.2byte	0x139
 4262 0578 00000000 		.4byte	.LFB45
 4263 057c 18000000 		.4byte	.LFE45-.LFB45
 4264 0580 01       		.uleb128 0x1
 4265 0581 9C       		.byte	0x9c
 4266 0582 12       		.uleb128 0x12
 4267 0583 8C030000 		.4byte	.LASF92
 4268 0587 02       		.byte	0x2
 4269 0588 4001     		.2byte	0x140
 4270 058a 00000000 		.4byte	.LFB46
 4271 058e 44010000 		.4byte	.LFE46-.LFB46
 4272 0592 01       		.uleb128 0x1
 4273 0593 9C       		.byte	0x9c
 4274 0594 B7050000 		.4byte	0x5b7
 4275 0598 13       		.uleb128 0x13
 4276 0599 75000000 		.4byte	.LASF90
 4277 059d 02       		.byte	0x2
 4278 059e 4201     		.2byte	0x142
 4279 05a0 8C000000 		.4byte	0x8c
 4280 05a4 02       		.uleb128 0x2
 4281 05a5 91       		.byte	0x91
 4282 05a6 6E       		.sleb128 -18
 4283 05a7 13       		.uleb128 0x13
 4284 05a8 06070000 		.4byte	.LASF91
 4285 05ac 02       		.byte	0x2
 4286 05ad 4301     		.2byte	0x143
 4287 05af 8C000000 		.4byte	0x8c
 4288 05b3 02       		.uleb128 0x2
 4289 05b4 91       		.byte	0x91
 4290 05b5 6C       		.sleb128 -20
 4291 05b6 00       		.byte	0
 4292 05b7 12       		.uleb128 0x12
 4293 05b8 94050000 		.4byte	.LASF93
 4294 05bc 02       		.byte	0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 96


 4295 05bd 9101     		.2byte	0x191
 4296 05bf 00000000 		.4byte	.LFB47
 4297 05c3 38010000 		.4byte	.LFE47-.LFB47
 4298 05c7 01       		.uleb128 0x1
 4299 05c8 9C       		.byte	0x9c
 4300 05c9 EC050000 		.4byte	0x5ec
 4301 05cd 13       		.uleb128 0x13
 4302 05ce 75000000 		.4byte	.LASF90
 4303 05d2 02       		.byte	0x2
 4304 05d3 9301     		.2byte	0x193
 4305 05d5 8C000000 		.4byte	0x8c
 4306 05d9 02       		.uleb128 0x2
 4307 05da 91       		.byte	0x91
 4308 05db 6E       		.sleb128 -18
 4309 05dc 13       		.uleb128 0x13
 4310 05dd 06070000 		.4byte	.LASF91
 4311 05e1 02       		.byte	0x2
 4312 05e2 9401     		.2byte	0x194
 4313 05e4 8C000000 		.4byte	0x8c
 4314 05e8 02       		.uleb128 0x2
 4315 05e9 91       		.byte	0x91
 4316 05ea 6C       		.sleb128 -20
 4317 05eb 00       		.byte	0
 4318 05ec 12       		.uleb128 0x12
 4319 05ed B5010000 		.4byte	.LASF94
 4320 05f1 02       		.byte	0x2
 4321 05f2 E101     		.2byte	0x1e1
 4322 05f4 00000000 		.4byte	.LFB48
 4323 05f8 08010000 		.4byte	.LFE48-.LFB48
 4324 05fc 01       		.uleb128 0x1
 4325 05fd 9C       		.byte	0x9c
 4326 05fe 12060000 		.4byte	0x612
 4327 0602 13       		.uleb128 0x13
 4328 0603 6C060000 		.4byte	.LASF82
 4329 0607 02       		.byte	0x2
 4330 0608 E301     		.2byte	0x1e3
 4331 060a 8C000000 		.4byte	0x8c
 4332 060e 02       		.uleb128 0x2
 4333 060f 91       		.byte	0x91
 4334 0610 6E       		.sleb128 -18
 4335 0611 00       		.byte	0
 4336 0612 12       		.uleb128 0x12
 4337 0613 52010000 		.4byte	.LASF95
 4338 0617 02       		.byte	0x2
 4339 0618 2D02     		.2byte	0x22d
 4340 061a 00000000 		.4byte	.LFB49
 4341 061e 08010000 		.4byte	.LFE49-.LFB49
 4342 0622 01       		.uleb128 0x1
 4343 0623 9C       		.byte	0x9c
 4344 0624 38060000 		.4byte	0x638
 4345 0628 13       		.uleb128 0x13
 4346 0629 6C060000 		.4byte	.LASF82
 4347 062d 02       		.byte	0x2
 4348 062e 2F02     		.2byte	0x22f
 4349 0630 8C000000 		.4byte	0x8c
 4350 0634 02       		.uleb128 0x2
 4351 0635 91       		.byte	0x91
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 97


 4352 0636 6E       		.sleb128 -18
 4353 0637 00       		.byte	0
 4354 0638 12       		.uleb128 0x12
 4355 0639 00000000 		.4byte	.LASF96
 4356 063d 02       		.byte	0x2
 4357 063e 7902     		.2byte	0x279
 4358 0640 00000000 		.4byte	.LFB50
 4359 0644 44010000 		.4byte	.LFE50-.LFB50
 4360 0648 01       		.uleb128 0x1
 4361 0649 9C       		.byte	0x9c
 4362 064a 6D060000 		.4byte	0x66d
 4363 064e 13       		.uleb128 0x13
 4364 064f 75000000 		.4byte	.LASF90
 4365 0653 02       		.byte	0x2
 4366 0654 7B02     		.2byte	0x27b
 4367 0656 8C000000 		.4byte	0x8c
 4368 065a 02       		.uleb128 0x2
 4369 065b 91       		.byte	0x91
 4370 065c 6E       		.sleb128 -18
 4371 065d 13       		.uleb128 0x13
 4372 065e 06070000 		.4byte	.LASF91
 4373 0662 02       		.byte	0x2
 4374 0663 7C02     		.2byte	0x27c
 4375 0665 8C000000 		.4byte	0x8c
 4376 0669 02       		.uleb128 0x2
 4377 066a 91       		.byte	0x91
 4378 066b 6C       		.sleb128 -20
 4379 066c 00       		.byte	0
 4380 066d 12       		.uleb128 0x12
 4381 066e 5F000000 		.4byte	.LASF97
 4382 0672 02       		.byte	0x2
 4383 0673 C902     		.2byte	0x2c9
 4384 0675 00000000 		.4byte	.LFB51
 4385 0679 FC000000 		.4byte	.LFE51-.LFB51
 4386 067d 01       		.uleb128 0x1
 4387 067e 9C       		.byte	0x9c
 4388 067f 93060000 		.4byte	0x693
 4389 0683 13       		.uleb128 0x13
 4390 0684 6C060000 		.4byte	.LASF82
 4391 0688 02       		.byte	0x2
 4392 0689 CB02     		.2byte	0x2cb
 4393 068b 8C000000 		.4byte	0x8c
 4394 068f 02       		.uleb128 0x2
 4395 0690 91       		.byte	0x91
 4396 0691 6E       		.sleb128 -18
 4397 0692 00       		.byte	0
 4398 0693 12       		.uleb128 0x12
 4399 0694 B9000000 		.4byte	.LASF98
 4400 0698 02       		.byte	0x2
 4401 0699 1203     		.2byte	0x312
 4402 069b 00000000 		.4byte	.LFB52
 4403 069f 28010000 		.4byte	.LFE52-.LFB52
 4404 06a3 01       		.uleb128 0x1
 4405 06a4 9C       		.byte	0x9c
 4406 06a5 FD060000 		.4byte	0x6fd
 4407 06a9 13       		.uleb128 0x13
 4408 06aa 55000000 		.4byte	.LASF99
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 98


 4409 06ae 02       		.byte	0x2
 4410 06af 1403     		.2byte	0x314
 4411 06b1 81000000 		.4byte	0x81
 4412 06b5 02       		.uleb128 0x2
 4413 06b6 91       		.byte	0x91
 4414 06b7 72       		.sleb128 -14
 4415 06b8 13       		.uleb128 0x13
 4416 06b9 D7030000 		.4byte	.LASF100
 4417 06bd 02       		.byte	0x2
 4418 06be 1503     		.2byte	0x315
 4419 06c0 81000000 		.4byte	0x81
 4420 06c4 02       		.uleb128 0x2
 4421 06c5 91       		.byte	0x91
 4422 06c6 71       		.sleb128 -15
 4423 06c7 13       		.uleb128 0x13
 4424 06c8 F8020000 		.4byte	.LASF101
 4425 06cc 02       		.byte	0x2
 4426 06cd 1603     		.2byte	0x316
 4427 06cf 81000000 		.4byte	0x81
 4428 06d3 02       		.uleb128 0x2
 4429 06d4 91       		.byte	0x91
 4430 06d5 70       		.sleb128 -16
 4431 06d6 13       		.uleb128 0x13
 4432 06d7 0D040000 		.4byte	.LASF102
 4433 06db 02       		.byte	0x2
 4434 06dc 1703     		.2byte	0x317
 4435 06de 81000000 		.4byte	0x81
 4436 06e2 02       		.uleb128 0x2
 4437 06e3 91       		.byte	0x91
 4438 06e4 73       		.sleb128 -13
 4439 06e5 14       		.uleb128 0x14
 4440 06e6 44000000 		.4byte	.LBB2
 4441 06ea 26000000 		.4byte	.LBE2-.LBB2
 4442 06ee 15       		.uleb128 0x15
 4443 06ef 6900     		.ascii	"i\000"
 4444 06f1 02       		.byte	0x2
 4445 06f2 2A03     		.2byte	0x32a
 4446 06f4 68000000 		.4byte	0x68
 4447 06f8 02       		.uleb128 0x2
 4448 06f9 91       		.byte	0x91
 4449 06fa 74       		.sleb128 -12
 4450 06fb 00       		.byte	0
 4451 06fc 00       		.byte	0
 4452 06fd 12       		.uleb128 0x12
 4453 06fe 9F010000 		.4byte	.LASF103
 4454 0702 02       		.byte	0x2
 4455 0703 6E03     		.2byte	0x36e
 4456 0705 00000000 		.4byte	.LFB53
 4457 0709 30010000 		.4byte	.LFE53-.LFB53
 4458 070d 01       		.uleb128 0x1
 4459 070e 9C       		.byte	0x9c
 4460 070f 2B070000 		.4byte	0x72b
 4461 0713 14       		.uleb128 0x14
 4462 0714 1E000000 		.4byte	.LBB3
 4463 0718 2C000000 		.4byte	.LBE3-.LBB3
 4464 071c 15       		.uleb128 0x15
 4465 071d 6A00     		.ascii	"j\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 99


 4466 071f 02       		.byte	0x2
 4467 0720 7503     		.2byte	0x375
 4468 0722 81000000 		.4byte	0x81
 4469 0726 02       		.uleb128 0x2
 4470 0727 91       		.byte	0x91
 4471 0728 77       		.sleb128 -9
 4472 0729 00       		.byte	0
 4473 072a 00       		.byte	0
 4474 072b 16       		.uleb128 0x16
 4475 072c A6060000 		.4byte	.LASF104
 4476 0730 02       		.byte	0x2
 4477 0731 A903     		.2byte	0x3a9
 4478 0733 68000000 		.4byte	0x68
 4479 0737 00000000 		.4byte	.LFB54
 4480 073b A4010000 		.4byte	.LFE54-.LFB54
 4481 073f 01       		.uleb128 0x1
 4482 0740 9C       		.byte	0x9c
 4483 0741 8A070000 		.4byte	0x78a
 4484 0745 13       		.uleb128 0x13
 4485 0746 EF010000 		.4byte	.LASF105
 4486 074a 02       		.byte	0x2
 4487 074b AC03     		.2byte	0x3ac
 4488 074d 81000000 		.4byte	0x81
 4489 0751 02       		.uleb128 0x2
 4490 0752 91       		.byte	0x91
 4491 0753 77       		.sleb128 -9
 4492 0754 13       		.uleb128 0x13
 4493 0755 74060000 		.4byte	.LASF106
 4494 0759 02       		.byte	0x2
 4495 075a AD03     		.2byte	0x3ad
 4496 075c A2000000 		.4byte	0xa2
 4497 0760 02       		.uleb128 0x2
 4498 0761 91       		.byte	0x91
 4499 0762 6E       		.sleb128 -18
 4500 0763 13       		.uleb128 0x13
 4501 0764 AA010000 		.4byte	.LASF107
 4502 0768 02       		.byte	0x2
 4503 0769 AE03     		.2byte	0x3ae
 4504 076b 81000000 		.4byte	0x81
 4505 076f 02       		.uleb128 0x2
 4506 0770 91       		.byte	0x91
 4507 0771 76       		.sleb128 -10
 4508 0772 14       		.uleb128 0x14
 4509 0773 88000000 		.4byte	.LBB4
 4510 0777 34000000 		.4byte	.LBE4-.LBB4
 4511 077b 15       		.uleb128 0x15
 4512 077c 6900     		.ascii	"i\000"
 4513 077e 02       		.byte	0x2
 4514 077f CC03     		.2byte	0x3cc
 4515 0781 68000000 		.4byte	0x68
 4516 0785 02       		.uleb128 0x2
 4517 0786 91       		.byte	0x91
 4518 0787 70       		.sleb128 -16
 4519 0788 00       		.byte	0
 4520 0789 00       		.byte	0
 4521 078a 17       		.uleb128 0x17
 4522 078b F0020000 		.4byte	.LASF108
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 100


 4523 078f 06       		.byte	0x6
 4524 0790 28       		.byte	0x28
 4525 0791 8C000000 		.4byte	0x8c
 4526 0795 05       		.uleb128 0x5
 4527 0796 03       		.byte	0x3
 4528 0797 00000000 		.4byte	NEUTRAL
 4529 079b 0D       		.uleb128 0xd
 4530 079c 81000000 		.4byte	0x81
 4531 07a0 AB070000 		.4byte	0x7ab
 4532 07a4 0E       		.uleb128 0xe
 4533 07a5 C7000000 		.4byte	0xc7
 4534 07a9 17       		.byte	0x17
 4535 07aa 00       		.byte	0
 4536 07ab 17       		.uleb128 0x17
 4537 07ac 11020000 		.4byte	.LASF109
 4538 07b0 06       		.byte	0x6
 4539 07b1 2C       		.byte	0x2c
 4540 07b2 9B070000 		.4byte	0x79b
 4541 07b6 05       		.uleb128 0x5
 4542 07b7 03       		.byte	0x3
 4543 07b8 00000000 		.4byte	data_array
 4544 07bc 0D       		.uleb128 0xd
 4545 07bd 76000000 		.4byte	0x76
 4546 07c1 CC070000 		.4byte	0x7cc
 4547 07c5 0E       		.uleb128 0xe
 4548 07c6 C7000000 		.4byte	0xc7
 4549 07ca 14       		.byte	0x14
 4550 07cb 00       		.byte	0
 4551 07cc 17       		.uleb128 0x17
 4552 07cd A0020000 		.4byte	.LASF110
 4553 07d1 06       		.byte	0x6
 4554 07d2 30       		.byte	0x30
 4555 07d3 BC070000 		.4byte	0x7bc
 4556 07d7 05       		.uleb128 0x5
 4557 07d8 03       		.byte	0x3
 4558 07d9 00000000 		.4byte	feedback_array
 4559 07dd 0D       		.uleb128 0xd
 4560 07de 76000000 		.4byte	0x76
 4561 07e2 ED070000 		.4byte	0x7ed
 4562 07e6 0E       		.uleb128 0xe
 4563 07e7 C7000000 		.4byte	0xc7
 4564 07eb 02       		.byte	0x2
 4565 07ec 00       		.byte	0
 4566 07ed 17       		.uleb128 0x17
 4567 07ee 01010000 		.4byte	.LASF111
 4568 07f2 06       		.byte	0x6
 4569 07f3 31       		.byte	0x31
 4570 07f4 DD070000 		.4byte	0x7dd
 4571 07f8 05       		.uleb128 0x5
 4572 07f9 03       		.byte	0x3
 4573 07fa 00000000 		.4byte	heartbeat_array
 4574 07fe 17       		.uleb128 0x17
 4575 07ff FE030000 		.4byte	.LASF112
 4576 0803 06       		.byte	0x6
 4577 0804 32       		.byte	0x32
 4578 0805 81000000 		.4byte	0x81
 4579 0809 05       		.uleb128 0x5
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 101


 4580 080a 03       		.byte	0x3
 4581 080b 00000000 		.4byte	HEARTBEAT_FLAG
 4582 080f 17       		.uleb128 0x17
 4583 0810 CF010000 		.4byte	.LASF113
 4584 0814 06       		.byte	0x6
 4585 0815 3B       		.byte	0x3b
 4586 0816 81000000 		.4byte	0x81
 4587 081a 05       		.uleb128 0x5
 4588 081b 03       		.byte	0x3
 4589 081c 00000000 		.4byte	WT_feedback_flag
 4590 0820 17       		.uleb128 0x17
 4591 0821 AF020000 		.4byte	.LASF114
 4592 0825 06       		.byte	0x6
 4593 0826 3C       		.byte	0x3c
 4594 0827 81000000 		.4byte	0x81
 4595 082b 05       		.uleb128 0x5
 4596 082c 03       		.byte	0x3
 4597 082d 00000000 		.4byte	WR_feedback_flag
 4598 0831 17       		.uleb128 0x17
 4599 0832 F8040000 		.4byte	.LASF115
 4600 0836 06       		.byte	0x6
 4601 0837 3D       		.byte	0x3d
 4602 0838 8C000000 		.4byte	0x8c
 4603 083c 05       		.uleb128 0x5
 4604 083d 03       		.byte	0x3
 4605 083e 00000000 		.4byte	WR_feedback
 4606 0842 17       		.uleb128 0x17
 4607 0843 6D030000 		.4byte	.LASF116
 4608 0847 06       		.byte	0x6
 4609 0848 3E       		.byte	0x3e
 4610 0849 81000000 		.4byte	0x81
 4611 084d 05       		.uleb128 0x5
 4612 084e 03       		.byte	0x3
 4613 084f 00000000 		.4byte	WT_FLAG
 4614 0853 17       		.uleb128 0x17
 4615 0854 1C020000 		.4byte	.LASF117
 4616 0858 06       		.byte	0x6
 4617 0859 3F       		.byte	0x3f
 4618 085a 81000000 		.4byte	0x81
 4619 085e 05       		.uleb128 0x5
 4620 085f 03       		.byte	0x3
 4621 0860 00000000 		.4byte	WR_FLAG
 4622 0864 17       		.uleb128 0x17
 4623 0865 20070000 		.4byte	.LASF118
 4624 0869 06       		.byte	0x6
 4625 086a 40       		.byte	0x40
 4626 086b 81000000 		.4byte	0x81
 4627 086f 05       		.uleb128 0x5
 4628 0870 03       		.byte	0x3
 4629 0871 00000000 		.4byte	ELBOW_FLAG
 4630 0875 17       		.uleb128 0x17
 4631 0876 96030000 		.4byte	.LASF119
 4632 087a 06       		.byte	0x6
 4633 087b 41       		.byte	0x41
 4634 087c 81000000 		.4byte	0x81
 4635 0880 05       		.uleb128 0x5
 4636 0881 03       		.byte	0x3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 102


 4637 0882 00000000 		.4byte	SHOULDER_FLAG
 4638 0886 17       		.uleb128 0x17
 4639 0887 69070000 		.4byte	.LASF120
 4640 088b 06       		.byte	0x6
 4641 088c 42       		.byte	0x42
 4642 088d 81000000 		.4byte	0x81
 4643 0891 05       		.uleb128 0x5
 4644 0892 03       		.byte	0x3
 4645 0893 00000000 		.4byte	BA_FLAG
 4646 0897 17       		.uleb128 0x17
 4647 0898 1A030000 		.4byte	.LASF121
 4648 089c 06       		.byte	0x6
 4649 089d 43       		.byte	0x43
 4650 089e 81000000 		.4byte	0x81
 4651 08a2 05       		.uleb128 0x5
 4652 08a3 03       		.byte	0x3
 4653 08a4 00000000 		.4byte	EFFECTOR_FLAG
 4654 08a8 17       		.uleb128 0x17
 4655 08a9 80040000 		.4byte	.LASF122
 4656 08ad 06       		.byte	0x6
 4657 08ae 44       		.byte	0x44
 4658 08af 81000000 		.4byte	0x81
 4659 08b3 05       		.uleb128 0x5
 4660 08b4 03       		.byte	0x3
 4661 08b5 00000000 		.4byte	ARD_FLAG
 4662 08b9 17       		.uleb128 0x17
 4663 08ba DD030000 		.4byte	.LASF123
 4664 08be 06       		.byte	0x6
 4665 08bf 47       		.byte	0x47
 4666 08c0 81000000 		.4byte	0x81
 4667 08c4 05       		.uleb128 0x5
 4668 08c5 03       		.byte	0x3
 4669 08c6 00000000 		.4byte	Time_Out_flag
 4670 08ca 17       		.uleb128 0x17
 4671 08cb 69020000 		.4byte	.LASF124
 4672 08cf 06       		.byte	0x6
 4673 08d0 48       		.byte	0x48
 4674 08d1 81000000 		.4byte	0x81
 4675 08d5 05       		.uleb128 0x5
 4676 08d6 03       		.byte	0x3
 4677 08d7 00000000 		.4byte	Time_count
 4678 08db 17       		.uleb128 0x17
 4679 08dc D6000000 		.4byte	.LASF125
 4680 08e0 06       		.byte	0x6
 4681 08e1 4C       		.byte	0x4c
 4682 08e2 81000000 		.4byte	0x81
 4683 08e6 05       		.uleb128 0x5
 4684 08e7 03       		.byte	0x3
 4685 08e8 00000000 		.4byte	fail_safe_errors
 4686 08ec 17       		.uleb128 0x17
 4687 08ed 44070000 		.4byte	.LASF126
 4688 08f1 06       		.byte	0x6
 4689 08f2 4D       		.byte	0x4d
 4690 08f3 81000000 		.4byte	0x81
 4691 08f7 05       		.uleb128 0x5
 4692 08f8 03       		.byte	0x3
 4693 08f9 00000000 		.4byte	shldr_errors
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 103


 4694 08fd 17       		.uleb128 0x17
 4695 08fe 1F000000 		.4byte	.LASF127
 4696 0902 06       		.byte	0x6
 4697 0903 4E       		.byte	0x4e
 4698 0904 81000000 		.4byte	0x81
 4699 0908 05       		.uleb128 0x5
 4700 0909 03       		.byte	0x3
 4701 090a 00000000 		.4byte	elbw_errors
 4702 090e 17       		.uleb128 0x17
 4703 090f C5010000 		.4byte	.LASF128
 4704 0913 06       		.byte	0x6
 4705 0914 4F       		.byte	0x4f
 4706 0915 81000000 		.4byte	0x81
 4707 0919 05       		.uleb128 0x5
 4708 091a 03       		.byte	0x3
 4709 091b 00000000 		.4byte	BA_errors
 4710 091f 17       		.uleb128 0x17
 4711 0920 5C030000 		.4byte	.LASF129
 4712 0924 06       		.byte	0x6
 4713 0925 50       		.byte	0x50
 4714 0926 81000000 		.4byte	0x81
 4715 092a 05       		.uleb128 0x5
 4716 092b 03       		.byte	0x3
 4717 092c 00000000 		.4byte	WT_errors
 4718 0930 17       		.uleb128 0x17
 4719 0931 28030000 		.4byte	.LASF130
 4720 0935 06       		.byte	0x6
 4721 0936 51       		.byte	0x51
 4722 0937 81000000 		.4byte	0x81
 4723 093b 05       		.uleb128 0x5
 4724 093c 03       		.byte	0x3
 4725 093d 00000000 		.4byte	WR_errors
 4726 0941 17       		.uleb128 0x17
 4727 0942 82010000 		.4byte	.LASF131
 4728 0946 06       		.byte	0x6
 4729 0947 52       		.byte	0x52
 4730 0948 81000000 		.4byte	0x81
 4731 094c 05       		.uleb128 0x5
 4732 094d 03       		.byte	0x3
 4733 094e 00000000 		.4byte	eff_errors
 4734 0952 17       		.uleb128 0x17
 4735 0953 48010000 		.4byte	.LASF132
 4736 0957 06       		.byte	0x6
 4737 0958 54       		.byte	0x54
 4738 0959 C2000000 		.4byte	0xc2
 4739 095d 05       		.uleb128 0x5
 4740 095e 03       		.byte	0x3
 4741 095f 00000000 		.4byte	timerFlag
 4742 0963 17       		.uleb128 0x17
 4743 0964 51040000 		.4byte	.LASF133
 4744 0968 06       		.byte	0x6
 4745 0969 5C       		.byte	0x5c
 4746 096a 8C000000 		.4byte	0x8c
 4747 096e 05       		.uleb128 0x5
 4748 096f 03       		.byte	0x3
 4749 0970 00000000 		.4byte	latest_command
 4750 0974 17       		.uleb128 0x17
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 104


 4751 0975 2B000000 		.4byte	.LASF134
 4752 0979 06       		.byte	0x6
 4753 097a 60       		.byte	0x60
 4754 097b 8C000000 		.4byte	0x8c
 4755 097f 05       		.uleb128 0x5
 4756 0980 03       		.byte	0x3
 4757 0981 00000000 		.4byte	latest_WR_command
 4758 0985 17       		.uleb128 0x17
 4759 0986 AF030000 		.4byte	.LASF135
 4760 098a 06       		.byte	0x6
 4761 098b 61       		.byte	0x61
 4762 098c 8C000000 		.4byte	0x8c
 4763 0990 05       		.uleb128 0x5
 4764 0991 03       		.byte	0x3
 4765 0992 00000000 		.4byte	latest_WT_command
 4766 0996 17       		.uleb128 0x17
 4767 0997 72050000 		.4byte	.LASF136
 4768 099b 02       		.byte	0x2
 4769 099c C7       		.byte	0xc7
 4770 099d D4000000 		.4byte	0xd4
 4771 09a1 05       		.uleb128 0x5
 4772 09a2 03       		.byte	0x3
 4773 09a3 00000000 		.4byte	send_packet_state
 4774 09a7 18       		.uleb128 0x18
 4775 09a8 C1030000 		.4byte	.LASF137
 4776 09ac 02       		.byte	0x2
 4777 09ad 3E01     		.2byte	0x13e
 4778 09af FF000000 		.4byte	0xff
 4779 09b3 05       		.uleb128 0x5
 4780 09b4 03       		.byte	0x3
 4781 09b5 00000000 		.4byte	wristTilt_state
 4782 09b9 18       		.uleb128 0x18
 4783 09ba 89040000 		.4byte	.LASF138
 4784 09be 02       		.byte	0x2
 4785 09bf 8F01     		.2byte	0x18f
 4786 09c1 25010000 		.4byte	0x125
 4787 09c5 05       		.uleb128 0x5
 4788 09c6 03       		.byte	0x3
 4789 09c7 00000000 		.4byte	wristRotate_state
 4790 09cb 18       		.uleb128 0x18
 4791 09cc E7000000 		.4byte	.LASF139
 4792 09d0 02       		.byte	0x2
 4793 09d1 E001     		.2byte	0x1e0
 4794 09d3 4B010000 		.4byte	0x14b
 4795 09d7 05       		.uleb128 0x5
 4796 09d8 03       		.byte	0x3
 4797 09d9 00000000 		.4byte	elbow_state
 4798 09dd 18       		.uleb128 0x18
 4799 09de 86020000 		.4byte	.LASF140
 4800 09e2 02       		.byte	0x2
 4801 09e3 2C02     		.2byte	0x22c
 4802 09e5 71010000 		.4byte	0x171
 4803 09e9 05       		.uleb128 0x5
 4804 09ea 03       		.byte	0x3
 4805 09eb 00000000 		.4byte	shoulder_state
 4806 09ef 18       		.uleb128 0x18
 4807 09f0 3F040000 		.4byte	.LASF141
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 105


 4808 09f4 02       		.byte	0x2
 4809 09f5 7802     		.2byte	0x278
 4810 09f7 97010000 		.4byte	0x197
 4811 09fb 05       		.uleb128 0x5
 4812 09fc 03       		.byte	0x3
 4813 09fd 00000000 		.4byte	baseAzimuth_state
 4814 0a01 18       		.uleb128 0x18
 4815 0a02 4D030000 		.4byte	.LASF142
 4816 0a06 02       		.byte	0x2
 4817 0a07 C802     		.2byte	0x2c8
 4818 0a09 BD010000 		.4byte	0x1bd
 4819 0a0d 05       		.uleb128 0x5
 4820 0a0e 03       		.byte	0x3
 4821 0a0f 00000000 		.4byte	effector_state
 4822 0a13 18       		.uleb128 0x18
 4823 0a14 11010000 		.4byte	.LASF143
 4824 0a18 02       		.byte	0x2
 4825 0a19 1103     		.2byte	0x311
 4826 0a1b E3010000 		.4byte	0x1e3
 4827 0a1f 05       		.uleb128 0x5
 4828 0a20 03       		.byte	0x3
 4829 0a21 00000000 		.4byte	arduino_state
 4830 0a25 00       		.byte	0
 4831              		.section	.debug_abbrev,"",%progbits
 4832              	.Ldebug_abbrev0:
 4833 0000 01       		.uleb128 0x1
 4834 0001 11       		.uleb128 0x11
 4835 0002 01       		.byte	0x1
 4836 0003 25       		.uleb128 0x25
 4837 0004 0E       		.uleb128 0xe
 4838 0005 13       		.uleb128 0x13
 4839 0006 0B       		.uleb128 0xb
 4840 0007 03       		.uleb128 0x3
 4841 0008 0E       		.uleb128 0xe
 4842 0009 1B       		.uleb128 0x1b
 4843 000a 0E       		.uleb128 0xe
 4844 000b 55       		.uleb128 0x55
 4845 000c 17       		.uleb128 0x17
 4846 000d 11       		.uleb128 0x11
 4847 000e 01       		.uleb128 0x1
 4848 000f 10       		.uleb128 0x10
 4849 0010 17       		.uleb128 0x17
 4850 0011 00       		.byte	0
 4851 0012 00       		.byte	0
 4852 0013 02       		.uleb128 0x2
 4853 0014 24       		.uleb128 0x24
 4854 0015 00       		.byte	0
 4855 0016 0B       		.uleb128 0xb
 4856 0017 0B       		.uleb128 0xb
 4857 0018 3E       		.uleb128 0x3e
 4858 0019 0B       		.uleb128 0xb
 4859 001a 03       		.uleb128 0x3
 4860 001b 0E       		.uleb128 0xe
 4861 001c 00       		.byte	0
 4862 001d 00       		.byte	0
 4863 001e 03       		.uleb128 0x3
 4864 001f 16       		.uleb128 0x16
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 106


 4865 0020 00       		.byte	0
 4866 0021 03       		.uleb128 0x3
 4867 0022 0E       		.uleb128 0xe
 4868 0023 3A       		.uleb128 0x3a
 4869 0024 0B       		.uleb128 0xb
 4870 0025 3B       		.uleb128 0x3b
 4871 0026 0B       		.uleb128 0xb
 4872 0027 49       		.uleb128 0x49
 4873 0028 13       		.uleb128 0x13
 4874 0029 00       		.byte	0
 4875 002a 00       		.byte	0
 4876 002b 04       		.uleb128 0x4
 4877 002c 24       		.uleb128 0x24
 4878 002d 00       		.byte	0
 4879 002e 0B       		.uleb128 0xb
 4880 002f 0B       		.uleb128 0xb
 4881 0030 3E       		.uleb128 0x3e
 4882 0031 0B       		.uleb128 0xb
 4883 0032 03       		.uleb128 0x3
 4884 0033 08       		.uleb128 0x8
 4885 0034 00       		.byte	0
 4886 0035 00       		.byte	0
 4887 0036 05       		.uleb128 0x5
 4888 0037 35       		.uleb128 0x35
 4889 0038 00       		.byte	0
 4890 0039 49       		.uleb128 0x49
 4891 003a 13       		.uleb128 0x13
 4892 003b 00       		.byte	0
 4893 003c 00       		.byte	0
 4894 003d 06       		.uleb128 0x6
 4895 003e 0F       		.uleb128 0xf
 4896 003f 00       		.byte	0
 4897 0040 0B       		.uleb128 0xb
 4898 0041 0B       		.uleb128 0xb
 4899 0042 49       		.uleb128 0x49
 4900 0043 13       		.uleb128 0x13
 4901 0044 00       		.byte	0
 4902 0045 00       		.byte	0
 4903 0046 07       		.uleb128 0x7
 4904 0047 04       		.uleb128 0x4
 4905 0048 01       		.byte	0x1
 4906 0049 03       		.uleb128 0x3
 4907 004a 0E       		.uleb128 0xe
 4908 004b 0B       		.uleb128 0xb
 4909 004c 0B       		.uleb128 0xb
 4910 004d 3A       		.uleb128 0x3a
 4911 004e 0B       		.uleb128 0xb
 4912 004f 3B       		.uleb128 0x3b
 4913 0050 0B       		.uleb128 0xb
 4914 0051 01       		.uleb128 0x1
 4915 0052 13       		.uleb128 0x13
 4916 0053 00       		.byte	0
 4917 0054 00       		.byte	0
 4918 0055 08       		.uleb128 0x8
 4919 0056 28       		.uleb128 0x28
 4920 0057 00       		.byte	0
 4921 0058 03       		.uleb128 0x3
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 107


 4922 0059 0E       		.uleb128 0xe
 4923 005a 1C       		.uleb128 0x1c
 4924 005b 0D       		.uleb128 0xd
 4925 005c 00       		.byte	0
 4926 005d 00       		.byte	0
 4927 005e 09       		.uleb128 0x9
 4928 005f 04       		.uleb128 0x4
 4929 0060 01       		.byte	0x1
 4930 0061 03       		.uleb128 0x3
 4931 0062 0E       		.uleb128 0xe
 4932 0063 0B       		.uleb128 0xb
 4933 0064 0B       		.uleb128 0xb
 4934 0065 3A       		.uleb128 0x3a
 4935 0066 0B       		.uleb128 0xb
 4936 0067 3B       		.uleb128 0x3b
 4937 0068 05       		.uleb128 0x5
 4938 0069 01       		.uleb128 0x1
 4939 006a 13       		.uleb128 0x13
 4940 006b 00       		.byte	0
 4941 006c 00       		.byte	0
 4942 006d 0A       		.uleb128 0xa
 4943 006e 2E       		.uleb128 0x2e
 4944 006f 01       		.byte	0x1
 4945 0070 3F       		.uleb128 0x3f
 4946 0071 19       		.uleb128 0x19
 4947 0072 03       		.uleb128 0x3
 4948 0073 0E       		.uleb128 0xe
 4949 0074 3A       		.uleb128 0x3a
 4950 0075 0B       		.uleb128 0xb
 4951 0076 3B       		.uleb128 0x3b
 4952 0077 0B       		.uleb128 0xb
 4953 0078 27       		.uleb128 0x27
 4954 0079 19       		.uleb128 0x19
 4955 007a 11       		.uleb128 0x11
 4956 007b 01       		.uleb128 0x1
 4957 007c 12       		.uleb128 0x12
 4958 007d 06       		.uleb128 0x6
 4959 007e 40       		.uleb128 0x40
 4960 007f 18       		.uleb128 0x18
 4961 0080 9642     		.uleb128 0x2116
 4962 0082 19       		.uleb128 0x19
 4963 0083 01       		.uleb128 0x1
 4964 0084 13       		.uleb128 0x13
 4965 0085 00       		.byte	0
 4966 0086 00       		.byte	0
 4967 0087 0B       		.uleb128 0xb
 4968 0088 05       		.uleb128 0x5
 4969 0089 00       		.byte	0
 4970 008a 03       		.uleb128 0x3
 4971 008b 0E       		.uleb128 0xe
 4972 008c 3A       		.uleb128 0x3a
 4973 008d 0B       		.uleb128 0xb
 4974 008e 3B       		.uleb128 0x3b
 4975 008f 0B       		.uleb128 0xb
 4976 0090 49       		.uleb128 0x49
 4977 0091 13       		.uleb128 0x13
 4978 0092 02       		.uleb128 0x2
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 108


 4979 0093 18       		.uleb128 0x18
 4980 0094 00       		.byte	0
 4981 0095 00       		.byte	0
 4982 0096 0C       		.uleb128 0xc
 4983 0097 34       		.uleb128 0x34
 4984 0098 00       		.byte	0
 4985 0099 03       		.uleb128 0x3
 4986 009a 0E       		.uleb128 0xe
 4987 009b 3A       		.uleb128 0x3a
 4988 009c 0B       		.uleb128 0xb
 4989 009d 3B       		.uleb128 0x3b
 4990 009e 0B       		.uleb128 0xb
 4991 009f 49       		.uleb128 0x49
 4992 00a0 13       		.uleb128 0x13
 4993 00a1 02       		.uleb128 0x2
 4994 00a2 18       		.uleb128 0x18
 4995 00a3 00       		.byte	0
 4996 00a4 00       		.byte	0
 4997 00a5 0D       		.uleb128 0xd
 4998 00a6 01       		.uleb128 0x1
 4999 00a7 01       		.byte	0x1
 5000 00a8 49       		.uleb128 0x49
 5001 00a9 13       		.uleb128 0x13
 5002 00aa 01       		.uleb128 0x1
 5003 00ab 13       		.uleb128 0x13
 5004 00ac 00       		.byte	0
 5005 00ad 00       		.byte	0
 5006 00ae 0E       		.uleb128 0xe
 5007 00af 21       		.uleb128 0x21
 5008 00b0 00       		.byte	0
 5009 00b1 49       		.uleb128 0x49
 5010 00b2 13       		.uleb128 0x13
 5011 00b3 2F       		.uleb128 0x2f
 5012 00b4 0B       		.uleb128 0xb
 5013 00b5 00       		.byte	0
 5014 00b6 00       		.byte	0
 5015 00b7 0F       		.uleb128 0xf
 5016 00b8 2E       		.uleb128 0x2e
 5017 00b9 01       		.byte	0x1
 5018 00ba 3F       		.uleb128 0x3f
 5019 00bb 19       		.uleb128 0x19
 5020 00bc 03       		.uleb128 0x3
 5021 00bd 0E       		.uleb128 0xe
 5022 00be 3A       		.uleb128 0x3a
 5023 00bf 0B       		.uleb128 0xb
 5024 00c0 3B       		.uleb128 0x3b
 5025 00c1 0B       		.uleb128 0xb
 5026 00c2 27       		.uleb128 0x27
 5027 00c3 19       		.uleb128 0x19
 5028 00c4 49       		.uleb128 0x49
 5029 00c5 13       		.uleb128 0x13
 5030 00c6 11       		.uleb128 0x11
 5031 00c7 01       		.uleb128 0x1
 5032 00c8 12       		.uleb128 0x12
 5033 00c9 06       		.uleb128 0x6
 5034 00ca 40       		.uleb128 0x40
 5035 00cb 18       		.uleb128 0x18
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 109


 5036 00cc 9742     		.uleb128 0x2117
 5037 00ce 19       		.uleb128 0x19
 5038 00cf 01       		.uleb128 0x1
 5039 00d0 13       		.uleb128 0x13
 5040 00d1 00       		.byte	0
 5041 00d2 00       		.byte	0
 5042 00d3 10       		.uleb128 0x10
 5043 00d4 2E       		.uleb128 0x2e
 5044 00d5 00       		.byte	0
 5045 00d6 3F       		.uleb128 0x3f
 5046 00d7 19       		.uleb128 0x19
 5047 00d8 03       		.uleb128 0x3
 5048 00d9 0E       		.uleb128 0xe
 5049 00da 3A       		.uleb128 0x3a
 5050 00db 0B       		.uleb128 0xb
 5051 00dc 3B       		.uleb128 0x3b
 5052 00dd 0B       		.uleb128 0xb
 5053 00de 11       		.uleb128 0x11
 5054 00df 01       		.uleb128 0x1
 5055 00e0 12       		.uleb128 0x12
 5056 00e1 06       		.uleb128 0x6
 5057 00e2 40       		.uleb128 0x40
 5058 00e3 18       		.uleb128 0x18
 5059 00e4 9642     		.uleb128 0x2116
 5060 00e6 19       		.uleb128 0x19
 5061 00e7 00       		.byte	0
 5062 00e8 00       		.byte	0
 5063 00e9 11       		.uleb128 0x11
 5064 00ea 2E       		.uleb128 0x2e
 5065 00eb 00       		.byte	0
 5066 00ec 3F       		.uleb128 0x3f
 5067 00ed 19       		.uleb128 0x19
 5068 00ee 03       		.uleb128 0x3
 5069 00ef 0E       		.uleb128 0xe
 5070 00f0 3A       		.uleb128 0x3a
 5071 00f1 0B       		.uleb128 0xb
 5072 00f2 3B       		.uleb128 0x3b
 5073 00f3 05       		.uleb128 0x5
 5074 00f4 11       		.uleb128 0x11
 5075 00f5 01       		.uleb128 0x1
 5076 00f6 12       		.uleb128 0x12
 5077 00f7 06       		.uleb128 0x6
 5078 00f8 40       		.uleb128 0x40
 5079 00f9 18       		.uleb128 0x18
 5080 00fa 9642     		.uleb128 0x2116
 5081 00fc 19       		.uleb128 0x19
 5082 00fd 00       		.byte	0
 5083 00fe 00       		.byte	0
 5084 00ff 12       		.uleb128 0x12
 5085 0100 2E       		.uleb128 0x2e
 5086 0101 01       		.byte	0x1
 5087 0102 3F       		.uleb128 0x3f
 5088 0103 19       		.uleb128 0x19
 5089 0104 03       		.uleb128 0x3
 5090 0105 0E       		.uleb128 0xe
 5091 0106 3A       		.uleb128 0x3a
 5092 0107 0B       		.uleb128 0xb
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 110


 5093 0108 3B       		.uleb128 0x3b
 5094 0109 05       		.uleb128 0x5
 5095 010a 11       		.uleb128 0x11
 5096 010b 01       		.uleb128 0x1
 5097 010c 12       		.uleb128 0x12
 5098 010d 06       		.uleb128 0x6
 5099 010e 40       		.uleb128 0x40
 5100 010f 18       		.uleb128 0x18
 5101 0110 9642     		.uleb128 0x2116
 5102 0112 19       		.uleb128 0x19
 5103 0113 01       		.uleb128 0x1
 5104 0114 13       		.uleb128 0x13
 5105 0115 00       		.byte	0
 5106 0116 00       		.byte	0
 5107 0117 13       		.uleb128 0x13
 5108 0118 34       		.uleb128 0x34
 5109 0119 00       		.byte	0
 5110 011a 03       		.uleb128 0x3
 5111 011b 0E       		.uleb128 0xe
 5112 011c 3A       		.uleb128 0x3a
 5113 011d 0B       		.uleb128 0xb
 5114 011e 3B       		.uleb128 0x3b
 5115 011f 05       		.uleb128 0x5
 5116 0120 49       		.uleb128 0x49
 5117 0121 13       		.uleb128 0x13
 5118 0122 02       		.uleb128 0x2
 5119 0123 18       		.uleb128 0x18
 5120 0124 00       		.byte	0
 5121 0125 00       		.byte	0
 5122 0126 14       		.uleb128 0x14
 5123 0127 0B       		.uleb128 0xb
 5124 0128 01       		.byte	0x1
 5125 0129 11       		.uleb128 0x11
 5126 012a 01       		.uleb128 0x1
 5127 012b 12       		.uleb128 0x12
 5128 012c 06       		.uleb128 0x6
 5129 012d 00       		.byte	0
 5130 012e 00       		.byte	0
 5131 012f 15       		.uleb128 0x15
 5132 0130 34       		.uleb128 0x34
 5133 0131 00       		.byte	0
 5134 0132 03       		.uleb128 0x3
 5135 0133 08       		.uleb128 0x8
 5136 0134 3A       		.uleb128 0x3a
 5137 0135 0B       		.uleb128 0xb
 5138 0136 3B       		.uleb128 0x3b
 5139 0137 05       		.uleb128 0x5
 5140 0138 49       		.uleb128 0x49
 5141 0139 13       		.uleb128 0x13
 5142 013a 02       		.uleb128 0x2
 5143 013b 18       		.uleb128 0x18
 5144 013c 00       		.byte	0
 5145 013d 00       		.byte	0
 5146 013e 16       		.uleb128 0x16
 5147 013f 2E       		.uleb128 0x2e
 5148 0140 01       		.byte	0x1
 5149 0141 3F       		.uleb128 0x3f
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 111


 5150 0142 19       		.uleb128 0x19
 5151 0143 03       		.uleb128 0x3
 5152 0144 0E       		.uleb128 0xe
 5153 0145 3A       		.uleb128 0x3a
 5154 0146 0B       		.uleb128 0xb
 5155 0147 3B       		.uleb128 0x3b
 5156 0148 05       		.uleb128 0x5
 5157 0149 49       		.uleb128 0x49
 5158 014a 13       		.uleb128 0x13
 5159 014b 11       		.uleb128 0x11
 5160 014c 01       		.uleb128 0x1
 5161 014d 12       		.uleb128 0x12
 5162 014e 06       		.uleb128 0x6
 5163 014f 40       		.uleb128 0x40
 5164 0150 18       		.uleb128 0x18
 5165 0151 9642     		.uleb128 0x2116
 5166 0153 19       		.uleb128 0x19
 5167 0154 01       		.uleb128 0x1
 5168 0155 13       		.uleb128 0x13
 5169 0156 00       		.byte	0
 5170 0157 00       		.byte	0
 5171 0158 17       		.uleb128 0x17
 5172 0159 34       		.uleb128 0x34
 5173 015a 00       		.byte	0
 5174 015b 03       		.uleb128 0x3
 5175 015c 0E       		.uleb128 0xe
 5176 015d 3A       		.uleb128 0x3a
 5177 015e 0B       		.uleb128 0xb
 5178 015f 3B       		.uleb128 0x3b
 5179 0160 0B       		.uleb128 0xb
 5180 0161 49       		.uleb128 0x49
 5181 0162 13       		.uleb128 0x13
 5182 0163 3F       		.uleb128 0x3f
 5183 0164 19       		.uleb128 0x19
 5184 0165 02       		.uleb128 0x2
 5185 0166 18       		.uleb128 0x18
 5186 0167 00       		.byte	0
 5187 0168 00       		.byte	0
 5188 0169 18       		.uleb128 0x18
 5189 016a 34       		.uleb128 0x34
 5190 016b 00       		.byte	0
 5191 016c 03       		.uleb128 0x3
 5192 016d 0E       		.uleb128 0xe
 5193 016e 3A       		.uleb128 0x3a
 5194 016f 0B       		.uleb128 0xb
 5195 0170 3B       		.uleb128 0x3b
 5196 0171 05       		.uleb128 0x5
 5197 0172 49       		.uleb128 0x49
 5198 0173 13       		.uleb128 0x13
 5199 0174 3F       		.uleb128 0x3f
 5200 0175 19       		.uleb128 0x19
 5201 0176 02       		.uleb128 0x2
 5202 0177 18       		.uleb128 0x18
 5203 0178 00       		.byte	0
 5204 0179 00       		.byte	0
 5205 017a 00       		.byte	0
 5206              		.section	.debug_aranges,"",%progbits
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 112


 5207 0000 BC000000 		.4byte	0xbc
 5208 0004 0200     		.2byte	0x2
 5209 0006 00000000 		.4byte	.Ldebug_info0
 5210 000a 04       		.byte	0x4
 5211 000b 00       		.byte	0
 5212 000c 0000     		.2byte	0
 5213 000e 0000     		.2byte	0
 5214 0010 00000000 		.4byte	.LFB34
 5215 0014 98000000 		.4byte	.LFE34-.LFB34
 5216 0018 00000000 		.4byte	.LFB35
 5217 001c 98000000 		.4byte	.LFE35-.LFB35
 5218 0020 00000000 		.4byte	.LFB36
 5219 0024 98000000 		.4byte	.LFE36-.LFB36
 5220 0028 00000000 		.4byte	.LFB37
 5221 002c 28000000 		.4byte	.LFE37-.LFB37
 5222 0030 00000000 		.4byte	.LFB38
 5223 0034 54010000 		.4byte	.LFE38-.LFB38
 5224 0038 00000000 		.4byte	.LFB39
 5225 003c F0000000 		.4byte	.LFE39-.LFB39
 5226 0040 00000000 		.4byte	.LFB40
 5227 0044 D8000000 		.4byte	.LFE40-.LFB40
 5228 0048 00000000 		.4byte	.LFB41
 5229 004c 78000000 		.4byte	.LFE41-.LFB41
 5230 0050 00000000 		.4byte	.LFB42
 5231 0054 6C000000 		.4byte	.LFE42-.LFB42
 5232 0058 00000000 		.4byte	.LFB43
 5233 005c 68000000 		.4byte	.LFE43-.LFB43
 5234 0060 00000000 		.4byte	.LFB44
 5235 0064 74010000 		.4byte	.LFE44-.LFB44
 5236 0068 00000000 		.4byte	.LFB45
 5237 006c 18000000 		.4byte	.LFE45-.LFB45
 5238 0070 00000000 		.4byte	.LFB46
 5239 0074 44010000 		.4byte	.LFE46-.LFB46
 5240 0078 00000000 		.4byte	.LFB47
 5241 007c 38010000 		.4byte	.LFE47-.LFB47
 5242 0080 00000000 		.4byte	.LFB48
 5243 0084 08010000 		.4byte	.LFE48-.LFB48
 5244 0088 00000000 		.4byte	.LFB49
 5245 008c 08010000 		.4byte	.LFE49-.LFB49
 5246 0090 00000000 		.4byte	.LFB50
 5247 0094 44010000 		.4byte	.LFE50-.LFB50
 5248 0098 00000000 		.4byte	.LFB51
 5249 009c FC000000 		.4byte	.LFE51-.LFB51
 5250 00a0 00000000 		.4byte	.LFB52
 5251 00a4 28010000 		.4byte	.LFE52-.LFB52
 5252 00a8 00000000 		.4byte	.LFB53
 5253 00ac 30010000 		.4byte	.LFE53-.LFB53
 5254 00b0 00000000 		.4byte	.LFB54
 5255 00b4 A4010000 		.4byte	.LFE54-.LFB54
 5256 00b8 00000000 		.4byte	0
 5257 00bc 00000000 		.4byte	0
 5258              		.section	.debug_ranges,"",%progbits
 5259              	.Ldebug_ranges0:
 5260 0000 00000000 		.4byte	.LFB34
 5261 0004 98000000 		.4byte	.LFE34
 5262 0008 00000000 		.4byte	.LFB35
 5263 000c 98000000 		.4byte	.LFE35
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 113


 5264 0010 00000000 		.4byte	.LFB36
 5265 0014 98000000 		.4byte	.LFE36
 5266 0018 00000000 		.4byte	.LFB37
 5267 001c 28000000 		.4byte	.LFE37
 5268 0020 00000000 		.4byte	.LFB38
 5269 0024 54010000 		.4byte	.LFE38
 5270 0028 00000000 		.4byte	.LFB39
 5271 002c F0000000 		.4byte	.LFE39
 5272 0030 00000000 		.4byte	.LFB40
 5273 0034 D8000000 		.4byte	.LFE40
 5274 0038 00000000 		.4byte	.LFB41
 5275 003c 78000000 		.4byte	.LFE41
 5276 0040 00000000 		.4byte	.LFB42
 5277 0044 6C000000 		.4byte	.LFE42
 5278 0048 00000000 		.4byte	.LFB43
 5279 004c 68000000 		.4byte	.LFE43
 5280 0050 00000000 		.4byte	.LFB44
 5281 0054 74010000 		.4byte	.LFE44
 5282 0058 00000000 		.4byte	.LFB45
 5283 005c 18000000 		.4byte	.LFE45
 5284 0060 00000000 		.4byte	.LFB46
 5285 0064 44010000 		.4byte	.LFE46
 5286 0068 00000000 		.4byte	.LFB47
 5287 006c 38010000 		.4byte	.LFE47
 5288 0070 00000000 		.4byte	.LFB48
 5289 0074 08010000 		.4byte	.LFE48
 5290 0078 00000000 		.4byte	.LFB49
 5291 007c 08010000 		.4byte	.LFE49
 5292 0080 00000000 		.4byte	.LFB50
 5293 0084 44010000 		.4byte	.LFE50
 5294 0088 00000000 		.4byte	.LFB51
 5295 008c FC000000 		.4byte	.LFE51
 5296 0090 00000000 		.4byte	.LFB52
 5297 0094 28010000 		.4byte	.LFE52
 5298 0098 00000000 		.4byte	.LFB53
 5299 009c 30010000 		.4byte	.LFE53
 5300 00a0 00000000 		.4byte	.LFB54
 5301 00a4 A4010000 		.4byte	.LFE54
 5302 00a8 00000000 		.4byte	0
 5303 00ac 00000000 		.4byte	0
 5304              		.section	.debug_line,"",%progbits
 5305              	.Ldebug_line0:
 5306 0000 B4050000 		.section	.debug_str,"MS",%progbits,1
 5306      02006001 
 5306      00000201 
 5306      FB0E0D00 
 5306      01010101 
 5307              	.LASF96:
 5308 0000 62617365 		.ascii	"baseAzimuth\000"
 5308      417A696D 
 5308      75746800 
 5309              	.LASF27:
 5310 000c 74696C74 		.ascii	"tilt_init\000"
 5310      5F696E69 
 5310      7400
 5311              	.LASF59:
 5312 0016 6172645F 		.ascii	"ard_read\000"
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 114


 5312      72656164 
 5312      00
 5313              	.LASF127:
 5314 001f 656C6277 		.ascii	"elbw_errors\000"
 5314      5F657272 
 5314      6F727300 
 5315              	.LASF134:
 5316 002b 6C617465 		.ascii	"latest_WR_command\000"
 5316      73745F57 
 5316      525F636F 
 5316      6D6D616E 
 5316      6400
 5317              	.LASF48:
 5318 003d 42415F65 		.ascii	"BA_execute\000"
 5318      78656375 
 5318      746500
 5319              	.LASF35:
 5320 0048 656C626F 		.ascii	"elbow_states\000"
 5320      775F7374 
 5320      61746573 
 5320      00
 5321              	.LASF99:
 5322 0055 76696465 		.ascii	"video_mux\000"
 5322      6F5F6D75 
 5322      7800
 5323              	.LASF97:
 5324 005f 65666665 		.ascii	"effector\000"
 5324      63746F72 
 5324      00
 5325              	.LASF8:
 5326 0068 756E7369 		.ascii	"unsigned int\000"
 5326      676E6564 
 5326      20696E74 
 5326      00
 5327              	.LASF90:
 5328 0075 6E657765 		.ascii	"newest_command\000"
 5328      73745F63 
 5328      6F6D6D61 
 5328      6E6400
 5329              	.LASF45:
 5330 0084 62617365 		.ascii	"baseAzimuth_states\000"
 5330      417A696D 
 5330      7574685F 
 5330      73746174 
 5330      657300
 5331              	.LASF14:
 5332 0097 696E7431 		.ascii	"int16\000"
 5332      3600
 5333              	.LASF46:
 5334 009d 42415F73 		.ascii	"BA_start\000"
 5334      74617274 
 5334      00
 5335              	.LASF31:
 5336 00a6 726F7461 		.ascii	"rotate_start\000"
 5336      74655F73 
 5336      74617274 
 5336      00
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 115


 5337              	.LASF68:
 5338 00b3 73706565 		.ascii	"speed\000"
 5338      6400
 5339              	.LASF98:
 5340 00b9 61726475 		.ascii	"arduino\000"
 5340      696E6F00 
 5341              	.LASF60:
 5342 00c1 6172645F 		.ascii	"ard_write\000"
 5342      77726974 
 5342      6500
 5343              	.LASF26:
 5344 00cb 74696C74 		.ascii	"tilt_start\000"
 5344      5F737461 
 5344      727400
 5345              	.LASF125:
 5346 00d6 6661696C 		.ascii	"fail_safe_errors\000"
 5346      5F736166 
 5346      655F6572 
 5346      726F7273 
 5346      00
 5347              	.LASF139:
 5348 00e7 656C626F 		.ascii	"elbow_state\000"
 5348      775F7374 
 5348      61746500 
 5349              	.LASF15:
 5350 00f3 666C6F61 		.ascii	"float\000"
 5350      7400
 5351              	.LASF47:
 5352 00f9 42415F69 		.ascii	"BA_init\000"
 5352      6E697400 
 5353              	.LASF111:
 5354 0101 68656172 		.ascii	"heartbeat_array\000"
 5354      74626561 
 5354      745F6172 
 5354      72617900 
 5355              	.LASF143:
 5356 0111 61726475 		.ascii	"arduino_state\000"
 5356      696E6F5F 
 5356      73746174 
 5356      6500
 5357              	.LASF7:
 5358 011f 6C6F6E67 		.ascii	"long long unsigned int\000"
 5358      206C6F6E 
 5358      6720756E 
 5358      7369676E 
 5358      65642069 
 5359              	.LASF63:
 5360 0136 53657276 		.ascii	"ServoGoalPosition\000"
 5360      6F476F61 
 5360      6C506F73 
 5360      6974696F 
 5360      6E00
 5361              	.LASF132:
 5362 0148 74696D65 		.ascii	"timerFlag\000"
 5362      72466C61 
 5362      6700
 5363              	.LASF95:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 116


 5364 0152 73686F75 		.ascii	"shoulder\000"
 5364      6C646572 
 5364      00
 5365              	.LASF53:
 5366 015b 6566665F 		.ascii	"eff_execute\000"
 5366      65786563 
 5366      75746500 
 5367              	.LASF80:
 5368 0167 62797465 		.ascii	"byte1\000"
 5368      3100
 5369              	.LASF81:
 5370 016d 62797465 		.ascii	"byte2\000"
 5370      3200
 5371              	.LASF22:
 5372 0173 73656E64 		.ascii	"send_heartbeat\000"
 5372      5F686561 
 5372      72746265 
 5372      617400
 5373              	.LASF131:
 5374 0182 6566665F 		.ascii	"eff_errors\000"
 5374      6572726F 
 5374      727300
 5375              	.LASF83:
 5376 018d 74656D70 		.ascii	"temp1\000"
 5376      3100
 5377              	.LASF84:
 5378 0193 74656D70 		.ascii	"temp2\000"
 5378      3200
 5379              	.LASF85:
 5380 0199 74656D70 		.ascii	"temp3\000"
 5380      3300
 5381              	.LASF103:
 5382 019f 696E6974 		.ascii	"initialize\000"
 5382      69616C69 
 5382      7A6500
 5383              	.LASF107:
 5384 01aa 7469636B 		.ascii	"tick_count\000"
 5384      5F636F75 
 5384      6E7400
 5385              	.LASF94:
 5386 01b5 656C626F 		.ascii	"elbow\000"
 5386      7700
 5387              	.LASF51:
 5388 01bb 6566665F 		.ascii	"eff_start\000"
 5388      73746172 
 5388      7400
 5389              	.LASF128:
 5390 01c5 42415F65 		.ascii	"BA_errors\000"
 5390      72726F72 
 5390      7300
 5391              	.LASF113:
 5392 01cf 57545F66 		.ascii	"WT_feedback_flag\000"
 5392      65656462 
 5392      61636B5F 
 5392      666C6167 
 5392      00
 5393              	.LASF55:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 117


 5394 01e0 61726475 		.ascii	"arduino_states\000"
 5394      696E6F5F 
 5394      73746174 
 5394      657300
 5395              	.LASF105:
 5396 01ef 66735F63 		.ascii	"fs_count\000"
 5396      6F756E74 
 5396      00
 5397              	.LASF44:
 5398 01f8 73686C64 		.ascii	"shldr_wait\000"
 5398      725F7761 
 5398      697400
 5399              	.LASF75:
 5400 0203 57545F70 		.ascii	"WT_pos_to_vel\000"
 5400      6F735F74 
 5400      6F5F7665 
 5400      6C00
 5401              	.LASF109:
 5402 0211 64617461 		.ascii	"data_array\000"
 5402      5F617272 
 5402      617900
 5403              	.LASF117:
 5404 021c 57525F46 		.ascii	"WR_FLAG\000"
 5404      4C414700 
 5405              	.LASF87:
 5406 0224 6D616B65 		.ascii	"make_wristTilt_command\000"
 5406      5F777269 
 5406      73745469 
 5406      6C745F63 
 5406      6F6D6D61 
 5407              	.LASF17:
 5408 023b 63686172 		.ascii	"char\000"
 5408      00
 5409              	.LASF72:
 5410 0240 72656365 		.ascii	"recent_command\000"
 5410      6E745F63 
 5410      6F6D6D61 
 5410      6E6400
 5411              	.LASF12:
 5412 024f 75696E74 		.ascii	"uint16\000"
 5412      313600
 5413              	.LASF65:
 5414 0256 746F7271 		.ascii	"torque\000"
 5414      756500
 5415              	.LASF71:
 5416 025d 6E65775F 		.ascii	"new_command\000"
 5416      636F6D6D 
 5416      616E6400 
 5417              	.LASF124:
 5418 0269 54696D65 		.ascii	"Time_count\000"
 5418      5F636F75 
 5418      6E7400
 5419              	.LASF56:
 5420 0274 6172645F 		.ascii	"ard_start\000"
 5420      73746172 
 5420      7400
 5421              	.LASF10:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 118


 5422 027e 75696E74 		.ascii	"uint8_t\000"
 5422      385F7400 
 5423              	.LASF140:
 5424 0286 73686F75 		.ascii	"shoulder_state\000"
 5424      6C646572 
 5424      5F737461 
 5424      746500
 5425              	.LASF42:
 5426 0295 73686C64 		.ascii	"shldr_init\000"
 5426      725F696E 
 5426      697400
 5427              	.LASF110:
 5428 02a0 66656564 		.ascii	"feedback_array\000"
 5428      6261636B 
 5428      5F617272 
 5428      617900
 5429              	.LASF114:
 5430 02af 57525F66 		.ascii	"WR_feedback_flag\000"
 5430      65656462 
 5430      61636B5F 
 5430      666C6167 
 5430      00
 5431              	.LASF6:
 5432 02c0 6C6F6E67 		.ascii	"long long int\000"
 5432      206C6F6E 
 5432      6720696E 
 5432      7400
 5433              	.LASF40:
 5434 02ce 73686F75 		.ascii	"shoulder_states\000"
 5434      6C646572 
 5434      5F737461 
 5434      74657300 
 5435              	.LASF74:
 5436 02de 73696D70 		.ascii	"simple_pos_to_vel\000"
 5436      6C655F70 
 5436      6F735F74 
 5436      6F5F7665 
 5436      6C00
 5437              	.LASF108:
 5438 02f0 4E455554 		.ascii	"NEUTRAL\000"
 5438      52414C00 
 5439              	.LASF101:
 5440 02f8 7061636B 		.ascii	"pack_for_rover\000"
 5440      5F666F72 
 5440      5F726F76 
 5440      657200
 5441              	.LASF30:
 5442 0307 77726973 		.ascii	"wristRotate_states\000"
 5442      74526F74 
 5442      6174655F 
 5442      73746174 
 5442      657300
 5443              	.LASF121:
 5444 031a 45464645 		.ascii	"EFFECTOR_FLAG\000"
 5444      43544F52 
 5444      5F464C41 
 5444      4700
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 119


 5445              	.LASF130:
 5446 0328 57525F65 		.ascii	"WR_errors\000"
 5446      72726F72 
 5446      7300
 5447              	.LASF50:
 5448 0332 65666665 		.ascii	"effector_states\000"
 5448      63746F72 
 5448      5F737461 
 5448      74657300 
 5449              	.LASF19:
 5450 0342 73656E64 		.ascii	"send_start\000"
 5450      5F737461 
 5450      727400
 5451              	.LASF142:
 5452 034d 65666665 		.ascii	"effector_state\000"
 5452      63746F72 
 5452      5F737461 
 5452      746500
 5453              	.LASF129:
 5454 035c 57545F65 		.ascii	"WT_errors\000"
 5454      72726F72 
 5454      7300
 5455              	.LASF13:
 5456 0366 75696E74 		.ascii	"uint32\000"
 5456      333200
 5457              	.LASF116:
 5458 036d 57545F46 		.ascii	"WT_FLAG\000"
 5458      4C414700 
 5459              	.LASF23:
 5460 0375 73656E64 		.ascii	"send_wait\000"
 5460      5F776169 
 5460      7400
 5461              	.LASF78:
 5462 037f 6D616B65 		.ascii	"make_command\000"
 5462      5F636F6D 
 5462      6D616E64 
 5462      00
 5463              	.LASF92:
 5464 038c 77726973 		.ascii	"wristTilt\000"
 5464      7454696C 
 5464      7400
 5465              	.LASF119:
 5466 0396 53484F55 		.ascii	"SHOULDER_FLAG\000"
 5466      4C444552 
 5466      5F464C41 
 5466      4700
 5467              	.LASF36:
 5468 03a4 656C6277 		.ascii	"elbw_start\000"
 5468      5F737461 
 5468      727400
 5469              	.LASF135:
 5470 03af 6C617465 		.ascii	"latest_WT_command\000"
 5470      73745F57 
 5470      545F636F 
 5470      6D6D616E 
 5470      6400
 5471              	.LASF137:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 120


 5472 03c1 77726973 		.ascii	"wristTilt_state\000"
 5472      7454696C 
 5472      745F7374 
 5472      61746500 
 5473              	.LASF66:
 5474 03d1 61727261 		.ascii	"array\000"
 5474      7900
 5475              	.LASF100:
 5476 03d7 6C617365 		.ascii	"laser\000"
 5476      7200
 5477              	.LASF123:
 5478 03dd 54696D65 		.ascii	"Time_Out_flag\000"
 5478      5F4F7574 
 5478      5F666C61 
 5478      6700
 5479              	.LASF88:
 5480 03eb 73656E64 		.ascii	"send_packet\000"
 5480      5F706163 
 5480      6B657400 
 5481              	.LASF76:
 5482 03f7 6368616E 		.ascii	"change\000"
 5482      676500
 5483              	.LASF112:
 5484 03fe 48454152 		.ascii	"HEARTBEAT_FLAG\000"
 5484      54424541 
 5484      545F464C 
 5484      414700
 5485              	.LASF102:
 5486 040d 4152445F 		.ascii	"ARD_ARRAY_SIZE\000"
 5486      41525241 
 5486      595F5349 
 5486      5A4500
 5487              	.LASF33:
 5488 041c 726F7461 		.ascii	"rotate_control\000"
 5488      74655F63 
 5488      6F6E7472 
 5488      6F6C00
 5489              	.LASF20:
 5490 042b 73656E64 		.ascii	"send_init\000"
 5490      5F696E69 
 5490      7400
 5491              	.LASF2:
 5492 0435 73686F72 		.ascii	"short int\000"
 5492      7420696E 
 5492      7400
 5493              	.LASF141:
 5494 043f 62617365 		.ascii	"baseAzimuth_state\000"
 5494      417A696D 
 5494      7574685F 
 5494      73746174 
 5494      6500
 5495              	.LASF133:
 5496 0451 6C617465 		.ascii	"latest_command\000"
 5496      73745F63 
 5496      6F6D6D61 
 5496      6E6400
 5497              	.LASF4:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 121


 5498 0460 6C6F6E67 		.ascii	"long int\000"
 5498      20696E74 
 5498      00
 5499              	.LASF28:
 5500 0469 74696C74 		.ascii	"tilt_control\000"
 5500      5F636F6E 
 5500      74726F6C 
 5500      00
 5501              	.LASF69:
 5502 0476 74696D65 		.ascii	"timer_isr\000"
 5502      725F6973 
 5502      7200
 5503              	.LASF122:
 5504 0480 4152445F 		.ascii	"ARD_FLAG\000"
 5504      464C4147 
 5504      00
 5505              	.LASF138:
 5506 0489 77726973 		.ascii	"wristRotate_state\000"
 5506      74526F74 
 5506      6174655F 
 5506      73746174 
 5506      6500
 5507              	.LASF49:
 5508 049b 42415F77 		.ascii	"BA_wait\000"
 5508      61697400 
 5509              	.LASF25:
 5510 04a3 77726973 		.ascii	"wristTilt_states\000"
 5510      7454696C 
 5510      745F7374 
 5510      61746573 
 5510      00
 5511              	.LASF73:
 5512 04b4 6375725F 		.ascii	"cur_command\000"
 5512      636F6D6D 
 5512      616E6400 
 5513              	.LASF77:
 5514 04c0 57525F70 		.ascii	"WR_pos_to_vel\000"
 5514      6F735F74 
 5514      6F5F7665 
 5514      6C00
 5515              	.LASF9:
 5516 04ce 5F5F7569 		.ascii	"__uint8_t\000"
 5516      6E74385F 
 5516      7400
 5517              	.LASF34:
 5518 04d8 726F7461 		.ascii	"rotate_wait\000"
 5518      74655F77 
 5518      61697400 
 5519              	.LASF67:
 5520 04e4 53657276 		.ascii	"ServoSpeed\000"
 5520      6F537065 
 5520      656400
 5521              	.LASF54:
 5522 04ef 6566665F 		.ascii	"eff_wait\000"
 5522      77616974 
 5522      00
 5523              	.LASF115:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 122


 5524 04f8 57525F66 		.ascii	"WR_feedback\000"
 5524      65656462 
 5524      61636B00 
 5525              	.LASF21:
 5526 0504 73656E64 		.ascii	"send_feedback\000"
 5526      5F666565 
 5526      64626163 
 5526      6B00
 5527              	.LASF18:
 5528 0512 73697A65 		.ascii	"sizetype\000"
 5528      74797065 
 5528      00
 5529              	.LASF5:
 5530 051b 6C6F6E67 		.ascii	"long unsigned int\000"
 5530      20756E73 
 5530      69676E65 
 5530      6420696E 
 5530      7400
 5531              	.LASF38:
 5532 052d 656C6277 		.ascii	"elbw_execute\000"
 5532      5F657865 
 5532      63757465 
 5532      00
 5533              	.LASF24:
 5534 053a 73656E64 		.ascii	"send_packet_states\000"
 5534      5F706163 
 5534      6B65745F 
 5534      73746174 
 5534      657300
 5535              	.LASF41:
 5536 054d 73686C64 		.ascii	"shldr_start\000"
 5536      725F7374 
 5536      61727400 
 5537              	.LASF79:
 5538 0559 696E666F 		.ascii	"info_array\000"
 5538      5F617272 
 5538      617900
 5539              	.LASF1:
 5540 0564 756E7369 		.ascii	"unsigned char\000"
 5540      676E6564 
 5540      20636861 
 5540      7200
 5541              	.LASF136:
 5542 0572 73656E64 		.ascii	"send_packet_state\000"
 5542      5F706163 
 5542      6B65745F 
 5542      73746174 
 5542      6500
 5543              	.LASF89:
 5544 0584 66696C6C 		.ascii	"fill_data_array\000"
 5544      5F646174 
 5544      615F6172 
 5544      72617900 
 5545              	.LASF93:
 5546 0594 77726973 		.ascii	"wristRotate\000"
 5546      74526F74 
 5546      61746500 
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 123


 5547              	.LASF86:
 5548 05a0 6D616B65 		.ascii	"make_wristRotate_command\000"
 5548      5F777269 
 5548      7374526F 
 5548      74617465 
 5548      5F636F6D 
 5549              	.LASF52:
 5550 05b9 6566665F 		.ascii	"eff_init\000"
 5550      696E6974 
 5550      00
 5551              	.LASF43:
 5552 05c2 73686C64 		.ascii	"shldr_execute\000"
 5552      725F6578 
 5552      65637574 
 5552      6500
 5553              	.LASF58:
 5554 05d0 6172645F 		.ascii	"ard_wait\000"
 5554      77616974 
 5554      00
 5555              	.LASF32:
 5556 05d9 726F7461 		.ascii	"rotate_init\000"
 5556      74655F69 
 5556      6E697400 
 5557              	.LASF144:
 5558 05e5 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 5558      4320342E 
 5558      382E3420 
 5558      32303134 
 5558      30353236 
 5559 0618 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 5559      20726576 
 5559      6973696F 
 5559      6E203231 
 5559      31333538 
 5560 064b 30202D73 		.ascii	"0 -std=gnu99 -ffunction-sections\000"
 5560      74643D67 
 5560      6E753939 
 5560      202D6666 
 5560      756E6374 
 5561              	.LASF82:
 5562 066c 636F6D6D 		.ascii	"command\000"
 5562      616E6400 
 5563              	.LASF106:
 5564 0674 74656D70 		.ascii	"temp_val\000"
 5564      5F76616C 
 5564      00
 5565              	.LASF0:
 5566 067d 7369676E 		.ascii	"signed char\000"
 5566      65642063 
 5566      68617200 
 5567              	.LASF3:
 5568 0689 73686F72 		.ascii	"short unsigned int\000"
 5568      7420756E 
 5568      7369676E 
 5568      65642069 
 5568      6E7400
 5569              	.LASF39:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 124


 5570 069c 656C6277 		.ascii	"elbw_wait\000"
 5570      5F776169 
 5570      7400
 5571              	.LASF104:
 5572 06a6 6D61696E 		.ascii	"main\000"
 5572      00
 5573              	.LASF146:
 5574 06ab 433A5C55 		.ascii	"C:\\Users\\Samuel\\Documents\\GitHub\\Arm\\arm_cont"
 5574      73657273 
 5574      5C53616D 
 5574      75656C5C 
 5574      446F6375 
 5575 06d8 726F6C6C 		.ascii	"roller_v2\\arm_controller_v2.1.cydsn\000"
 5575      65725F76 
 5575      325C6172 
 5575      6D5F636F 
 5575      6E74726F 
 5576              	.LASF29:
 5577 06fc 74696C74 		.ascii	"tilt_wait\000"
 5577      5F776169 
 5577      7400
 5578              	.LASF91:
 5579 0706 74656D70 		.ascii	"temp_command\000"
 5579      5F636F6D 
 5579      6D616E64 
 5579      00
 5580              	.LASF11:
 5581 0713 75696E74 		.ascii	"uint8\000"
 5581      3800
 5582              	.LASF16:
 5583 0719 646F7562 		.ascii	"double\000"
 5583      6C6500
 5584              	.LASF118:
 5585 0720 454C424F 		.ascii	"ELBOW_FLAG\000"
 5585      575F464C 
 5585      414700
 5586              	.LASF57:
 5587 072b 6172645F 		.ascii	"ard_init\000"
 5587      696E6974 
 5587      00
 5588              	.LASF61:
 5589 0734 73657276 		.ascii	"servoID\000"
 5589      6F494400 
 5590              	.LASF70:
 5591 073c 6973725F 		.ascii	"isr_var\000"
 5591      76617200 
 5592              	.LASF126:
 5593 0744 73686C64 		.ascii	"shldr_errors\000"
 5593      725F6572 
 5593      726F7273 
 5593      00
 5594              	.LASF64:
 5595 0751 53657453 		.ascii	"SetServoTorque\000"
 5595      6572766F 
 5595      546F7271 
 5595      756500
 5596              	.LASF62:
ARM GAS  C:\Users\Samuel\AppData\Local\Temp\ccHmjzrz.s 			page 125


 5597 0760 706F7369 		.ascii	"position\000"
 5597      74696F6E 
 5597      00
 5598              	.LASF120:
 5599 0769 42415F46 		.ascii	"BA_FLAG\000"
 5599      4C414700 
 5600              	.LASF145:
 5601 0771 2E5C6D61 		.ascii	".\\main.c\000"
 5601      696E2E63 
 5601      00
 5602              	.LASF37:
 5603 077a 656C6277 		.ascii	"elbw_init\000"
 5603      5F696E69 
 5603      7400
 5604              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
